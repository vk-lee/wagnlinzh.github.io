<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanglinzhizhi</title>
  <subtitle>Hi, wanglinzhizhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yichewx.com/"/>
  <updated>2017-01-21T10:51:18.000Z</updated>
  <id>http://yichewx.com/</id>
  
  <author>
    <name>wanglinzhizhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java: 前期绑定和后期绑定</title>
    <link href="http://yichewx.com/2017/01/21/%E5%89%8D%E6%9C%9F%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%90%8E%E6%9C%9F%E7%BB%91%E5%AE%9A/"/>
    <id>http://yichewx.com/2017/01/21/前期绑定与后期绑定/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-前期绑定和后期绑定"><a href="#Java-前期绑定和后期绑定" class="headerlink" title="Java: 前期绑定和后期绑定"></a>Java: 前期绑定和后期绑定</h2><p>对于面向对象程序设计的最重要的妙诀：编译器不肯呢个产生传统意义上的函数调用。一个非面向对象的编译器产生的函数调用会引起所谓的<strong>前期绑定</strong>，这么做意味着编译器将产生对一个具体函数名字的调用，而运行时将这个调用解析到将要被执行的代码的绝对地址。然而在OOP中，程序直到<strong>运行时</strong>才能够确认代码的地址，所以当消息发送到一个泛化对象时，必须采用其他的机制。</p>
<p>为了解决这个问题，面向对象程序设计语言使用了<strong>后期绑定</strong> 的概念。当向对象发送消息时，被调用的代码直到运行时才能确定。编译器确保被调用方法的存在，并对调用参数和返回值执行类型检查（无法提供此类保证的语言称为<strong>弱类型</strong>的 ），但是并不知道被执行的确切代码。</p>
<p>为了执行<strong>后期绑定</strong> ，Java使用一小段特殊的代码来代替绝对地址调用。这段代码使用在对象中存储的信息来计算方法体的地址。这样根据这一小段代码的内容，每个对象都可以具有不同的行为表现。当向一个对象发送消息的时候，该对象就能够知道对这个消息应该做些什么。</p>
<p>在某些语言中，必须明确地声明希望某个方法具备后期绑定属性所带来的灵活性（C++是使用virtual 关键字来实现的），在这些语言中，方法默认不是动态绑定的。而<strong>在Java中，动态绑定是默认行为</strong>  ，不需要添加额外的关键字来实现多态。</p>
<p>—java 编程思想</p>
<p>多态，算是一种计算机程序语言级别的设计模式设计思想，我以前只觉得设计模式会用在更高的层次上，没想到在语言的原子级别居然也有这么漂亮的设计模式的思想。</p>
<p>再者对于运行时的理解，以前我对于运行时的理解是基于OS的。因为操作系统中涉及到的汇编-&gt;链接-&gt;装入的过程中理解过运行时。因为运行时动态链接是对于虚拟段页式内存管理的基础。（<strong>运行时动态链接</strong> 对某些目标模块的链接在程序执行过程中需要目标模块时，才对其进行链接）。Java的多态的动态绑定，是对运行时的十分典型的诠释。之前对于运行时的理解仅仅停留在了对在装入过程中，何时进行链接所需模块到内存这种层次，没有细致考虑具体实例是什么样的过程，看到这个叙述，感觉有所收获</p>
<p>:)</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-前期绑定和后期绑定&quot;&gt;&lt;a href=&quot;#Java-前期绑定和后期绑定&quot; class=&quot;headerlink&quot; title=&quot;Java: 前期绑定和后期绑定&quot;&gt;&lt;/a&gt;Java: 前期绑定和后期绑定&lt;/h2&gt;&lt;p&gt;对于面向对象程序设计的最重要的妙诀：编译
    
    </summary>
    
      <category term="移动web" scheme="http://yichewx.com/categories/%E7%A7%BB%E5%8A%A8web/"/>
    
    
      <category term="Java" scheme="http://yichewx.com/tags/Java/"/>
    
      <category term="前期绑定和后期绑定" scheme="http://yichewx.com/tags/%E5%89%8D%E6%9C%9F%E7%BB%91%E5%AE%9A%E5%92%8C%E5%90%8E%E6%9C%9F%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>-webkit-backface-visibility</title>
    <link href="http://yichewx.com/2017/01/21/-webkit-backface-visibility/"/>
    <id>http://yichewx.com/2017/01/21/-webkit-backface-visibility/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webkit-backface-visibility"><a href="#webkit-backface-visibility" class="headerlink" title="-webkit-backface-visibility"></a>-webkit-backface-visibility</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-backface-visibility</span><span class="selector-pseudo">:hidden</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webkit-backface-visibility&quot;&gt;&lt;a href=&quot;#webkit-backface-visibility&quot; class=&quot;headerlink&quot; title=&quot;-webkit-backface-visibility&quot;&gt;&lt;/a&gt;-webkit
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="CSS3" scheme="http://yichewx.com/tags/CSS3/"/>
    
      <category term="移动Web" scheme="http://yichewx.com/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="Web 3D" scheme="http://yichewx.com/tags/Web-3D/"/>
    
  </entry>
  
  <entry>
    <title>关于safari 浏览器 input圆角的解决方案</title>
    <link href="http://yichewx.com/2017/01/21/apple%20safari%20input%20%E6%8C%89%E9%92%AE%E7%9A%84%E5%9C%86%E8%A7%92%E9%97%AE%E9%A2%98/"/>
    <id>http://yichewx.com/2017/01/21/apple safari input 按钮的圆角问题/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于safari-浏览器-input圆角的解决方案"><a href="#关于safari-浏览器-input圆角的解决方案" class="headerlink" title="关于safari 浏览器 input圆角的解决方案"></a>关于safari 浏览器 input圆角的解决方案</h2><p>去除iOS  safari 浏览器的input的圆角问题 去掉默认样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</div></pre></td></tr></table></figure>
<p>by wanglizhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于safari-浏览器-input圆角的解决方案&quot;&gt;&lt;a href=&quot;#关于safari-浏览器-input圆角的解决方案&quot; class=&quot;headerlink&quot; title=&quot;关于safari 浏览器 input圆角的解决方案&quot;&gt;&lt;/a&gt;关于safari 浏览
    
    </summary>
    
      <category term="CSS" scheme="http://yichewx.com/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://yichewx.com/tags/CSS3/"/>
    
      <category term="移动Web" scheme="http://yichewx.com/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="iOS" scheme="http://yichewx.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>browser-sync</title>
    <link href="http://yichewx.com/2017/01/21/browser-sync%20%E7%AE%80%E6%98%8E/"/>
    <id>http://yichewx.com/2017/01/21/browser-sync 简明/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h2><p>安装  :在任意的地方单击右键 -&gt; <code>git bash</code> -&gt;输入下面的命令 -&gt; 等待.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g browser-sync</div></pre></td></tr></table></figure>
<p>使用:  在项目的文件夹下 右键-&gt; <code>git bash</code> -&gt;  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">browser-sync start --server --files &quot;css/*.css, *.html&quot;</div><div class="line"></div><div class="line">//或</div><div class="line"></div><div class="line">browser-sync start --server --files &quot;css/*.css&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;browser-sync&quot;&gt;&lt;a href=&quot;#browser-sync&quot; class=&quot;headerlink&quot; title=&quot;browser-sync&quot;&gt;&lt;/a&gt;browser-sync&lt;/h2&gt;&lt;p&gt;安装  :在任意的地方单击右键 -&amp;gt; &lt;code&gt;gi
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yichewx.com/tags/web/"/>
    
      <category term="browser-sync" scheme="http://yichewx.com/tags/browser-sync/"/>
    
  </entry>
  
  <entry>
    <title>chrome远端调试</title>
    <link href="http://yichewx.com/2017/01/21/chrome%E8%BF%9C%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    <id>http://yichewx.com/2017/01/21/chrome远端调试/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">微信web开发者工具.exe --remote-debugging-port=9222</div><div class="line"></div><div class="line">webview.showDevTools(<span class="literal">true</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;微信web开发者工具.exe --remote-debugging-port=9222&lt;/div&gt;&lt;div clas
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yichewx.com/tags/web/"/>
    
      <category term="Chrome" scheme="http://yichewx.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>CSS vertical-align 属性</title>
    <link href="http://yichewx.com/2017/01/21/CSS%20vertical-align%20%E5%9E%82%E7%9B%B4%E6%96%B9%E5%90%91%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%B1%85%E4%B8%AD%20/"/>
    <id>http://yichewx.com/2017/01/21/CSS vertical-align 垂直方向多行文本的居中 /</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-vertical-align-属性"><a href="#CSS-vertical-align-属性" class="headerlink" title="CSS vertical-align 属性"></a>CSS vertical-align 属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  </div><div class="line">true<span class="attribute">vertical-align</span>:middle	<span class="comment">/*把此元素放置在父元素的中部。*/</span></div><div class="line">  	display:table-cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-vertical-align-属性&quot;&gt;&lt;a href=&quot;#CSS-vertical-align-属性&quot; class=&quot;headerlink&quot; title=&quot;CSS vertical-align 属性&quot;&gt;&lt;/a&gt;CSS vertical-align 属性&lt;/
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="CSS" scheme="http://yichewx.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 AnimateEnd 事件</title>
    <link href="http://yichewx.com/2017/01/21/CSS3%20AnimateEnd%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yichewx.com/2017/01/21/CSS3 AnimateEnd事件/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3-AnimateEnd-事件"><a href="#CSS3-AnimateEnd-事件" class="headerlink" title="CSS3 AnimateEnd 事件"></a>CSS3 AnimateEnd 事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></div><div class="line">#myD&#123;</div><div class="line">    margin: 25px;</div><div class="line">    width: 550px;</div><div class="line">    height: 100px;</div><div class="line">    background: orange;</div><div class="line">    position: relative;</div><div class="line">    font-size: 20px;</div><div class="line">&#125;</div><div class="line">/* Chrome, Safari, Opera */</div><div class="line">@-webkit-keyframes mymove &#123;</div><div class="line">    from &#123;top: 0px;&#125;</div><div class="line">    to &#123;top: 200px;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@keyframes mymove &#123;</div><div class="line">    from &#123;top: 0px;&#125;</div><div class="line">    to &#123;top: 200px;&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用addEventListener()方法给div元素添加"animationstart事件、animationiteration事件、animationend事件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myD"</span> <span class="attr">onclick</span>=<span class="string">"myFc()"</span>&gt;</span>点击这里开始播放动画<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">var x = document.getElementById("myD");</div><div class="line">// 使用JavaScript播放动画</div><div class="line">function myFc() &#123;</div><div class="line">    x.style.WebkitAnimation = "mymove 4s 2"; // 用于Chrome、 Safari、 Opera浏览器</div><div class="line">    x.style.animation = "mymove 4s 2";       // 标准语法</div><div class="line">    &#125;</div><div class="line">// Chrome、 Safari、 Opera</div><div class="line">x.addEventListener("webkitAnimationStart", myStartFunction);</div><div class="line">x.addEventListener("webkitAnimationIteration", myRepeatFunction);</div><div class="line">x.addEventListener("webkitAnimationEnd", myEndFunction);</div><div class="line">// 标准语法</div><div class="line">x.addEventListener("animationstart", myStartFunction);</div><div class="line">x.addEventListener("animationiteration", myRepeatFunction);</div><div class="line">x.addEventListener("animationend", myEndFunction);</div><div class="line">function myStartFunction() &#123;</div><div class="line">    this.innerHTML = "触发了animationstart事件 - 开始播放动画";</div><div class="line">    this.style.backgroundColor = "pink";</div><div class="line">&#125;</div><div class="line">function myRepeatFunction() &#123;</div><div class="line">    this.innerHTML = "触发了animationiteration事件 -动画重复播放了！";</div><div class="line">    this.style.backgroundColor = "lightblue";</div><div class="line">&#125;</div><div class="line">function myEndFunction() &#123;</div><div class="line">    this.innerHTML = "触发了animationend event occured -动画播放完毕";</div><div class="line">    this.style.backgroundColor = "lightgray";</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3-AnimateEnd-事件&quot;&gt;&lt;a href=&quot;#CSS3-AnimateEnd-事件&quot; class=&quot;headerlink&quot; title=&quot;CSS3 AnimateEnd 事件&quot;&gt;&lt;/a&gt;CSS3 AnimateEnd 事件&lt;/h2&gt;&lt;figure c
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="CSS3" scheme="http://yichewx.com/tags/CSS3/"/>
    
      <category term="JS" scheme="http://yichewx.com/tags/JS/"/>
    
      <category term="移动web" scheme="http://yichewx.com/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
      <category term="动画" scheme="http://yichewx.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画简介</title>
    <link href="http://yichewx.com/2017/01/21/CSS%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B%20%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    <id>http://yichewx.com/2017/01/21/CSS动画简介 阮一峰/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS动画简介"><a href="#CSS动画简介" class="headerlink" title="CSS动画简介"></a>CSS动画简介</h2><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰</a></p>
<p>日期： <a href="http://www.ruanyifeng.com/blog/2014/02/" target="_blank" rel="external">2014年2月14日</a></p>
<p>现在，我很少写介绍CSS的文章，因为感觉网站开发的关键还是在服务器端。</p>
<p>但是，CSS动画除外，它实在太有用了。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021402.png" alt="img"></p>
<p>本文介绍CSS动画的两大组成部分：transition和animation。我不打算给出每一条属性的详尽介绍，那样可以写一本书。这篇文章只是一个简介，帮助初学者了解全貌，同时又是一个快速指南，当你想不起某一个用法的时候，能够快速地找到提示。</p>
<p>我的主要参考资料是，2013年10月，<a href="http://lea.verou.me/" target="_blank" rel="external">Lea Verou</a>在JSConf.Asia上面的演讲<a href="http://2013.jsconf.asia/blog/2013/10/31/jsconfasia-2013-lea-verou-css-in-the-4th-dimension-not-your-daddys-css-animations" target="_blank" rel="external">《CSS in the 4th Dimension》</a>。那是一个非常棒的演讲，有<a href="https://www.youtube.com/watch?v=NTJUFQmHbvc" target="_blank" rel="external">视频</a>和<a href="http://lea.verou.me/css-4d/" target="_blank" rel="external">幻灯片</a>，强烈推荐。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第一部分：CSS-Transition"><a href="#第一部分：CSS-Transition" class="headerlink" title="第一部分：CSS Transition"></a>第一部分：CSS Transition</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><p><strong>在CSS 3引入Transition（过渡）这个概念之前，CSS是没有时间轴的。也就是说，所有的状态变化，都是即时完成。</strong></p>
<p>上面是一个演示，当鼠标放置于缩略图之上，缩略图会迅速变大。注意，缩略图的变大是瞬间实现的。下面是代码，相当简单。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>transition的作用在于，指定状态变化所需要的时间。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，图片放大的过程需要1秒，效果如下。</p>
<p>我们还可以指定transition适用的属性，比如只适用于height。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，只有height的变化需要1秒实现，其他变化（主要是width）依然瞬间实现，效果如下。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-2-transition-delay"><a href="#1-2-transition-delay" class="headerlink" title="1.2 transition-delay"></a>1.2 transition-delay</h3><p>在同一行transition语句中，可以分别指定多个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，这样一来，height和width的变化是同时进行的，跟不指定它们没有差别，效果如下。</p>
<p>我们希望，让height先发生变化，等结束以后，再让width发生变化。实现这一点很容易，就是为width指定一个delay参数。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，width在1秒之后，再开始变化，也就是延迟（delay）1秒，效果如下。</p>
<p>delay的真正意义在于，它指定了动画发生的顺序，使得多个不同的transition可以连在一起，形成复杂效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-3-transition-timing-function"><a href="#1-3-transition-timing-function" class="headerlink" title="1.3 transition-timing-function"></a>1.3 transition-timing-function</h3><p>transition的状态变化速度（又称timing function），默认不是匀速的，而是逐渐放慢，这叫做ease。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了ease以外，其他模式还包括</p>
<blockquote>
<p>（1）linear：匀速</p>
<p>（2）ease-in：加速</p>
<p>（3）ease-out：减速</p>
<p>（4）cubic-bezier函数：自定义速度模式</p>
</blockquote>
<p>最后那个cubic-bezier，可以使用<a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a>来定制。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height <span class="built_in">cubic-bezier</span>(.83,.97,.05,1.44);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码会产生一个最后阶段放大过度、然后回缩的效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-4-transition的各项属性"><a href="#1-4-transition的各项属性" class="headerlink" title="1.4 transition的各项属性"></a>1.4 transition的各项属性</h3><p>transition的完整写法如下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> <span class="number">1s</span> height ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这其实是一个简写形式，可以单独定义成各个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition-property</span>: height;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-timing-function</span>: ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-5-transition的使用注意"><a href="#1-5-transition的使用注意" class="headerlink" title="1.5 transition的使用注意"></a>1.5 transition的使用注意</h3><p>（1）目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</p>
<p>（2）不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</p>
<p>（3）<strong>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-6-transition的局限"><a href="#1-6-transition的局限" class="headerlink" title="1.6 transition的局限"></a>1.6 transition的局限</h3><p>transition的优点在于简单易用，但是它有几个很大的局限。</p>
<p>（1）<strong>transition需要事件触发，所以没法在网页加载时自动发生。</strong></p>
<p>（2）<strong>transition是一次性的，不能重复发生，除非一再触发。</strong></p>
<p>（3）<strong>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</strong></p>
<p>（4）<strong>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</strong></p>
<p>CSS Animation就是为了解决这些问题而提出的。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第二部分：CSS-Animation"><a href="#第二部分：CSS-Animation" class="headerlink" title="第二部分：CSS Animation"></a>第二部分：CSS Animation</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>首先，CSS Animation需要指定动画一个周期持续的时间，以及动画效果的名称。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。效果如下。</p>
<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以指定动画具体播放的次数，比如3次。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有一个<a href="http://lea.verou.me/css-4d/#heart-demo" target="_blank" rel="external">心脏跳动</a>的例子，可供参考。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-2-animation-fill-mode"><a href="#2-2-animation-fill-mode" class="headerlink" title="2.2 animation-fill-mode"></a>2.2 animation-fill-mode</h3><p><strong>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow forwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>forwards表示让动画停留在结束状态</strong>，效果如下。</p>
<p>animation-fill-mode还可以使用下列值。</p>
<blockquote>
<p>（1）none：默认值，回到动画没开始时的状态。</p>
<p>（2）backwards：让动画回到第一帧的状态。</p>
<p>（3）both: 根据animation-direction（见后）轮流应用forwards和backwards规则。</p>
</blockquote>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-3-animation-direction"><a href="#2-3-animation-direction" class="headerlink" title="2.3 animation-direction"></a>2.3 animation-direction</h3><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>
<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background-color</span>: yellow; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: blue; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况是，animation-direction等于normal。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span> normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021401.png" alt="img"></p>
<p>简单说，<strong>animation-direction指定了动画播放的方向，最常用的值是normal和reverse。浏览器对其他值的支持情况不佳，应该慎用。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-4-animation的各项属性"><a href="#2-4-animation的各项属性" class="headerlink" title="2.4 animation的各项属性"></a>2.4 animation的各项属性</h3><p>同transition一样，animation也是一个简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> <span class="number">1s</span> rainbow linear <span class="number">3</span> forwards normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个简写形式，可以分解成各个单独的属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-name</span>: rainbow;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">  <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-fill-mode</span>:forwards;</div><div class="line">  <span class="attribute">animation-direction</span>: normal;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-5-keyframes的写法"><a href="#2-5-keyframes的写法" class="headerlink" title="2.5 keyframes的写法"></a>2.5 keyframes的写法</h3><p>keyframes关键字用来定义动画的各个状态，它的写法相当自由。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>0%可以用from代表，100%可以用to代表</strong>，因此上面的代码等同于下面的形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果省略某个状态，浏览器会自动推算中间状态</strong>，所以下面都是合法的写法。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至，可以把多个状态写在一行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> pound &#123;</div><div class="line">  <span class="selector-tag">from</span>，<span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: none; &#125;</div><div class="line">  50% &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。<code>steps</code> 函数可以实现<strong>分步过渡</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite <span class="built_in">steps</span>(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有一个非常神奇的<a href="http://dabblet.com/gist/1745856" target="_blank" rel="external">例子</a>，可以看到steps函数的用处。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-6-animation-play-state"><a href="#2-6-animation-play-state" class="headerlink" title="2.6 animation-play-state"></a>2.6 animation-play-state</h3><p>有时，<strong>动画播放过程中，会突然停止</strong>。这时，<strong>默认行为是跳回到动画的开始状态。</strong></p>
<p>上面动画中，如果鼠标移走，色块立刻回到动画开始状态。</p>
<p><strong>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码指定，没有鼠标没有悬停时，动画状态是暂停；一旦悬停，动画状态改为继续播放。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-7-浏览器前缀"><a href="#2-7-浏览器前缀" class="headerlink" title="2.7 浏览器前缀"></a>2.7 浏览器前缀</h3><p>目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。</p>
<p>也就是说，实际运用中，代码必须写成下面的样子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p>-end-</p>
<p>原文地址: <a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS动画简介&quot;&gt;&lt;a href=&quot;#CSS动画简介&quot; class=&quot;headerlink&quot; title=&quot;CSS动画简介&quot;&gt;&lt;/a&gt;CSS动画简介&lt;/h2&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_
    
    </summary>
    
      <category term="CSS" scheme="http://yichewx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yichewx.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yichewx.com/tags/CSS3/"/>
    
      <category term="CSS3动画" scheme="http://yichewx.com/tags/CSS3%E5%8A%A8%E7%94%BB/"/>
    
      <category term="阮一峰" scheme="http://yichewx.com/tags/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS、CSS以及img对DOMContentLoaded事件的影响</title>
    <link href="http://yichewx.com/2017/01/21/DOMContent/"/>
    <id>http://yichewx.com/2017/01/21/DOMContent/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS、CSS以及img对DOMContentLoaded事件的影响"><a href="#JS、CSS以及img对DOMContentLoaded事件的影响" class="headerlink" title="JS、CSS以及img对DOMContentLoaded事件的影响"></a>JS、CSS以及img对DOMContentLoaded事件的影响</h2><p>In <a href="http://www.alloyteam.com/webdevelop/web-%e5%89%8d%e7%ab%af%e4%bc%98%e5%8c%96/" target="_blank" rel="external">Web 前端优化</a>,<a href="http://www.alloyteam.com/webdevelop/" target="_blank" rel="external">Web开发</a> </p>
<p>on 2014年03月03日 by <a href="http://www.alloyteam.com/author/kerry95/" target="_blank" rel="external">TAT.kerry95</a> view: 17,634<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/#comments" target="_blank" rel="external">12</a></p>
<p>最近在做性能有关的数据上报，发现了两个非常有意思的东西：Chrome开发者工具的Timeline分析面板，以及DOMContentLoaded事件。一个是强大的令人发指的性能分析工具，一个是重要的性能指标，于是就用Timeline对DOMContentLoaded事件进行了一番研究。</p>
<h2 id="前端的纯技术就是对规范的认知"><a href="#前端的纯技术就是对规范的认知" class="headerlink" title="前端的纯技术就是对规范的认知"></a>前端的纯技术就是对规范的认知</h2><p>什么是DOMContentLoaded事件？</p>
<p>首先想到的是查看<a href="http://www.w3.org/TR/html5/syntax.html#the-end" target="_blank" rel="external">W3C的HTML5规范</a>，DOMContentLoaded事件在什么时候触发：</p>
<blockquote>
<p>Once the user agent stops parsing the document, the user agent must run the following steps:<br>\1. Set the current document readiness to “interactive” and the insertion point to undefined.<br>Pop all the nodes off the stack of open elements.<br>\2. If the list of scripts that will execute when the document has finished parsing is not empty, run these substeps:<br>2.1 Spin the event loop until the first script in the list of scripts that will execute when the document has finished parsing has its “ready to be parser-executed” flag set and the parser’s Document has no style sheet that is blocking scripts.<br>2.2 Execute the first script in the list of scripts that will execute when the document has finished parsing.<br>2.3 Remove the first script element from the list of scripts that will execute when the document has finished parsing (i.e. shift out the first entry in the list).<br>2.4 If the list of scripts that will execute when the document has finished parsing is still not empty, repeat these substeps again from substep 1.<br>\3. Queue a task to fire a simple event that bubbles named <strong>DOMContentLoaded</strong> at the Document.</p>
</blockquote>
<p>规范总是那么的晦涩，但至少有一点是可以明确了的，就是在JS（不包括动态插入的JS）执行完之后，才会触发DOMContentLoaded事件。</p>
<p>接下来看看<a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded" target="_blank" rel="external">MDN上有关DOMContentLoaded事件的文档</a>：</p>
<blockquote>
<p>The DOMContentLoaded event is fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading<br>Note: Stylesheet loads block script execution, so if you have a <code>after a</code>, the page will not finish parsing – and DOMContentLoaded will not fire – until the stylesheet is loaded.</p>
</blockquote>
<p>这么看来，至少可以得出这么一个理论：DOMContentLoaded事件本身不会等待CSS文件、图片、iframe加载完成。<br>它的触发时机是：加载完页面，解析完所有标签（不包括执行CSS和JS），并如规范中所说的设置<code>interactive</code> 和执行每个静态的script标签中的JS，然后触发。<br>而JS的执行，需要等待位于它前面的CSS加载（如果是外联的话）、执行完成，因为JS可能会依赖位于它前面的CSS计算出来的样式。</p>
<h2 id="实践是检验真理的唯一标准"><a href="#实践是检验真理的唯一标准" class="headerlink" title="实践是检验真理的唯一标准"></a>实践是检验真理的唯一标准</h2><h3 id="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"><a href="#实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成" class="headerlink" title="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"></a>实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成</h3><p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" alt="71fca778-a249-11e3-8824-2aae4440c857"></a><br>图一</p>
<p>如果页面中没有script标签，DOMContentLoaded事件并没有等待CSS文件、图片加载完成。</p>
<p>Chrome开发者工具的Timeline面板可以帮我们记录下浏览器的一举一动。图一中红色小方框中的蓝线，表示DOMContentLoaded事件，它右边的红线和绿线分别表示load事件和First paint，鼠标hover在这些线露出灰色方框下面的一小部分时就会出现带有说明文字的tips（这交互够反人类的对吧！）。</p>
<h3 id="实验2：DOMContentLoaded事件需要等待JS执行完才触发"><a href="#实验2：DOMContentLoaded事件需要等待JS执行完才触发" class="headerlink" title="实验2：DOMContentLoaded事件需要等待JS执行完才触发"></a>实验2：DOMContentLoaded事件需要等待JS执行完才触发</h3><p>index.html:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        console.timeStamp('Inline script before link in head');</div><div class="line">        window.addEventListener('DOMContentLoaded', function()&#123;</div><div class="line">            console.timeStamp('DOMContentLoaded event');</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        console.timeStamp('Inline script after link in head');</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.timeStamp(<span class="string">'External script after link in body'</span>);</div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" alt="dcf399e8-a252-11e3-92c1-c3dbad820909"></a></p>
<p>图二</p>
<p>如果页面中静态的写有script标签，DOMContentLoaded事件需要等待JS执行完才触发。<br>而script标签中的JS需要等待位于其前面的CSS的加载完成。</p>
<p><code>console.timeStamp()</code> 可以向Timeline中添加一条记录，并对应上方的一条黄线。</p>
<p>从图二中可以看出，在CSS之前的JS立刻得到了执行，而在CSS之后的JS，需要等待CSS加载完后才执行，比较明显的是main.js早就加载完了，但还是要等main.css加载完才能执行。而DOMContentLoaded事件，则是在JS执行完后才触发。滑动Timeline面板中表示展示区域的滑块，如图三，放大后即可看到表示DOMContentLoaded事件的蓝线（之前跟黄线和绿线靠的太近了），当然，通过<code>console.timeStamp()</code> 向TimeLine中添加的记录也可证明其触发时间。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" alt="910b5c2c-a253-11e3-995d-e19fb254cf4e"></a><br>图三</p>
<p>现代浏览器会并发的预加载CSS, JS，也就是一开始就并发的请求这些资源，但是，执行CSS和JS的顺序还是按原来的依赖顺序（JS的执行要等待位于其前面的CSS和JS加载、执行完）。先加载完成的资源，如果其依赖还没加载、执行完，就只能等着。</p>
<h3 id="实验3：img何时开始解码、绘制？"><a href="#实验3：img何时开始解码、绘制？" class="headerlink" title="实验3：img何时开始解码、绘制？"></a>实验3：img何时开始解码、绘制？</h3><p>从图三中我们可以发现一个有趣的地方：img的请求老早就发出了，但延迟了一段时间才开始解码。如图二、图三中的红框所示，截图中只框出了一部分表示解码的记录，而实际上这些表示解码的记录一直持续到img加载结束，如图四所示，img是一边加载一边解码的：</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" alt="7384a57a-a256-11e3-9c4a-b857956eaeed"></a><br>图四</p>
<p>抱着“猜想——验证”的想法，我猜想这是因为img这个资源是否需要展现出来，需要等 <strong>所有的JS和CSS的执行完</strong> 才知道，因为main.js可能会执行某些DOM操作，比如删除这个img元素，或者修改其src属性，而CSS可能会将其 <code>display: none</code> 。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" alt="image"></a></p>
<p>图五</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" alt="image"></a></p>
<p>图六</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" alt="image"></a><br>图七</p>
<p>图五中没有JS和CSS，img的数据一接收到就马上开始解码了。<br>图六中没有JS，但img要等到CSS加载完才开始解码。<br>图七的代码跟图六的代码唯一的区别是CSS把img给 <code>display: none;</code> ，这使得img虽然请求了，但根本没有进行解码。<br>这说明，img是否需要解码、绘图（paint）出来，确实需要等CSS加载、执行完才能知道。也就是说，CSS会阻塞img的展现！那么JS呢？</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" alt="image"></a><br>图八</p>
<p>图八对应的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script in head'</span>);</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.timeStamp(<span class="string">'DOMContentLoaded event'</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>非常令人惊讶，在有JS而没有CSS的页面中，img居然能够在收到数据后就立刻开始解码、绘图（paint)，也就是说，JS并没有阻塞img的展现！这跟我们以前理解的JS会阻塞img资源的传统观念不太一样，看来Chrome对img的加载和展现做了新的优化。</p>
<p>##</p>
<p>我们常用的jQuery的 <code>$(document).ready()</code> 方法，就是对DOMContentLoaded事件的监听（当然，其内部还会通过模拟DOMContentLoaded事件和监听onload事件来提供降级方案）。通常推荐在DOMContentLoaded事件触发的时候为DOM元素注册事件。所以尽快的让DOMContentLoaded事件触发，就意味着能够尽快让页面可交互：</p>
<ol>
<li>减小CSS文件体积，把单个CSS文件分成几个文件以并行加载，减少CSS对JS的阻塞时间</li>
<li>次要的JS文件，通过动态插入script标签来加载（动态插入的script标签不阻塞DOMContentLoaded事件的触发）</li>
<li>CSS中使用的精灵图，可以利用对img的预加载，放在html中跟CSS文件一起加载</li>
</ol>
<p>在做实验的过程中，感觉Chrome开发者工具的Timeline面板非常强大，浏览器的一举一动都记录下来。以前我们前端开发要想理解、探索浏览器的内部行为，或者摸着石头过河的做黑盒测试，或者事倍功半的研究浏览器源码，唯一高效点的做法就是学习别人的研究经验，看老外的文章，但浏览器的发展日新月异（比如这次实验发现的JS不阻塞img的展现），别人的经验始终不是最新、最适合的，关键是要结合自己的业务、需求场景，有针对性的做分析和优化。</p>
<p>##</p>
<p>PS.</p>
<p>以上测试环境为windows/chrome，并用Fiddler模拟慢速网络</p>
<p>原创文章转载请注明：</p>
<p>转载自AlloyTeam：<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/" target="_blank" rel="external">http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS、CSS以及img对DOMContentLoaded事件的影响&quot;&gt;&lt;a href=&quot;#JS、CSS以及img对DOMContentLoaded事件的影响&quot; class=&quot;headerlink&quot; title=&quot;JS、CSS以及img对DOMContentLoad
    
    </summary>
    
      <category term="Web" scheme="http://yichewx.com/categories/Web/"/>
    
    
      <category term="DOMContentLoaded" scheme="http://yichewx.com/tags/DOMContentLoaded/"/>
    
      <category term="浏览器内核" scheme="http://yichewx.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    
      <category term="Web" scheme="http://yichewx.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Git 的提交</title>
    <link href="http://yichewx.com/2017/01/21/Git%20%E6%8F%90%E4%BA%A4%E5%8E%9F%E5%88%99/"/>
    <id>http://yichewx.com/2017/01/21/Git 提交原则/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-的提交"><a href="#Git-的提交" class="headerlink" title="Git 的提交"></a>Git 的提交</h2><h3 id="提交原则"><a href="#提交原则" class="headerlink" title="提交原则"></a>提交原则</h3><p><strong>频繁提交代码 -&gt; 事务性提交.</strong> </p>
<ul>
<li><strong>提交代码的频率与合并带来的工作量成反比</strong></li>
<li><strong>尽早提交代码有利于别人把你的代码集成进去,加快项目的进展</strong> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-的提交&quot;&gt;&lt;a href=&quot;#Git-的提交&quot; class=&quot;headerlink&quot; title=&quot;Git 的提交&quot;&gt;&lt;/a&gt;Git 的提交&lt;/h2&gt;&lt;h3 id=&quot;提交原则&quot;&gt;&lt;a href=&quot;#提交原则&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Git" scheme="http://yichewx.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yichewx.com/tags/Git/"/>
    
      <category term="Git 使用" scheme="http://yichewx.com/tags/Git-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>深入理解学习Git工作流</title>
    <link href="http://yichewx.com/2017/01/21/GitFlow/"/>
    <id>http://yichewx.com/2017/01/21/GitFlow/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解学习Git工作流（git-workflow"><a href="#深入理解学习Git工作流（git-workflow" class="headerlink" title="深入理解学习Git工作流（git-workflow-"></a><a href="https://segmentfault.com/t/%E5%B7%A5%E4%BD%9C%E6%B5%81/blogs" target="_blank" rel="external">深入理解学习Git工作流（git-workflow-</a></h1><p><a href="https://segmentfault.com/u/xirong" target="_blank" rel="external"><strong>xirong</strong></a> 2015年06月18日发布</p>
<ul>
<li>推荐 <strong>28</strong> 推荐</li>
<li>已收藏 <strong>223</strong> 收藏，<strong>13.9k</strong> 浏览</li>
</ul>
<p>个人在学习git工作流的过程中，从原有的 SVN 模式很难完全理解git的协作模式，直到有一天我看到了下面的文章，好多遗留在心中的困惑迎刃而解，于是我将这部分资料进行整理放到了github上，欢迎star查看最新更新内容， <a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="external">https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md</a></p>
<ul>
<li>我们以使用SVN的工作流来使用git有什么不妥？</li>
<li>git 方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？</li>
<li>经典的master-发布、develop-主开发、hotfix-不过修复如何避免代码不经过验证上线？</li>
<li>如何在github上面与他人一起协作，star-fork-pull request是怎样的流程？</li>
</ul>
<p>我个人很感激这篇文章，所以进行了整理，希望能帮到更多的人。整篇文章由 <a href="https://github.com/xirong" target="_blank" rel="external">xirong</a> 整理自 <a href="https://github.com/oldratlee" target="_blank" rel="external">oldratlee</a> 的github，方便统一的学习回顾，在此感谢下面两位的贡献。</p>
<p>原文链接：<a href="https://www.atlassian.com/git/workflows" target="_blank" rel="external">Git Workflows and Tutorials</a></p>
<p>简体中文：由 <a href="https://github.com/oldratlee" target="_blank" rel="external">oldratlee</a> 翻译在 github 上 <a href="https://github.com/oldratlee/translations/tree/master/git-workflows-and-tutorials" target="_blank" rel="external">git-workflows-and-tutorials</a></p>
<p><br><br><br><br><br></p>
<h1 id="一、译序"><a href="#一、译序" class="headerlink" title="一、译序"></a>一、译序</h1><p>工作流其实不是一个初级主题，背后的本质问题其实是有效的项目流程管理和高效的开发协同约定，不仅是<code>Git</code>或<code>SVN</code>等<a href="http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external"><code>VCS</code></a>或<a href="http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86" target="_blank" rel="external"><code>SCM</code></a>工具的使用。</p>
<p>这篇指南以大家在<code>SVN</code>中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的<code>Pull Request</code>功能，体系地讲解了各种工作流的应用。</p>
<p>行文中实践原则和操作示例并重，对于<code>Git</code>的资深玩家可以梳理思考提升，而新接触的同学，也可以跟着step-by-step操作来操练学习并在实际工作中上手使用。</p>
<p>关于<code>Git</code>工作流主题，网上体系的中文资料不多，主要是零散的操作说明，希望这篇文章能让你更深入理解并在工作中灵活有效地使用起来。</p>
<p><strong>PS</strong>：</p>
<p>文中<code>Pull Request</code>的介绍用的是<code>Bitbucket</code>代码托管服务，由于和<code>GitHub</code>基本一样，如果你用的是<code>GitHub</code>（我自己也主要使用<code>GitHub</code>托管代码），不影响理解和操作。</p>
<p><strong>PPS</strong>：</p>
<p>本指南循序渐进地讲解工作流，如果<code>Git</code>用的不多，可以从前面的讲的工作流开始操练。操作过程去感受指南的讲解：解决什么问题、如何解决问题，这样理解就深了，也方便活用。</p>
<p><code>Gitflow</code>工作流是经典模型，体现了工作流的经验和精髓。随着项目过程复杂化，会感受到这个工作流中深思熟虑和威力！</p>
<p><code>Forking</code>工作流是协作的（<code>GitHub</code>风格）可以先看看<code>Github</code>的Help：<a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="external">Fork A Repo</a>和<a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="external">Using pull requests</a> 。照着操作，给一个<code>Github</code>项目贡献你的提交，有操作经验再看指南容易意会。指南中给了<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md#%E5%BC%80%E5%8F%91%E8%80%85fork%E6%AD%A3%E5%BC%8F%E4%BB%93%E5%BA%93" target="_blank" rel="external">自己实现<code>Fork</code>的方法</a>：<code>Fork</code>就是服务端的克隆。在指南的操练中使用代码托管服务（如<code>GitHub</code>、<code>Bitbucket</code>），可以点一下按钮就让开发者完成仓库的<code>fork</code>操作。</p>
<p>:see_no_evil: <a href="http://weibo.com/oldratlee" target="_blank" rel="external">自己</a>理解粗浅，翻译中不足和不对之处，欢迎建议（<a href="https://github.com/oldratlee/translations/issues" target="_blank" rel="external">提交Issue</a>）和指正（<a href="https://github.com/oldratlee/translations/fork" target="_blank" rel="external">Fork后提交代码</a>）！</p>
<p><br><br><br><br><br><br></p>
<h1 id="二、Git工作流指南"><a href="#二、Git工作流指南" class="headerlink" title="二、Git工作流指南"></a>二、<code>Git</code>工作流指南</h1><p>:point_right: 工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用变得很头大。这篇指南通过总览公司团队中最常用的几种<code>Git</code>工作流让大家可以上手使用。</p>
<p>在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git_workflow.png&amp;objectId=1190000002918123&amp;token=cac153a6001ea7c6e95edf20a43a45d6" alt=""></p>
<p><br><br><br><br><br></p>
<h2 id="2-1-集中式工作流"><a href="#2-1-集中式工作流" class="headerlink" title="2.1 集中式工作流"></a>2.1 集中式工作流</h2><p>如果你的开发团队成员已经很熟悉<code>Subversion</code>，集中式工作流让你无需去适应一个全新流程就可以体验<code>Git</code>带来的收益。这个工作流也可以作为向更<code>Git</code>风格工作流迁移的友好过渡。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn.png&amp;objectId=1190000002918123&amp;token=18dea553725e6476043e5f15aaa01357" alt=""></p>
<p>转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上<code>Git</code>带来的收益。团队可以用和<code>Subversion</code>完全不变的方式来开发项目。</p>
<p>但使用<code>Git</code>加强开发的工作流，<code>Git</code>有相比<code>SVN</code>的几个优势。<br>首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来 ——</p>
<p>即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</p>
<p>其次，<code>Git</code>提供了强壮的分支和合并模型。不像<code>SVN</code>，<code>Git</code>的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。</p>
<p><br><br><br><br></p>
<h3 id="2-1-1-工作方式"><a href="#2-1-1-工作方式" class="headerlink" title="2.1.1 工作方式"></a>2.1.1 工作方式</h3><p>像<code>Subversion</code>一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比<code>SVN</code>缺省的开发分支<code>trunk</code>，<code>Git</code>叫做<code>master</code>，所有修改提交到这个分支上。本工作流只用到<code>master</code>这一个分支。</p>
<p>开发者开始先克隆中央仓库。在自己的项目拷贝中像<code>SVN</code>一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。</p>
<p>要发布修改到正式项目中，开发者要把本地<code>master</code>分支的修改『推』到中央仓库中。这相当于<code>svn commit</code>操作，但<code>push</code>操作会把所有还不在中央仓库的本地提交都推上去。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-push-local.png&amp;objectId=1190000002918123&amp;token=cb6d4428bd989a9db24ea68b29588a67" alt=""></p>
<p><br><br><br><br><br></p>
<h3 id="2-1-2-冲突解决"><a href="#2-1-2-冲突解决" class="headerlink" title="2.1.2 冲突解决"></a>2.1.2 冲突解决</h3><p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，<code>Git</code>会拒绝<code>push</code>提交否则会覆盖已经在中央库的正式提交。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-managingconflicts.png&amp;objectId=1190000002918123&amp;token=11e5c3cc6f6a74ffd97f1fb369580006" alt=""></p>
<p>在开发者提交自己功能修改到中央库前，需要先<code>fetch</code>在中央库的新增提交，<code>rebase</code>自己提交到中央库提交历史之上。</p>
<p>这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的<code>SVN</code>的工作流中一样。</p>
<p>如果本地修改和上游提交有冲突，<code>Git</code>会暂停<code>rebase</code>过程，给你手动解决冲突的机会。<code>Git</code>解决合并冲突，用和生成提交一样的<a href="https://www.atlassian.com/git/tutorial/git-basics#!status" target="_blank" rel="external"><code>git status</code></a>和<a href="https://www.atlassian.com/git/tutorial/git-basics#!add" target="_blank" rel="external"><code>git add</code></a>命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，<code>Git</code>可以很简单中止整个<code>rebase</code>操作，重来一次（或者让别人来帮助解决）。</p>
<p><br><br><br><br><br></p>
<h3 id="2-1-3-示例"><a href="#2-1-3-示例" class="headerlink" title="2.1.3 示例"></a>2.1.3 示例</h3><p>让我们一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。</p>
<h4 id="有人先初始化好中央仓库"><a href="#有人先初始化好中央仓库" class="headerlink" title="有人先初始化好中央仓库"></a>有人先初始化好中央仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-initialize.png&amp;objectId=1190000002918123&amp;token=87ea7a312eea3ac60744ef5997f686c7" alt=""></p>
<p>第一步，有人在服务器上创建好中央仓库。如果是新项目，你可以初始化一个空仓库；否则你要导入已有的<code>Git</code>或<code>SVN</code>仓库。</p>
<p>中央仓库应该是个裸仓库（<code>bare repository</code>），即没有工作目录（<code>working directory</code>）的仓库。可以用下面的命令创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh user@host</div><div class="line">git init --bare /path/to/repo.git</div></pre></td></tr></table></figure>
<p>确保写上有效的<code>user</code>（<code>SSH</code>的用户名），<code>host</code>（服务器的域名或IP地址），<code>/path/to/repo.git</code>（你想存放仓库的位置）。</p>
<p>注意，为了表示是一个裸仓库，按照约定加上<code>.git</code>扩展名到仓库名上。</p>
<h4 id="所有人克隆中央仓库"><a href="#所有人克隆中央仓库" class="headerlink" title="所有人克隆中央仓库"></a>所有人克隆中央仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-clone.png&amp;objectId=1190000002918123&amp;token=74230960454bff61cc38e28016dde2c4" alt=""></p>
<p>下一步，各个开发者创建整个项目的本地拷贝。通过<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external"><code>git clone</code></a>命令完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone ssh://user@host/path/to/repo.git</div></pre></td></tr></table></figure>
<p>基于你后续会持续和克隆的仓库做交互的假设，克隆仓库时<code>Git</code>会自动添加远程别名<code>origin</code>指回『父』仓库。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小明开发功能"><a href="#小明开发功能" class="headerlink" title="小明开发功能"></a>小明开发功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-1.png&amp;objectId=1190000002918123&amp;token=318dfc4b7192333b4d04457a8dd58de3" alt=""></p>
<p>在小明的本地仓库中，他使用标准的<code>Git</code>过程开发功能：编辑、暂存（<code>Stage</code>）和提交。</p>
<p>如果你不熟悉暂存区（<code>Staging Area</code>），这里说明一下：<strong>暂存区</strong>的用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。</p>
<p>这样你可以创建一个高度聚焦的提交，尽管你本地修改很多内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status # 查看本地仓库的修改状态</div><div class="line">git add # 暂存文件</div><div class="line">git commit # 提交文件</div></pre></td></tr></table></figure>
<p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作。</p>
<p>对需要多个更简单更原子分块的大功能，这个做法是很有用的。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红开发功能"><a href="#小红开发功能" class="headerlink" title="小红开发功能"></a>小红开发功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-2.png&amp;objectId=1190000002918123&amp;token=28e354bf920e3b90fa6894ea290a1a00" alt=""></p>
<p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。和小明一样，她也不关心中央仓库有没有新提交；<br>当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小明发布功能"><a href="#小明发布功能" class="headerlink" title="小明发布功能"></a>小明发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-3.png&amp;objectId=1190000002918123&amp;token=093a21ecc0bdbebb13f61585151f72a7" alt=""></p>
<p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其它团队成员可以看到他的修改。他可以用下面的<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>git push</code>命令</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>注意，<code>origin</code>是在小明克隆仓库时<code>Git</code>创建的远程中央仓库别名。<code>master</code>参数告诉<code>Git</code>推送的分支。<br>由于中央仓库自从小明克隆以来还没有被更新过，所以<code>push</code>操作不会有冲突，成功完成。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="小红试着发布功能"><a href="#小红试着发布功能" class="headerlink" title="小红试着发布功能"></a>小红试着发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-4.png&amp;objectId=1190000002918123&amp;token=ece2216852baad8d0831038362b6e3f9" alt=""></p>
<p>一起来看看在小明发布修改后，小红<code>push</code>修改会怎么样？她使用完全一样的<code>push</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>但她的本地历史已经和中央仓库有分岐了，<code>Git</code>拒绝操作并给出下面很长的出错消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: failed to push some refs to &apos;/path/to/repo.git&apos;</div><div class="line">hint: Updates were rejected because the tip of your current branch is behind</div><div class="line">hint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)</div><div class="line">hint: before pushing again.</div><div class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</div></pre></td></tr></table></figure>
<p>这避免了小红覆写正式的提交。她要先<code>pull</code>小明的更新到她的本地仓库合并上她的本地修改后，再重试。</p>
<p><br><br><br><br><br></p>
<h4 id="小红在小明的提交之上rebase"><a href="#小红在小明的提交之上rebase" class="headerlink" title="小红在小明的提交之上rebase"></a>小红在小明的提交之上<code>rebase</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-5.png&amp;objectId=1190000002918123&amp;token=6430522a0e2cec6438cabb09e09b6354" alt=""></p>
<p>小红用<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull</code></a>合并上游的修改到自己的仓库中。<br>这条命令类似<code>svn update</code>——拉取所有上游提交命令到小红的本地仓库，并尝试和她的本地修改合并：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull --rebase origin master</div></pre></td></tr></table></figure>
<p><code>--rebase</code>选项告诉<code>Git</code>把小红的提交移到同步了中央仓库修改后的<code>master</code>分支的顶部，如下图所示：</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-6.png&amp;objectId=1190000002918123&amp;token=9bd72f11e19f3c1a2c9491dbff73a334" alt=""></p>
<p>如果你忘加了这个选项，<code>pull</code>操作仍然可以完成，但每次<code>pull</code>操作要同步中央仓库中别人修改时，提交历史会以一个多余的<strong>『合并提交』</strong>结尾。</p>
<p>对于集中式工作流，最好是使用<code>rebase</code>而不是生成一个合并提交。</p>
<p><br><br><br><br><br></p>
<h4 id="小红解决合并冲突"><a href="#小红解决合并冲突" class="headerlink" title="小红解决合并冲突"></a>小红解决合并冲突</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-7.png&amp;objectId=1190000002918123&amp;token=85acfc687d7ede96bdf596021e147a2c" alt=""></p>
<p><code>rebase</code>操作过程是把本地提交一次一个地迁移到更新了的中央仓库<code>master</code>分支之上。<br>这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。</p>
<p>这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入<code>Bug</code>的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>
<p>如果小红和小明的功能是相关的，不大可能在<code>rebase</code>过程中有冲突。如果有，<code>Git</code>在合并有冲突的提交处暂停<code>rebase</code>过程，输出下面的信息并带上相关的指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CONFLICT (content): Merge conflict in &lt;some-file&gt;</div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-8.png&amp;objectId=1190000002918123&amp;token=e9fff79b5189565698de39b45d42551d" alt=""></p>
<p><code>Git</code>很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行<a href="https://www.atlassian.com/git/tutorial/git-basics#!status" target="_blank" rel="external"><code>git status</code></a>命令来查看哪里有问题。</p>
<p>冲突文件列在<code>Unmerged paths</code>（未合并路径）一节中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Unmerged paths:</div><div class="line"># (use &quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)</div><div class="line"># (use &quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)</div><div class="line">#</div><div class="line"># both modified: &lt;some-file&gt;</div></pre></td></tr></table></figure>
<p>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让<a href="https://www.atlassian.com/git/tutorial/rewriting-git-history#!rebase" target="_blank" rel="external"><code>git rebase</code></a>完成剩下的事：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add &lt;some-file&gt;</div><div class="line">git rebase --continue</div></pre></td></tr></table></figure>
<p>要做的就这些了。<code>Git</code>会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。</p>
<p>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull --rebase</code></a>命令前的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git rebase --abort</div></pre></td></tr></table></figure>
<p><br><br><br><br><br><br><br></p>
<h4 id="小红成功发布功能"><a href="#小红成功发布功能" class="headerlink" title="小红成功发布功能"></a>小红成功发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-9.png&amp;objectId=1190000002918123&amp;token=9a2d1f5f27647dac4ad8d929832e93f6" alt=""></p>
<p>小红完成和中央仓库的同步后，就能成功发布她的修改了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>如你所见，仅使用几个<code>Git</code>命令我们就可以模拟出传统<code>Subversion</code>开发环境。对于要从<code>SVN</code>迁移过来的团队来说这太好了，但没有发挥出<code>Git</code>分布式本质的优势。</p>
<p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下 <code>功能分支工作流</code> 的收益。<br>通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。</p>
<p><br><br><br><br><br><br></p>
<h2 id="2-2-功能分支工作流"><a href="#2-2-功能分支工作流" class="headerlink" title="2.2 功能分支工作流"></a>2.2 功能分支工作流</h2><p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用<code>Pull Requests</code>的方式讨论变更。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature_branch.png&amp;objectId=1190000002918123&amp;token=13adfff0197f20b88a1b3896610ebfb9" alt=""></p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-1.png&amp;objectId=1190000002918123&amp;token=7b6b5ef4d971842877613c04afd454f6" alt=""></p>
<p>一旦你玩转了<a href="undefined">集中式工作流</a>，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。</p>
<p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在<code>master</code>分支上。<br>这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。<br>另外，也保证了<code>master</code>分支的代码一定不会是有问题的，极大有利于集成环境。</p>
<p>功能开发隔离也让<a href="undefined"><code>pull requests</code>工作流</a>成功可能，<br><code>pull requests</code>工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。<br>另外，如果你在功能开发中有问题卡住了，可以开一个<code>pull requests</code>来向同学们征求建议。</p>
<p>这些做法的重点就是，<code>pull requests</code>让团队成员之间互相评论工作变成非常方便！</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-2-1-工作方式"><a href="#2-2-1-工作方式" class="headerlink" title="2.2.1 工作方式"></a>2.2.1 工作方式</h3><p>功能分支工作流仍然用中央仓库，并且<code>master</code>分支还是代表了正式项目的历史。</p>
<p>但不是直接提交本地历史到各自的本地<code>master</code>分支，开发者每次在开始新功能前先创建一个新分支。</p>
<p>功能分支应该有个有描述性的名字，比如<code>animated-menu-items</code>或<code>issue-#1061</code>，这样可以让分支有个清楚且高聚焦的用途。</p>
<p>在<code>master</code>分支和功能分支之间，<code>Git</code>是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。</p>
<p>另外，功能分支也可以（且应该）<code>push</code>到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。</p>
<p>由于<code>master</code>仅有的一个『特殊』分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-2-2-Pull-Requests"><a href="#2-2-2-Pull-Requests" class="headerlink" title="2.2.2 Pull Requests"></a>2.2.2 <code>Pull Requests</code></h3><p>功能分支除了可以隔离功能的开发，也使得通过<a href="undefined"><code>Pull Requests</code></a>讨论变更成为可能。<br>一旦某个开发完成一个功能，不是立即合并到<code>master</code>，而是<code>push</code>到中央仓库的功能分支上并发起一个<code>Pull Request</code>请求去合并修改到<code>master</code>。</p>
<p>在修改成为主干代码前，这让其它的开发者有机会先去<code>Review</code>变更。</p>
<p><code>Code Review</code>是<code>Pull Requests</code>的一个重要的收益，但<code>Pull Requests</code>目的是讨论代码一个通用方式。<br>你可以把<code>Pull Requests</code>作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行<code>Code Review</code>。</p>
<p>比如，一个开发者开发功能需要帮助时，要做的就是发起一个<code>Pull Request</code>，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。</p>
<p>一旦<code>Pull Request</code>被接受了，发布功能要做的就和集中式工作流就很像了。</p>
<p>首先，确定本地的<code>master</code>分支和上游的<code>master</code>分支是同步的。然后合并功能分支到本地<code>master</code>分支并<code>push</code>已经更新的本地<code>master</code>分支到中央仓库。</p>
<p>仓库管理的产品解决方案像<a href="http://bitbucket.org/" target="_blank" rel="external"><code>Bitbucket</code></a>或<a href="http://www.atlassian.com/stash" target="_blank" rel="external"><code>Stash</code></a>，可以良好地支持<code>Pull Requests</code>。可以看看<code>Stash</code>的<a href="https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash" target="_blank" rel="external"><code>Pull Requests</code>文档</a>。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-2-3-示例"><a href="#2-2-3-示例" class="headerlink" title="2.2.3 示例"></a>2.2.3 示例</h3><p>下面的示例演示了如何把<code>Pull Requests</code>作为<code>Code Review</code>的方式，但注意<code>Pull Requests</code>可以用于很多其它的目的。</p>
<p><br><br><br><br><br></p>
<h4 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-2.png&amp;objectId=1190000002918123&amp;token=5fdc09357dca8116668ea17617ccefde" alt=""></p>
<p>在开始开发功能前，小红需要一个独立的分支。使用下面的命令<a href="https://www.atlassian.com/git/tutorial/git-branches#!checkout" target="_blank" rel="external">新建一个分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b marys-feature master</div></pre></td></tr></table></figure>
<p>这个命令检出一个基于<code>master</code>名为<code>marys-feature</code>的分支，<code>Git</code>的<code>-b</code>选项表示如果分支还不存在则新建分支。</p>
<p>这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status</div><div class="line">git add &lt;some-file&gt;</div><div class="line">git commit</div></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<h4 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-3.png&amp;objectId=1190000002918123&amp;token=4f934833032d75e4930ec888537d22f4" alt=""></p>
<p>早上小红为新功能添加一些提交。<br>去吃午饭前，<code>push</code>功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin marys-feature</div></pre></td></tr></table></figure>
<p>这条命令<code>push</code> <code>marys-feature</code>分支到中央仓库（<code>origin</code>），<code>-u</code>选项设置本地分支去跟踪远程对应的分支。</p>
<p>设置好跟踪的分支后，小红就可以使用<code>git push</code>命令省去指定推送分支的参数。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-4.png&amp;objectId=1190000002918123&amp;token=a3906c9f4d1fbcfc7e8d1e63534702bf" alt=""></p>
<p>小红吃完午饭回来，完成整个功能的开发。<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">在合并到<code>master</code>之前</a>，<br>她发起一个<code>Pull Request</code>让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure>
<p>然后，在她的<code>Git</code> <code>GUI</code>客户端中发起<code>Pull Request</code>，请求合并<code>marys-feature</code>到<code>master</code>，团队成员会自动收到通知。</p>
<p><code>Pull Request</code>很酷的是可以在相关的提交旁边显示评注，所以你可以很对某个变更集提问。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull Request"></a>小黑收到<code>Pull Request</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-5.png&amp;objectId=1190000002918123&amp;token=620d388c72d0f57f55d12dd71e08fd8d" alt=""></p>
<p>小黑收到了<code>Pull Request</code>后会查看<code>marys-feature</code>的修改。决定在合并到正式项目前是否要做些修改，且通过<code>Pull Request</code>和小红来回地讨论。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-6.png&amp;objectId=1190000002918123&amp;token=d79bd474403568ec4f3db346586c2717" alt=""></p>
<p>要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并<code>push</code>更新到中央仓库。小红这些活动都会显示在<code>Pull Request</code>上，小黑可以断续做评注。</p>
<p>如果小黑有需要，也可以把<code>marys-feature</code>分支拉到本地，自己来修改，他加的提交也会一样显示在<code>Pull Request</code>上。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-7.png&amp;objectId=1190000002918123&amp;token=dd10ce3ea0b8e482c76cc46243af07f9" alt=""></p>
<p>一旦小黑可以的接受<code>Pull Request</code>，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div><div class="line">git pull</div><div class="line">git pull origin marys-feature</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>无论谁来做合并，首先要检出<code>master</code>分支并确认是它是最新的。然后执行<code>git pull origin marys-feature</code>合并<code>marys-feature</code>分支到和已经和远程一致的本地<code>master</code>分支。</p>
<p>你可以使用简单<code>git merge marys-feature</code>命令，但前面的命令可以保证总是最新的新功能分支。</p>
<p>无论谁来做合并，首先要检出<code>master</code>分支并确认是它是最新的。然后执行<code>git pull origin marys-feature</code>合并<code>marys-feature</code>分支到和已经和远程一致的本地<code>master</code>分支。<br>你可以使用简单<code>git merge marys-feature</code>命令，但前面的命令可以保证总是最新的新功能分支。<br>最后更新的<code>master</code>分支要重新<code>push</code>回到<code>origin</code>。</p>
<p>这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。但如果你偏爱线性的提交历史，可以在执行合并时<code>rebase</code>新功能到<code>master</code>分支的顶部，这样生成一个快进（<code>fast-forward</code>）的合并。</p>
<p>一些<code>GUI</code>客户端可以只要点一下『接受』按钮执行好上面的命令来自动化<code>Pull Request</code>接受过程。<br>如果你的不能这样，至少在功能合并到<code>master</code>分支后能自动关闭<code>Pull Request</code>。</p>
<h4 id="与此同时，小明在做和小红一样的事"><a href="#与此同时，小明在做和小红一样的事" class="headerlink" title="与此同时，小明在做和小红一样的事"></a>与此同时，小明在做和小红一样的事</h4><p>当小红和小黑在<code>marys-feature</code>上工作并讨论她的<code>Pull Request</code>的时候，小明在自己的功能分支上做完全一样的事。</p>
<p>通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。</p>
<p>到了这里，但愿你发现了<code>功能分支</code>可以很直接地在 <code>集中式工作流</code> 的仅有的<code>master</code>分支上完成多功能的开发。<br>另外，功能分支还使用了<code>Pull Request</code>，使得可以在你的版本控制<code>GUI</code>客户端中讨论某个提交。</p>
<p>功能分支工作流是开发项目异常灵活的方式。问题是，有时候太灵活了。对于大型团队，常常需要给不同分支分配一个更具体的角色。</p>
<p><code>Gitflow</code>工作流是管理功能开发、发布准备和维护的常用模式。</p>
<p><br><br><br><br><br><br></p>
<h2 id="2-3-Gitflow工作流"><a href="#2-3-Gitflow工作流" class="headerlink" title="2.3 Gitflow工作流"></a>2.3 <code>Gitflow</code>工作流</h2><p><code>Gitflow</code>工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-gitflow.png&amp;objectId=1190000002918123&amp;token=ee270ee95a574ec7c0b3161043b94ea0" alt=""></p>
<p>这节介绍的<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external"><code>Gitflow</code>工作流</a>借鉴自在<a href="http://nvie.com/" target="_blank" rel="external">nvie</a>的<em>Vincent Driessen</em>。</p>
<p><code>Gitflow</code>工作流定义了一个围绕<code>项目发布</code>的严格分支模型。虽然比<a href="undefined">功能分支工作流</a>复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>
<p><code>Gitflow</code>工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。</p>
<p>除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。</p>
<p>当然你可以用上功能分支工作流所有的好处：<code>Pull Requests</code>、隔离实验性开发和更高效的协作。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-1-工作方式"><a href="#2-3-1-工作方式" class="headerlink" title="2.3.1 工作方式"></a>2.3.1 工作方式</h3><p><code>Gitflow</code>工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并<code>push</code>分支到要中央仓库中。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-2-历史分支"><a href="#2-3-2-历史分支" class="headerlink" title="2.3.2 历史分支"></a>2.3.2 历史分支</h3><p>相对使用仅有的一个<code>master</code>分支，<code>Gitflow</code>工作流使用2个分支来记录项目的历史。<code>master</code>分支存储了正式发布的历史，而<code>develop</code>分支作为功能的集成分支。</p>
<p>这样也方便<code>master</code>分支上的所有提交分配一个版本号。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-1historical.png&amp;objectId=1190000002918123&amp;token=0f431c7f8666865a1a457fc8b6a09546" alt=""></p>
<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-3-功能分支"><a href="#2-3-3-功能分支" class="headerlink" title="2.3.3 功能分支"></a>2.3.3 功能分支</h3><p>每个新功能位于一个自己的分支，这样可以<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code>到中央仓库以备份和协作</a>。</p>
<p>但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并回<code>develop</code>分支</a>。</p>
<p>每个新功能位于一个自己的分支，这样可以<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code>到中央仓库以备份和协作</a>。<br>但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并回<code>develop</code>分支</a>。<br>新功能提交应该从不直接与<code>master</code>分支交互。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-2feature.png&amp;objectId=1190000002918123&amp;token=f9d5cd653f83e6d43376e02b5c8d4143" alt=""></p>
<p>注意，从各种含义和目的上来看，功能分支加上<code>develop</code>分支就是功能分支工作流的用法。但<code>Gitflow</code>工作流没有在这里止步。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-4-发布分支"><a href="#2-3-4-发布分支" class="headerlink" title="2.3.4 发布分支"></a>2.3.4 发布分支</h3><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-3release.png&amp;objectId=1190000002918123&amp;token=3b4ab43d3ac79525702f4334b5413557" alt=""></p>
<p>一旦<code>develop</code>分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从<code>develop</code>分支上<code>fork</code>一个发布分支。</p>
<p>新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——<br>这个分支只应该做<code>Bug</code>修复、文档生成和其它面向发布任务。</p>
<p>一旦对外发布的工作都完成了，发布分支合并到<code>master</code>分支并分配一个版本号打好<code>Tag</code>。</p>
<p>另外，这些从新建发布分支以来的做的修改要合并回<code>develop</code>分支。</p>
<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。</p>
<p>这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本4.0』，并且在仓库的目录结构中可以实际看到）。</p>
<p>常用的分支约定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">用于新建发布分支的分支: develop</div><div class="line">用于合并的分支: master</div><div class="line">分支命名: release-* 或 release/*</div></pre></td></tr></table></figure>
<h3 id="2-3-5-维护分支"><a href="#2-3-5-维护分支" class="headerlink" title="2.3.5 维护分支"></a>2.3.5 维护分支</h3><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-4maintenance.png&amp;objectId=1190000002918123&amp;token=0e0a4f43571b068d4b141e11b4bff4de" alt=""></p>
<p>维护分支或说是热修复（<code>hotfix</code>）分支用于生成快速给产品发布版本（<code>production releases</code>）打补丁，这是唯一可以直接从<code>master</code>分支<code>fork</code>出来的分支。</p>
<p>修复完成，修改应该马上合并回<code>master</code>分支和<code>develop</code>分支（当前的发布分支），<code>master</code>分支应该用新的版本号打好<code>Tag</code>。</p>
<p>为<code>Bug</code>修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。<br>你可以把维护分支想成是一个直接在<code>master</code>分支上处理的临时发布。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-3-6-示例"><a href="#2-3-6-示例" class="headerlink" title="2.3.6 示例"></a>2.3.6 示例</h3><p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。</p>
<h4 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-5createdev.png&amp;objectId=1190000002918123&amp;token=0d727e83af80cdc3b5061361c8c47141" alt=""></p>
<p>第一步为<code>master</code>分支配套一个<code>develop</code>分支。简单来做可以<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">本地创建一个空的<code>develop</code>分支</a>，<code>push</code>到服务器上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch develop</div><div class="line">git push -u origin develop</div></pre></td></tr></table></figure>
<p>以后这个分支将会包含了项目的全部历史，而<code>master</code>分支将只包含了部分历史。其它开发者这时应该<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external">克隆中央仓库</a>，建好<code>develop</code>分支的跟踪分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone ssh://user@host/path/to/repo.git</div><div class="line">git checkout -b develop origin/develop</div></pre></td></tr></table></figure>
<p>现在每个开发都有了这些历史分支的本地拷贝。</p>
<p><br><br><br></p>
<h4 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-6maryjohnbeginnew.png&amp;objectId=1190000002918123&amp;token=a9c571a2d28cb8b09e250efbb716b5e7" alt=""></p>
<p>这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于<code>master</code>分支，而是应该<a href="https://www.atlassian.com/git/tutorial/git-branches#!checkout" target="_blank" rel="external">基于<code>develop</code>分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b some-feature develop</div></pre></td></tr></table></figure>
<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status</div><div class="line">git add &lt;some-file&gt;</div><div class="line">git commit</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<h4 id="小红完成功能开发-1"><a href="#小红完成功能开发-1" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-7maryfinishes.png&amp;objectId=1190000002918123&amp;token=6334dcdb5bbc763352524ff8ebce1272" alt=""></p>
<p>添加了提交后，小红觉得她的功能OK了。如果团队使用<code>Pull Requests</code>，这时候可以发起一个用于合并到<code>develop</code>分支。<br>否则她可以直接合并到她本地的<code>develop</code>分支后<code>push</code>到中央仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull origin develop</div><div class="line">git checkout develop</div><div class="line">git merge some-feature</div><div class="line">git push</div><div class="line">git branch -d some-feature</div></pre></td></tr></table></figure>
<p>第一条命令在合并功能前确保<code>develop</code>分支是最新的。注意，功能决不应该直接合并到<code>master</code>分支。<br>冲突解决方法和<a href="undefined">集中式工作流</a>一样。</p>
<p><br><br><br><br></p>
<h4 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-8maryprepsrelease.png&amp;objectId=1190000002918123&amp;token=3d2d488b25945d09bb417e489a552894" alt=""></p>
<p>这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。</p>
<p>像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b release-0.1 develop</div></pre></td></tr></table></figure>
<p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p>
<p>只要小红创建这个分支并<code>push</code>到中央仓库，这个发布就是功能冻结的。任何不在<code>develop</code>分支中的新功能都推到下个发布循环中。</p>
<p><br><br><br><br></p>
<h4 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-9maryfinishes.png&amp;objectId=1190000002918123&amp;token=7be55b4e28cefa367a5775ea46b357ca" alt=""></p>
<p>一旦准备好了对外发布，小红合并修改到<code>master</code>分支和<code>develop</code>分支上，删除发布分支。合并回<code>develop</code>分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。<br>另外，如果小红的团队要求<code>Code Review</code>，这是一个发起<code>Pull Request</code>的理想时机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge release-0.1</div><div class="line">git push</div><div class="line">git checkout develop</div><div class="line">git merge release-0.1</div><div class="line">git push</div><div class="line">git branch -d release-0.1</div></pre></td></tr></table></figure>
<p>发布分支是作为功能开发（<code>develop</code>分支）和对外发布（<code>master</code>分支）间的缓冲。只要有合并到<code>master</code>分支，就应该打好<code>Tag</code>以方便跟踪。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git tag -a 0.1 -m &quot;Initial public release&quot; master</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<p><code>Git</code>有提供各种勾子（<code>hook</code>），即仓库有事件发生时触发执行的脚本。<br>可以配置一个勾子，在你<code>push</code>中央仓库的<code>master</code>分支时，自动构建好对外发布。</p>
<p><br><br><br><br></p>
<h4 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现<code>Bug</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-gitflow-enduserbug.png&amp;objectId=1190000002918123&amp;token=09a92134b7303b6506c624e17e7e767b" alt=""></p>
<p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个<code>Ticket</code>抱怨当前版本的一个<code>Bug</code>。<br>为了处理<code>Bug</code>，小红（或小明）从<code>master</code>分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回<code>master</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b issue-#001 master</div><div class="line"># Fix the bug</div><div class="line">git checkout master</div><div class="line">git merge issue-#001</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>就像发布分支，维护分支中新加这些重要修改需要包含到<code>develop</code>分支中，所以小红要执行一个合并操作。然后就可以安全地<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">删除这个分支</a>了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge issue-#001</div><div class="line">git push</div><div class="line">git branch -d issue-#001</div></pre></td></tr></table></figure>
<p>到了这里，但愿你对<a href="undefined">集中式工作流</a>、<a href="undefined">功能分支工作流</a>和<code>Gitflow</code>工作流已经感觉很舒适了。<br>你应该也牢固的掌握了本地仓库的潜能，<code>push</code>/<code>pull</code>模式和<code>Git</code>健壮的分支和合并模型。</p>
<p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用<code>Git</code>不可违逆的条例。<br>所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让<code>Git</code>为你所用。</p>
<p><br><br><br><br><br></p>
<h2 id="2-4-Forking工作流"><a href="#2-4-Forking工作流" class="headerlink" title="2.4 Forking工作流"></a>2.4 <code>Forking</code>工作流</h2><p><code>Forking</code>工作流是分布式工作流，充分利用了<code>Git</code>在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（<code>developer</code>），并能接受不信任贡献者（<code>contributor</code>）的提交。</p>
<p><code>Forking</code>工作流和前面讨论的几种工作流有根本的不同，这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个<code>Git</code>仓库而不是1个：一个本地私有的，另一个服务端公开的。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking.png&amp;objectId=1190000002918123&amp;token=556ec96e04a6af9aa60d8ec1c999ba30" alt=""></p>
<p><code>Forking</code>工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能<code>push</code>代码到仅有的中央仓库中。</p>
<p>开发者<code>push</code>到自己的服务端仓库，而只有项目维护者才能<code>push</code>到正式仓库。</p>
<p>这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。</p>
<p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。</p>
<p>也让这个工作流成为开源项目的理想工作流。</p>
<h3 id="2-4-1-工作方式"><a href="#2-4-1-工作方式" class="headerlink" title="2.4.1 工作方式"></a>2.4.1 工作方式</h3><p>和其它的<code>Git</code>工作流一样，<code>Forking</code>工作流要先有一个公开的正式仓库存储在服务器上。</p>
<p>但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是<code>fork</code>正式项目在服务器上创建一个拷贝。</p>
<p>这个仓库拷贝作为他个人公开仓库 ——<br>其它开发者不允许<code>push</code>到这个仓库，但可以<code>pull</code>到修改（后面我们很快就会看这点很重要）。</p>
<p>在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external"><code>git clone</code>命令</a>克隆仓库到本地机器上，作为私有的开发环境。</p>
<p>要提交本地修改时，<code>push</code>提交到自己公开仓库中 —— 而不是正式仓库中。<br>然后，给正式仓库发起一个<code>pull request</code>，让项目维护者知道有更新已经准备好可以集成了。<br>对于贡献的代码，<code>pull request</code>也可以很方便地作为一个讨论的地方。</p>
<p>为了集成功能到正式代码库，维护者<code>pull</code>贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，</p>
<p><a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并变更到自己本地的<code>master</code>分支</a>，<br>然后<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code></a><code>master</code>分支到服务器的正式仓库中。</p>
<p>到此，贡献的提交成为了项目的一部分，其它的开发者应该执行<code>pull</code>操作与正式仓库同步自己本地仓库。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-4-2-正式仓库"><a href="#2-4-2-正式仓库" class="headerlink" title="2.4.2 正式仓库"></a>2.4.2 正式仓库</h3><p>在<code>Forking</code>工作流中，『官方』仓库的叫法只是一个约定，理解这点很重要。<br>从技术上来看，各个开发者仓库和正式仓库在<code>Git</code>看来没有任何区别。<br>事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。</p>
<p><br><br><br><br><br></p>
<h3 id="2-4-3-Forking工作流的分支使用方式"><a href="#2-4-3-Forking工作流的分支使用方式" class="headerlink" title="2.4.3 Forking工作流的分支使用方式"></a>2.4.3 <code>Forking</code>工作流的分支使用方式</h3><p>所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。<br>各个开发者应该用分支隔离各个功能，就像在<a href="undefined">功能分支工作流</a>和<a href="undefined"><code>Gitflow</code>工作流</a>一样。</p>
<p>唯一的区别是这些分支被共享了。在<code>Forking</code>工作流中这些分支会被<code>pull</code>到另一个开发者的本地仓库中，而在功能分支工作流和<code>Gitflow</code>工作流中是直接被<code>push</code>到正式仓库中。</p>
<p><br><br><br><br><br></p>
<h3 id="2-4-4-示例"><a href="#2-4-4-示例" class="headerlink" title="2.4.4 示例"></a>2.4.4 示例</h3><h4 id="项目维护者初始化正式仓库"><a href="#项目维护者初始化正式仓库" class="headerlink" title="项目维护者初始化正式仓库"></a>项目维护者初始化正式仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-1.png&amp;objectId=1190000002918123&amp;token=c77bc3f94131272bbd62318025782253" alt=""></p>
<p>和任何使用<code>Git</code>项目一样，第一步是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。</p>
<p>通常这个仓库也会作为项目维护者的公开仓库。</p>
<p><a href="https://www.atlassian.com/git/tutorial/git-basics#!init" target="_blank" rel="external">公开仓库应该是裸仓库</a>，不管是不是正式代码库。</p>
<p>所以项目维护者会运行像下面的命令来搭建正式仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh user@host</div><div class="line">git init --bare /path/to/repo.git</div></pre></td></tr></table></figure>
<p><code>Bitbucket</code>和<code>Stash</code>提供了一个方便的<code>GUI</code>客户端以完成上面命令行做的事。<br>这个搭建中央仓库的过程和前面提到的工作流完全一样。<br>如果有现存的代码库，维护者也要<code>push</code>到这个仓库中。</p>
<p><br><br><br><br><br><br></p>
<h4 id="开发者fork正式仓库"><a href="#开发者fork正式仓库" class="headerlink" title="开发者fork正式仓库"></a>开发者<code>fork</code>正式仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-2.png&amp;objectId=1190000002918123&amp;token=eed10ddbe6eb3f0908588591db17d242" alt=""></p>
<p>其它所有的开发需要<code>fork</code>正式仓库。<br>可以用<code>git clone</code>命令<a href="https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git" target="_blank" rel="external">用<code>SSH</code>协议连通到服务器</a>，<br>拷贝仓库到服务器另一个位置 —— 是的，<code>fork</code>操作基本上就只是一个服务端的克隆。<br><code>Bitbucket</code>和<code>Stash</code>上可以点一下按钮就让开发者完成仓库的<code>fork</code>操作。</p>
<p>这一步完成后，每个开发都在服务端有一个自己的仓库。和正式仓库一样，这些仓库应该是裸仓库。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="开发者克隆自己fork出来的仓库"><a href="#开发者克隆自己fork出来的仓库" class="headerlink" title="开发者克隆自己fork出来的仓库"></a>开发者克隆自己<code>fork</code>出来的仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-3.png&amp;objectId=1190000002918123&amp;token=84d8a88dafdd7564a5e0eb6b7bf619fe" alt=""></p>
<p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的<code>git clone</code>命令。</p>
<p>在这个示例中，假定用<code>Bitbucket</code>托管了仓库。记住，如果这样的话各个开发者需要有各自的<code>Bitbucket</code>账号，</p>
<p>使用下面命令克隆服务端自己的仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://user@bitbucket.org/user/repo.git</div></pre></td></tr></table></figure>
<p>相比前面介绍的工作流只用了一个<code>origin</code>远程别名指向中央仓库，<code>Forking</code>工作流需要2个远程别名 ——<br>一个指向正式仓库，另一个指向开发者自己的服务端仓库。别名的名字可以任意命名，常见的约定是使用<code>origin</code>作为远程克隆的仓库的别名<br>（这个别名会在运行<code>git clone</code>自动创建），<code>upstream</code>（上游）作为正式仓库的别名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add upstream https://bitbucket.org/maintainer/repo</div></pre></td></tr></table></figure>
<p>需要自己用上面的命令创建<code>upstream</code>别名。这样可以简单地保持本地仓库和正式仓库的同步更新。<br>注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add upstream https://user@bitbucket.org/maintainer/repo.git</div></pre></td></tr></table></figure>
<p>这时在克隆和<code>pull</code>正式仓库时，需要提供用户的密码。</p>
<h4 id="开发者开发自己的功能"><a href="#开发者开发自己的功能" class="headerlink" title="开发者开发自己的功能"></a>开发者开发自己的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-4.png&amp;objectId=1190000002918123&amp;token=c6966e41d7f459fd41e619b2d8dc7f78" alt=""></p>
<p>在刚克隆的本地仓库中，开发者可以像其它工作流一样的编辑代码、<a href="https://www.atlassian.com/git/tutorial/git-basics#!commit" target="_blank" rel="external">提交修改</a>和<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">新建分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b some-feature</div><div class="line"># Edit some code</div><div class="line">git commit -a -m &quot;Add first draft of some feature&quot;</div></pre></td></tr></table></figure>
<p>所有的修改都是私有的直到<code>push</code>到自己公开仓库中。如果正式项目已经往前走了，可以用<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull</code>命令</a>获得新的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull upstream master</div></pre></td></tr></table></figure>
<p>由于开发者应该都在专门的功能分支上工作，<code>pull</code>操作结果会都是<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">快进合并</a>。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="开发者发布自己的功能"><a href="#开发者发布自己的功能" class="headerlink" title="开发者发布自己的功能"></a>开发者发布自己的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-5.png&amp;objectId=1190000002918123&amp;token=85f5a0317c7e84e0af40e413fb35feb7" alt=""></p>
<p>一旦开发者准备好了分享新功能，需要做二件事。<br>首先，通过<code>push</code>他的贡献代码到自己的公开仓库中，让其它的开发者都可以访问到。<br>他的<code>origin</code>远程别名应该已经有了，所以要做的就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin feature-branch</div></pre></td></tr></table></figure>
<p>这里和之前的工作流的差异是，<code>origin</code>远程别名指向开发者自己的服务端仓库，而不是正式仓库。</p>
<p>第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。<br><code>Bitbucket</code>和<code>Stash</code>提供了<a href="https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash" target="_blank" rel="external"><code>Pull Request</code></a>按钮，弹出表单让你指定哪个分支要合并到正式仓库。<br>一般你会想集成你的功能分支到上游远程仓库的<code>master</code>分支中。</p>
<p><br><br><br><br><br><br><br><br></p>
<h4 id="项目维护者集成开发者的功能"><a href="#项目维护者集成开发者的功能" class="headerlink" title="项目维护者集成开发者的功能"></a>项目维护者集成开发者的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-6.png&amp;objectId=1190000002918123&amp;token=e404227ded2a9af588e5f19b0ce43471" alt=""></p>
<p>当项目维护者收到<code>pull request</code>，他要做的是决定是否集成它到正式代码库中。有二种方式来做：</p>
<ol>
<li>直接在<code>pull request</code>中查看代码</li>
<li><code>pull</code>代码到他自己的本地仓库，再手动合并</li>
</ol>
<p>第一种做法更简单，维护者可以在<code>GUI</code>中查看变更的差异，做评注和执行合并。<br>但如果出现了合并冲突，需要第二种做法来解决。这种情况下，维护者需要从开发者的服务端仓库中<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!fetch" target="_blank" rel="external"><code>fetch</code></a>功能分支，<br>合并到他本地的<code>master</code>分支，解决冲突：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git fetch https://bitbucket.org/user/repo feature-branch</div><div class="line"># 查看变更</div><div class="line">git checkout master</div><div class="line">git merge FETCH_HEAD</div></pre></td></tr></table></figure>
<p>变更集成到本地的<code>master</code>分支后，维护者要<code>push</code>变更到服务器上的正式仓库，这样其它的开发者都能访问到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>注意，维护者的<code>origin</code>是指向他自己公开仓库的，即是项目的正式代码库。到此，开发者的贡献完全集成到了项目中。</p>
<p><br><br><br><br><br><br></p>
<h4 id="开发者和正式仓库做同步"><a href="#开发者和正式仓库做同步" class="headerlink" title="开发者和正式仓库做同步"></a>开发者和正式仓库做同步</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-7.png&amp;objectId=1190000002918123&amp;token=3e4105286ad5d431c50846ffbeb5ff3a" alt=""></p>
<p>由于正式代码库往前走了，其它的开发需要和正式仓库做同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull upstream master</div></pre></td></tr></table></figure>
<p>如果你之前是使用<code>SVN</code>，<code>Forking</code>工作流可能看起来像是一个激进的范式切换（paradigm shift）。<br>但不要害怕，这个工作流实际上就是在<a href="undefined">功能分支工作流</a>之上引入另一个抽象层。<br>不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。</p>
<p>示例中解释了，一个贡献如何从一个开发者流到正式的<code>master</code>分支中，但同样的方法可以把贡献集成到任一个仓库中。</p>
<p>比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。</p>
<p>这使得<code>Forking</code>工作流对于松散组织的团队来说是个非常强大的工具。任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。</p>
<p><br><br><br><br><br><br><br><br></p>
<h2 id="2-5-Pull-Requests"><a href="#2-5-Pull-Requests" class="headerlink" title="2.5 Pull Requests"></a>2.5 <code>Pull Requests</code></h2><p><code>Pull requests</code>是<code>Bitbucket</code>提供的让开发者更方便地进行协作的功能，提供了友好的<code>Web</code>界面可以在提议的修改合并到正式项目之前对修改进行讨论。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-bitbucket.png&amp;objectId=1190000002918123&amp;token=1e5b39390f3e7b7ecd997d85da47350f" alt=""></p>
<p>开发者向团队成员通知功能开发已经完成，<code>Pull Requests</code>是最简单的用法。<br>开发者完成功能开发后，通过<code>Bitbucket</code>账号发起一个<code>Pull Request</code>。<br>这样让涉及这个功能的所有人知道要去做<code>Code Review</code>和合并到<code>master</code>分支。</p>
<p>但是，<code>Pull Request</code>远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。<br>如果变更有任何问题，团队成员反馈在<code>Pull Request</code>中，甚至<code>push</code>新的提交微调功能。<br>所有的这些活动都直接跟踪在<code>Pull Request</code>中。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-overview.png&amp;objectId=1190000002918123&amp;token=a11eee54c054994945f6ca5aa279f566" alt=""></p>
<p>相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。<br><code>SVN</code>和<code>Git</code>都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。<br>这样做会变得杂乱，尤其还要涉及后面的几个提交时。</p>
<p><code>Pull Requests</code>把所有相关功能整合到一个和<code>Bitbucket</code>仓库界面集成的用户友好<code>Web</code>界面中。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-5-1-解析Pull-Request"><a href="#2-5-1-解析Pull-Request" class="headerlink" title="2.5.1 解析Pull Request"></a>2.5.1 解析<code>Pull Request</code></h3><p>当要发起一个<code>Pull Request</code>，你所要做的就是请求（<code>Request</code>）另一个开发者（比如项目的维护者）<br>来<code>pull</code>你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起<code>Pull Request</code>：<br>源仓库、源分支、目的仓库、目的分支。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-anatomy.png&amp;objectId=1190000002918123&amp;token=b19d6cc00e23a573f9092c185e1b2d38" alt=""></p>
<p>这几值多数<code>Bitbucket</code>都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。<br>上图显示了一个<code>Pull Request</code>请求合并一个功能分支到正式的<code>master</code>分支上，但可以有多种不同的<code>Pull Request</code>用法。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-2-工作方式"><a href="#2-5-2-工作方式" class="headerlink" title="2.5.2 工作方式"></a>2.5.2 工作方式</h3><p><code>Pull Request</code>可以和<a href="undefined">功能分支工作流</a>、<a href="undefined"><code>Gitflow</code>工作流</a>或<a href="undefined"><code>Forking</code>工作流</a>一起使用。<br>但一个<code>Pull Request</code>要求要么分支不同要么仓库不同，所以不能用于<a href="undefined">集中式工作流</a>。<br>在不同的工作流中使用<code>Pull Request</code>会有一些不同，但基本的过程是这样的：</p>
<ol>
<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>
<li>开发者<code>push</code>分支修改到公开的<code>Bitbucket</code>仓库中。</li>
<li>开发者通过<code>Bitbucket</code>发起一个<code>Pull Request</code>。</li>
<li>团队的其它成员<code>review</code> <code>code</code>，讨论并修改。</li>
<li>项目维护者合并功能到官方仓库中并关闭<code>Pull Request</code>。</li>
</ol>
<p>本文后面内容说明，<code>Pull Request</code>在不同协作工作流中如何应用。</p>
<p><br><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-3-在功能分支工作流中使用Pull-Request"><a href="#2-5-3-在功能分支工作流中使用Pull-Request" class="headerlink" title="2.5.3 在功能分支工作流中使用Pull Request"></a>2.5.3 在功能分支工作流中使用<code>Pull Request</code></h3><p>功能分支工作流用一个共享的<code>Bitbucket</code>仓库来管理协作，开发者在专门的分支上开发功能。<br>但不是立即合并到<code>master</code>分支上，而是在合并到主代码库之前开发者应该开一个<code>Pull Request</code>发起功能的讨论。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-feature-branch.png&amp;objectId=1190000002918123&amp;token=b870553274db5688d72b65c86d10d152" alt=""></p>
<p>功能分支工作流只有一个公开的仓库，所以<code>Pull Request</code>的目的仓库和源仓库总是同一个。<br>通常开发者会指定他的功能分支作为源分支，<code>master</code>分支作为目的分支。</p>
<p>收到<code>Pull Request</code>后，项目维护者要决定如何做。如果功能没问题，就简单地合并到<code>master</code>分支，关闭<code>Pull Request</code>。</p>
<p>但如果提交的变更有问题，他可以在<code>Pull Request</code>中反馈。之后新加的提交也会评论之后接着显示出来。</p>
<p>在功能还没有完全开发完的时候，也可能发起一个<code>Pull Request</code>。<br>比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的<code>Pull Request</code>。<br>其它的开发者可以在<code>Pull Request</code>提供建议，或者甚至直接添加提交来解决问题。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-4-在Gitflow工作流中使用Pull-Request"><a href="#2-5-4-在Gitflow工作流中使用Pull-Request" class="headerlink" title="2.5.4 在Gitflow工作流中使用Pull Request"></a>2.5.4 在<code>Gitflow</code>工作流中使用<code>Pull Request</code></h3><p><code>Gitflow</code>工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。<br>在<code>Gitflow</code>工作流中使用<code>Pull Request</code>让开发者在发布分支或是维护分支上工作时，<br>可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/gitflow-workflow-pull-request.png&amp;objectId=1190000002918123&amp;token=a7ff02253674d5a5ae3f6aab4efae1fd" alt=""></p>
<p><code>Gitflow</code>工作流中<code>Pull Request</code>的使用过程和上一节中完全一致：<br>当一个功能、发布或是热修复分支需要<code>Review</code>时，开发者简单发起一个<code>Pull Request</code>，<br>团队的其它成员会通过<code>Bitbucket</code>收到通知。</p>
<p>新功能一般合并到<code>develop</code>分支，而发布和热修复则要同时合并到<code>develop</code>分支和<code>master</code>分支上。<br><code>Pull Request</code>可能用做所有合并的正式管理。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-5-在Forking工作流中使用Pull-Request"><a href="#2-5-5-在Forking工作流中使用Pull-Request" class="headerlink" title="2.5.5 在Forking工作流中使用Pull Request"></a>2.5.5 在<code>Forking</code>工作流中使用<code>Pull Request</code></h3><p>在<code>Forking</code>工作流中，开发者<code>push</code>完成的功能到他自己的仓库中，而不是共享仓库。<br>然后，他发起一个<code>Pull Request</code>，让项目维护者知道他的功能已经可以<code>Review</code>了。</p>
<p>在这个工作流，<code>Pull Request</code>的通知功能非常有用，<br>因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-forking-workflow-1.png&amp;objectId=1190000002918123&amp;token=6082dacfd6345659739925c5b7f66658" alt=""></p>
<p>由于各个开发有自己的公开仓库，<code>Pull Request</code>的源仓库和目标仓库不是同一个。<br>源仓库是开发者的公开仓库，源分支是包含了修改的分支。<br>如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是<code>master</code>分支。</p>
<p><code>Pull Request</code>也可以用于正式项目之外的其它开发者之间的协作。<br>比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个<code>Pull Request</code>，<br>用团队成员的<code>Bitbucket</code>仓库作为目标，而不是正式项目的仓库。<br>然后使用相同的功能分支作为源和目标分支。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-forking-workflow-2.png&amp;objectId=1190000002918123&amp;token=cc8bc697b102826f0fb79c078278c41a" alt=""></p>
<p>2个开发者之间可以在<code>Pull Request</code>中讨论和开发功能。<br>完成开发后，他们可以发起另一个<code>Pull Request</code>，请求合并功能到正式的<code>master</code>分支。<br>在<code>Forking</code>工作流中，这样的灵活性让<code>Pull Request</code>成为一个强有力的协作工具。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-5-6-示例"><a href="#2-5-6-示例" class="headerlink" title="2.5.6 示例"></a>2.5.6 示例</h3><p>下面的示例演示了<code>Pull Request</code>如何在在<code>Forking</code>工作流中使用。<br>也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。</p>
<p>在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的<code>Bitbucket</code>仓库，而小明的仓库包含了正式工程。</p>
<p><br><br><br><br><br></p>
<h4 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红<code>fork</code>正式项目</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-1.png&amp;objectId=1190000002918123&amp;token=b7627676e2c7b3a0eb8e5991c4c2b3af" alt=""></p>
<p>小红先要<code>fork</code>小明的<code>Bitbucket</code>仓库，开始项目的开发。她登陆<code>Bitbucket</code>，浏览到小明的仓库页面，<br>点<code>Fork</code>按钮。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-2.png&amp;objectId=1190000002918123&amp;token=53cd207c8a838c38328c00d50807aeae" alt=""></p>
<p>然后为<code>fork</code>出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。</p>
<p><br><br><br><br><br></p>
<h4 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的<code>Bitbucket</code>仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-3.png&amp;objectId=1190000002918123&amp;token=958414de4bfe3716ff3565934e78492f" alt=""></p>
<p>下一步，小红克隆自己刚才<code>fork</code>出来的<code>Bitbucket</code>仓库，以在本机上准备出工作拷贝</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入理解学习Git工作流（git-workflow&quot;&gt;&lt;a href=&quot;#深入理解学习Git工作流（git-workflow&quot; class=&quot;headerlink&quot; title=&quot;深入理解学习Git工作流（git-workflow-&quot;&gt;&lt;/a&gt;&lt;a href=&quot;h
    
    </summary>
    
      <category term="Web" scheme="http://yichewx.com/categories/Web/"/>
    
    
      <category term="Git" scheme="http://yichewx.com/tags/Git/"/>
    
      <category term="Gitflow" scheme="http://yichewx.com/tags/Gitflow/"/>
    
  </entry>
  
  <entry>
    <title>Git使用简明</title>
    <link href="http://yichewx.com/2017/01/21/Git%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E/"/>
    <id>http://yichewx.com/2017/01/21/Git使用简明/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git使用简明"><a href="#Git使用简明" class="headerlink" title="Git使用简明"></a>Git使用简明</h2><p>by wanglinzhizhi</p>
<p><br><br><br><br><br><br></p>
<h1 id="Git的简明教程"><a href="#Git的简明教程" class="headerlink" title="Git的简明教程"></a>Git的简明教程</h1><p>我试着写一下git的简单使用说明,如有错误的地方,欢迎斧正.</p>
<p>:)</p>
<p><br><br></p>
<h2 id="首先-下载并安装git-废话"><a href="#首先-下载并安装git-废话" class="headerlink" title="首先,下载并安装git.(废话)"></a>首先,下载并安装git.(废话)</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="external">git 下载地址</a></p>
<p><br><br><br><br></p>
<h2 id="生成公钥秘钥-并绑定到gogs-代码管理中心上"><a href="#生成公钥秘钥-并绑定到gogs-代码管理中心上" class="headerlink" title="生成公钥秘钥,并绑定到gogs 代码管理中心上."></a>生成公钥秘钥,并绑定到<code>gogs</code> 代码管理中心上.</h2><p>在初次使用git的时候需要做的一件事,之后使用过程中不需要这么做了.</p>
<p><br><br></p>
<p>可以把这个过程认为是一个认证过程.我以我的理解讲解一下.详细的可以参考</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">https://help.github.com/articles/generating-an-ssh-key/</div></pre></td></tr></table></figure>
<p> 简单的说,2个步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. 生成秘钥.公钥</div><div class="line">truessh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line">trueEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</div><div class="line">trueEnter passphrase (empty for no passphrase): [Type a passphrase]</div><div class="line">trueEnter same passphrase again: [Type passphrase again]</div><div class="line"></div><div class="line">2. 绑定到 代码托管中心服务器中 .在个人页面 -&gt; 用户设置 -&gt;管理SSH密钥-&gt; 增加密钥</div><div class="line">   将生成的id_rsa.pub(这个文件所在的目录是C:/users/XXX/.ssh/id_sra.pub) 拷贝到 密钥内容部分.</div><div class="line"></div><div class="line"></div><div class="line">至此,绑定完成.</div></pre></td></tr></table></figure>
<p>在以后的使用中,你的每一次提交,每一次clone,每一次push,每一pull,都是这个账号的, 如果你注册了两个git账号,想push操作的话,可以吗? 如果不修改 <code>.gitconfig</code> 文件中的配置, 很有可能因权限问题报错. 在使用中,这一点常常被我们所忽略.</p>
<p><br><br></p>
<p>这是一个服务器log的截图</p>
<p><img src="/images/git/e.png" alt="服务器日志文件截图"></p>
<p><br><br></p>
<h2 id="建立远端仓库和本地仓库的关联-并将本地仓库同步到远端"><a href="#建立远端仓库和本地仓库的关联-并将本地仓库同步到远端" class="headerlink" title="建立远端仓库和本地仓库的关联,并将本地仓库同步到远端."></a>建立远端仓库和本地仓库的关联,并将本地仓库同步到远端.</h2><p>git是一个分布式的系统. 在<code>远端</code>(咱们用的也就是那个测试服务器上)和<code>本地端</code>都有仓库(所谓仓库,也就是你的项目存放的地方). 我们怎么把自己的代码提交到远端的服务器上呢.</p>
<p><br><br><br></p>
<p>主要命令有以下四条.</p>
<p><strong>首先</strong>,我们通过浏览器在服务器上建立一个仓库.(<strong>最好不要把readme勾选</strong> ). 在你想放该文件的文件夹下面,右键-&gt;打开git bash.  执行以下命令</p>
<p>标准做法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://172.20.17.20:3001/wanglinzhizhi/XXXX.git</div></pre></td></tr></table></figure>
<p>就是<strong>建立关联的过程</strong> .</p>
<p><br><br></p>
<p><strong>然后</strong>,当你写好代码(文档,更新内容)后,为说明方面,我们假设完成的文件叫<code>index.html</code>, 放到这个仓库(文件夹下面) , 然后执行命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add index.html</div></pre></td></tr></table></figure>
<p><strong>再然后</strong> , 执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git commit -m &apos;这是我的一次测试性的更新说明,我更新了index.html文件.对结构进行了优化.&apos;</div></pre></td></tr></table></figure>
<p><strong>Notes</strong>: 执行完<code>git add XX</code> 和 <code>git commit &#39;blablabla&#39;</code> 之后 至此本地仓库的commit以及版本已经建立完成. 下一步,我们是将本地的仓库 push到服务器中.让代码保存在服务器中.</p>
<p><strong>最后</strong>  ,依然在<code>git bash</code>中执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure>
<p>然后输入你的gogs的邮箱和密码. 直到显示 <code>...done</code> 表示提交完成. 至此,我们完成了将本地仓库push到远端仓库. 可以再浏览器中再次打开你刚才<code>创建</code> ,并且<code>clone</code> ,并且<code>push</code>的仓库了.</p>
<p>:)</p>
<p><strong>Notes</strong>　： 在使用中非常重要也非常基本的一个命令是, <code>git status</code> .通过这个命令, 我们可以知道当前的状况.在什么情况下使用呢?  恩, 在不知道当前什么状况的情况下使用.</p>
<p>还有一个比较常用的命令, <code>git XXX -h</code>  .  这里的XXX(比如 push, pull,log 等)git命令,  在不知道git XXX命</p>
<p>令怎么使用的时候, 可以 直接在后面加一个<code>-h</code> ,显示出帮助文件. 像这样(<code>git push -h</code>,  <code>git pull -h</code>)</p>
<p>个人感觉,这几天的使用经验来说,git是一个很友好的工具, 因为在你输入错误 的情况下,它能够很智能的提示.</p>
<p><br><br></p>
<p>总结一下,</p>
<p>远端和本地端的绑定需执行一行代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://172.20.17.20:3001/wanglinzhizhi/XXXX.git</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p>每次git 提交到服务器有三个步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add (你想add的文件.)</div><div class="line">git commit -m &apos;xxxx&apos;</div><div class="line">git push</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p><strong>NOTES:</strong></p>
<p>另一种不是标准做法的方法,<code>clone</code> 这是一种比较偷懒的方法, 严格意义上说是错误的,因为仅仅对于那些你是<code>master</code> 权限的人才可以这样操作. 因为这么clone之后(或者直接pull) 弄了之后,就建立了关联.</p>
<p><strong>Note: 注意git操作时对应的文件夹(血泪教训(T_T)</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="一个接近实际中的项目上传实例"><a href="#一个接近实际中的项目上传实例" class="headerlink" title="一个接近实际中的项目上传实例"></a>一个接近实际中的项目上传实例</h2><p><br><br></p>
<p>我本地有个t6multivan_m(1)M的项目. 我现在要将其传到远端git服务器怎么做呢? 这里是真是用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin XXX</div><div class="line">git push -u origin master(Mac)</div><div class="line"></div><div class="line">  git push --set-upstream origin master(windows)</div></pre></td></tr></table></figure>
<p>的地方.</p>
<p>具体如下:</p>
<p>首先进入到对应项目文件夹 ,然后空白处右键鼠标-&gt;git bash</p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p><br><br></p>
<p>我们在本地仓库中先提交项目.操作过程是上面的提交过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// git status</div><div class="line">git add -A</div><div class="line"></div><div class="line">//git status</div><div class="line">git commit -m &apos;这是一个接近真实环境的项目上传操作&apos;</div></pre></td></tr></table></figure>
<p>到这里,本地的仓库已经完成,现在我们将其push到远端服务器上的仓库中.</p>
<ol>
<li><p>为了上传到远端的服务器中,我需要先用浏览器,在远端仓库中创建一个仓库.(<strong>建议写成同名的</strong>)</p>
<p>然后将远端的仓库和本地的仓库关联起来.</p>
<p>在本地git bash中执行以下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://192.168.15.75:3141/wanglinzhizhi/t6multivanM.git</div></pre></td></tr></table></figure>
<p>这条命令使本地端和远端建立关联.</p>
</li>
<li><p>最后一步,</p>
<p>Mac上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>Windows上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push --set-upstream origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<p><br><br><br><br></p>
<p>步骤截图如下:</p>
<ul>
<li><img src="/images/git/a.png" alt="init and add -A"></li>
</ul>
<ul>
<li><img src="/images/git/b.png" alt="commit"></li>
<li><img src="/images/git/c.png" alt="commit"></li>
</ul>
<ul>
<li><img src="/images/git/d.png" alt="remote add origin push"></li>
</ul>
<p>当第一次建立了仓库之后,以后每次使用的时候最常用的两个命令<code>git pull</code> , <code>git push</code> .</p>
<p>我们还会经常使用到的一个命令 <code>git log</code>  或者 <code>git log --graph</code>. 执行这个命令可以帮助我们查看 历史提交记录.</p>
<p><br><br></p>
<p>我觉得一些良好的习惯对于项目管理是有作用的.</p>
<ul>
<li>每天临走之前,git push 一下今天的代码, 第二天来了继续工作之前,git pull 一下,把远端的最新的代码, 同步到本地.</li>
<li>每次完成 了重大的部分或者一个单独的单元的时候, git push 一下.</li>
</ul>
<p>需要注意的是,始终保持远端的仓库是最新的就可以了.  上述的几个命令已经够我们玩转单击版的Git了. 下一节我们将讲解branch 和 merge操作.</p>
<p>另一个比较好的习惯是 **建立一个Git 仓库(Git-repos). 所有的项目都放在这里仓库下面.每个项目只需要一个文件夹,不再需要建立N个zip压缩包,等我们push到服务器之后,谁想下压缩包自己去服务器上去取就够了.</p>
<p><br><br><br><br></p>
<h2 id="Caching-your-GitHub-password-in-Git"><a href="#Caching-your-GitHub-password-in-Git" class="headerlink" title="Caching your GitHub password in Git"></a><a href="https://help.github.com/articles/caching-your-github-password-in-git/#platform-all" target="_blank" rel="external">Caching your GitHub password in Git</a></h2><p>If you’re <a href="https://help.github.com/articles/which-remote-url-should-i-use" target="_blank" rel="external">cloning GitHub repositories using HTTPS</a>, you can use a <em>credential helper</em> to tell Git to remember your GitHub username and password every time it talks to GitHub.</p>
<p>If you clone GitHub repositories using SSH, then you authenticate using SSH keys instead of a username and password. For help setting up an SSH connection, see <a href="https://help.github.com/articles/generating-an-ssh-key" target="_blank" rel="external">Generating an SSH Key</a>.</p>
<p><strong>Tip:</strong> You need Git <strong>1.7.10</strong> or newer to use the credential helper.</p>
<p>The credential helper is included with GitHub Desktop. The app also provides a Git shell so you won’t ever need to install and configure Git manually. For more information, see “<a href="https://help.github.com/desktop/guides/getting-started/" target="_blank" rel="external">Getting Started with GitHub Desktop</a>.”</p>
<p>If you prefer working with the command line, you can also install a native Git shell, such as <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a>. With Git for Windows, running the following in the command line will store your credentials:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global credential.helper wincred</div></pre></td></tr></table></figure>
<p>这是从GitHub 上粘过来的 一段 . 作用是 自动保存密码,不用每次push的时候都输入一遍账号密码,神烦.只需要 在git bash中输入 上面的一行代码, 然后再 输入一次账号密码,以后就再也不需要输入了.(^_ ^)</p>
<p><br><br></p>
<p><br><br><br><br></p>
<p>参考资料:</p>
<p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">起步 - 初次运行 Git 前的配置</a></p>
<p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93" target="_blank" rel="external">git 官方中文版文档</a></p>
<p><a href="https://git-scm.com/book/zh/v1/" target="_blank" rel="external">git pro 中文版</a></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p>银河系,晚安 :)</p>
<p><br><br><br><br><br><br><br></p>
<p>update 2016.09.18</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p> 有两种简单方法的git使用方法,比较推荐,虽然确实有很多git客户端,但是比较推崇的,个人觉得vscode ,和github for desktop 客户端. 因为颜值高.如下图:</p>
<p><strong>vs code</strong></p>
<p><img src="/images/git/vsc.png" alt=""></p>
<p><strong>github</strong></p>
<p><em>**</em><img src="/images/git/github.png" alt=""></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="branch-and-merge-分支与合并操作"><a href="#branch-and-merge-分支与合并操作" class="headerlink" title="- branch and merge (分支与合并操作)"></a>- branch and merge (分支与合并操作)</h2><p><strong>branch 顾名思义就是 建立分支的意思.</strong></p>
<p><br><br></p>
<p>在使用branch的功能的时候,我们主要会用到的命令有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<p><code>git branch</code> 命令的功能是将分支的名字以列表的形式显示出来.同时可以确定当前所在的分支(* 号表示我们现在所在的分支) .</p>
<p><br></p>
<p>下面2条命令如下: 作用是在当前的基础上,创建一个新的分支.并把分支命名为AnewBranchDemo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch AnewBranchDemo</div><div class="line">git checkout AnewBranchDemo</div></pre></td></tr></table></figure>
<p>第一句的意思是创建<code>AnewBranchDemo</code> 这个分支,第二句的 意思是 是当前分支为 <code>AnewBranchDemo</code> 这个分支上.(由此我们可以知道,如果我们想切换回<code>master</code> 分支,我们需要做的就是执行<code>git checkout master</code> 即可.)</p>
<p><br><br></p>
<p>这两条命令可以简化为1条命令,如下.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b AnewBranchDemo</div></pre></td></tr></table></figure>
<p>但是个人建议最开始使用的时候还是用上面2条命令比较好. 语义上更加容易理解.</p>
<p><br><br><br></p>
<p><strong>分支是一种很好的东西.</strong> 当我们在实现某个功能的时候, 我们需要大面积修改源代码.但是有不想破坏已经修改好的 部分,,如果这里的修改改坏了,改动得太多,连自己都忘了那些地方改了的,那些没改,想回溯就将是已将痛苦不堪的事情了…….</p>
<p><br><br></p>
<p>当然 有一种原始的做法是备份一个文件夹放在旁边我们就把备份的文件夹覆盖该坏掉的文件. 这是可以的. 只是麻烦.</p>
<p><br><br></p>
<p>我们运用分支的 话,那么我们只需<code>git branch feature-Test</code> . 然后放心的在<code>feature-Test</code> 做实验,如果这里的实验成功了,我们<code>merge</code>回到<code>master</code> 中即可. 如果另一种情况,我们改的太多,连自己都不知道那些改了哪些没改的话, 我们可以干脆的放弃掉这个分支. 重新给予<code>master</code> 创建分支 <code>git branch feature-TestB</code> . 干净利落.</p>
<p><br><br></p>
<p>:)</p>
<p><br><br><br></p>
<p><strong>branch 顾名思义就是 建立分支的作用</strong>   ,<strong>相对分支的是 merge , 合并的作用</strong></p>
<p><br><br></p>
<p>主干分支 , <code>master</code> 使我们分支<code>branch</code>的起点, 也是我们 合并分支的终点.</p>
<p><br><br></p>
<p>主干分支一般是作为正式版存在的,我们所有的修改,所有的测试都是在分支上进行,直到我们确定 分支上没有问题之后,我们再将其合并到主干分支上.</p>
<p><br><br></p>
<h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1><p>合并操作中,我们主要用到的命令如下:</p>
<p><br><br><br><br></p>
<p><strong>首先</strong>,  我们要确定我们要把谁合并到谁上. 假设我们完成了feature-Test 的功能. 我们希望把feature-Test合并到 master中. 那么我们首先需要切换到master上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div></pre></td></tr></table></figure>
<p><strong>然后</strong> 合并<code>featrue-Test</code>分支 执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git merge --no-ff featrue-Test</div></pre></td></tr></table></figure>
<p>Notes: <strong>–no-ff 参数的目的是为了在历史记录中明确的记录下本次合并</strong>.</p>
<p><br><br></p>
<p><strong>done.</strong></p>
<p>创建分支,并且 合并分支就完成了.</p>
<p><br><br></p>
<p>总结一下分支和合并过程.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//创建分支</div><div class="line">git branch feature-Test // 创建新的分支feature-Test</div><div class="line">git checkout feature-Test //从master上切换到 feature-Test</div><div class="line"></div><div class="line">//合并分支</div><div class="line">git checkout master //切换到主干分支</div><div class="line">git merge --no-ff featrure-true // 合并到主分支.</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<p>现在你可以去看看master中是不是多了你刚才写在feature-Test的那段代码.(废话…)</p>
<p><br><br></p>
<p>在这个过程中,我们可以有事儿没事儿像之前使用<code>git status</code> 一样,多多使用<code>git branch</code> 和 <code>git log --graph</code> .  当提交的次数多了,会非常壮观.</p>
<p><br></p>
<p>:)</p>
<p><br><br><br><br></p>
<p>最后,别忘了合并会主干之后,<code>git push</code>到远端 服务器. 用一种拉风的说法,这叫 <code>云备胎(备份)</code> .</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">至此,到了这一步,</div><div class="line">如果想把版本弄错,或者想改错版本, 提交错版本 将是一件非常困难并且复杂的事情.</div><div class="line"></div><div class="line">:)</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<p> <strong>代码管理中,如果发生了错误的commit ,或者错误的merge 怎么办呢?</strong></p>
<p>答: <strong>回滚</strong></p>
<p>我们使用命令<code>git log</code> 或者<code>git log --graph</code>的时候,会看到</p>
<p>commit 后面的一大串字符串. 其实这串字符串是git为我们生成的版本号.</p>
<p>我们的每一次commit , git 都会为我们创建一个新的版本. 所以每一次commit之后都会有一个对应的长长的一大串字符串. 如下图</p>
<p><img src="/images/git/f.png" alt=""></p>
<p>对于错误的commit 我们需要做的就是<strong>回滚</strong>到对应的<strong>上一个正确的版本</strong></p>
<p>需执行的代码.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard c23efd0806f0a117122fdc118f43f6a33905895e</div></pre></td></tr></table></figure>
<p>执行上述 reset 回滚操作,我们就回到了对应的版本的代码.</p>
<p>一键还原.</p>
<p><br><br><br></p>
<p>问题来了,那么对于,merge操作导致 的错误呢? 一样的,也是使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard XXXXcommit对应的版本号XXX</div></pre></td></tr></table></figure>
<p>git其实还有一些非常常用的功能,</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<p>等</p>
<p>另外一方面,我这里主要在讲解git命令行的使用, 我这里没有提到或者很少提到浏览器中打开的效果.其实浏览器中的效果是十分惊艳的. 截图如下.</p>
<p><img src="/images/git/g.png" alt=""></p>
<p><br><br><br><br></p>
<p><img src="/images/git/h.png" alt=""></p>
<p><img src="/images/git/j.png" alt=""></p>
<p>这是可视化的git diff 绿色是新添加的代码, 红色是删除的代码。</p>
<p><br><br><br><br></p>
<p><img src="/images/git/k.png" alt=""></p>
<p><img src="/images/git/l.png" alt=""></p>
<p>待发行的版本, 需要看的话,可以直接从这里下载源码.</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="团队合作的git操作-GitFlow"><a href="#团队合作的git操作-GitFlow" class="headerlink" title="- 团队合作的git操作 GitFlow"></a>- 团队合作的git操作 GitFlow</h2><h3 id="gt"><a href="#gt" class="headerlink" title="&gt;_"></a>&gt;_</h3><h3 id="详见GitFlow-工作流"><a href="#详见GitFlow-工作流" class="headerlink" title="详见GitFlow 工作流"></a>详见GitFlow 工作流</h3><p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h1><p><strong>done</strong></p>
<p><br><br></p>
<ul>
<li>开启了登录验证</li>
<li>开启了Notification</li>
<li>开启TSL加密</li>
</ul>
<p>:)</p>
<p><br><br></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="nginx-反代"><a href="#nginx-反代" class="headerlink" title="nginx 反代"></a>nginx 反代</h1><p><strong>building…..</strong></p>
<p>我懒,不想弄^_ ^</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p>晚安 银河系</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git使用简明&quot;&gt;&lt;a href=&quot;#Git使用简明&quot; class=&quot;headerlink&quot; title=&quot;Git使用简明&quot;&gt;&lt;/a&gt;Git使用简明&lt;/h2&gt;&lt;p&gt;by wanglinzhizhi&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/
    
    </summary>
    
      <category term="Web" scheme="http://yichewx.com/categories/Web/"/>
    
    
      <category term="Git" scheme="http://yichewx.com/tags/Git/"/>
    
      <category term="Gitflow" scheme="http://yichewx.com/tags/Gitflow/"/>
    
      <category term="wanglinzhizhi" scheme="http://yichewx.com/tags/wanglinzhizhi/"/>
    
  </entry>
  
  <entry>
    <title>Google Material UI 动画的贝叶斯曲线</title>
    <link href="http://yichewx.com/2017/01/21/Google%20Material%20UI%20%E5%8A%A8%E7%94%BB%E7%9A%84%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%9B%B2%E7%BA%BF/"/>
    <id>http://yichewx.com/2017/01/21/Google Material UI 动画的贝叶斯曲线/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-Material-UI-动画的贝叶斯曲线"><a href="#Google-Material-UI-动画的贝叶斯曲线" class="headerlink" title="Google Material UI 动画的贝叶斯曲线"></a>Google Material UI 动画的贝叶斯曲线</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>: <span class="selector-class">.2s</span> <span class="selector-tag">XXX</span>  <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.4</span>,0,<span class="selector-class">.2</span>,1);</div></pre></td></tr></table></figure>
<p>XXX是自定义的 动画.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-Material-UI-动画的贝叶斯曲线&quot;&gt;&lt;a href=&quot;#Google-Material-UI-动画的贝叶斯曲线&quot; class=&quot;headerlink&quot; title=&quot;Google Material UI 动画的贝叶斯曲线&quot;&gt;&lt;/a&gt;Googl
    
    </summary>
    
      <category term="CSS" scheme="http://yichewx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yichewx.com/tags/CSS/"/>
    
      <category term="贝叶斯运动曲线" scheme="http://yichewx.com/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>HACK 主站的样式</title>
    <link href="http://yichewx.com/2017/01/21/hack%E4%B8%BB%E7%AB%99%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yichewx.com/2017/01/21/hack主站样式/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HACK-主站的样式"><a href="#HACK-主站的样式" class="headerlink" title="HACK 主站的样式"></a>HACK 主站的样式</h2><p>主站的样式,由于和我们使用的单位制不同, 所以在使用rem标准的 时候,会出现问题. 需要hack<code>主站的头尾</code>的样式.</p>
<h2 id="headerNew"><a href="#headerNew" class="headerlink" title="headerNew"></a>headerNew</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--头尾样式--&gt;</span></div><div class="line"><span class="comment">&lt;!--#include file="/ushtml/0000/myiche2016_cube_headerandfooter-1188.shtml"--&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--页头通用文件开始 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m_header"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- header start --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"op-nav"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://m.yiche.com"</span> <span class="attr">class</span>=<span class="string">"btn-return"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tt-name"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://m.yiche.com/"</span> <span class="attr">class</span>=<span class="string">"yiche-logo"</span>&gt;</span>汽车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>专题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">          	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="comment">&lt;!--#include file="/include/pd/2016/wap/00001/201607_wap_common_ejdht_Manual.shtml"--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"op-nav-mark"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- header end --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--页头通用文件结束 --&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--页尾文件开始 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"m_footer"</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!-- 新页底开始 --&gt;</span></div><div class="line">  		<span class="comment">&lt;!-- footer start --&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer15"</span>&gt;</span></div><div class="line">  			<span class="comment">&lt;!--搜索框--&gt;</span></div><div class="line">  			<span class="comment">&lt;!--#include file="/ushtml/block/so/mobile/MobileSugBottom_chexing_noBom.shtml"--&gt;</span></div><div class="line">  			<span class="comment">&lt;!--页底内容--&gt;</span></div><div class="line">  			<span class="comment">&lt;!--#include file="/include/pd/2016/wap/00001/201607_wap_common_footer_Manual.shtml"--&gt;</span></div><div class="line">  		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  		<span class="comment">&lt;!-- footer end --&gt;</span></div><div class="line">  		<span class="comment">&lt;!-- 新页底结束 --&gt;</span></div><div class="line">  		<span class="comment">&lt;!--#include file="/zhuanti/adtopic/include/201511_m.shtml"--&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!--页尾文件结束 --&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">/*HACK header new*/</div><div class="line"></div><div class="line">div#m_footer &#123;</div><div class="line">    font-size: 14px  !important</div><div class="line">    line-height: initial  !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.menu-pop-n .yiche-login, .menu-pop-n .yiche-logout&#123;</div><div class="line">    font-size: 14px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav&#123;</div><div class="line">  font-size:  16px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav .btn-menu-p&#123;</div><div class="line">      font-size: 16px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav .tt-name&#123;</div><div class="line">  font-size: 17px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav .tt-name h1&#123;</div><div class="line">  height: 44px !important;</div><div class="line">  line-height: 44px !important;</div><div class="line">  font-size:15px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.menu-nav-n a&#123;</div><div class="line">  font-size: 16px !important;</div><div class="line">truetext-decoration: none !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav .btn-menu-p&#123;</div><div class="line">truetext-decoration: none !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.op-nav .btn-menu-p span&#123;</div><div class="line">    font-size: 14px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.footer15 .opt-change&#123;</div><div class="line">    font-size: 14px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.footer15 .foot-contact&#123;</div><div class="line">  font-size: 12px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.footer15 .foot-copyright&#123;</div><div class="line">  font-size: 12px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.footer15 .foot-contact a&#123;</div><div class="line">  font-size: 14px !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.m-s-box input[type=&quot;text&quot;], .m-s-box input[type=&quot;search&quot;]&#123;</div><div class="line">  font-size: 15px !important;</div><div class="line">  -webkit-appearance: none !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#app_download&#123;display: none;&#125;</div></pre></td></tr></table></figure>
<p>Tips: 这么写了之后,最好还是放到的测试的那个地址上试一下. 看看有没有什么问题.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HACK-主站的样式&quot;&gt;&lt;a href=&quot;#HACK-主站的样式&quot; class=&quot;headerlink&quot; title=&quot;HACK 主站的样式&quot;&gt;&lt;/a&gt;HACK 主站的样式&lt;/h2&gt;&lt;p&gt;主站的样式,由于和我们使用的单位制不同, 所以在使用rem标准的 时候,会出
    
    </summary>
    
      <category term="Web" scheme="http://yichewx.com/categories/Web/"/>
    
    
      <category term="HTML" scheme="http://yichewx.com/tags/HTML/"/>
    
      <category term="HACK" scheme="http://yichewx.com/tags/HACK/"/>
    
  </entry>
  
  <entry>
    <title>hello World</title>
    <link href="http://yichewx.com/2017/01/21/hello-world/"/>
    <id>http://yichewx.com/2017/01/21/hello-world/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
      <category term="Helloworld" scheme="http://yichewx.com/tags/Helloworld/"/>
    
  </entry>
  
  <entry>
    <title>http-server 使用简明</title>
    <link href="http://yichewx.com/2017/01/21/http-server%20%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E/"/>
    <id>http://yichewx.com/2017/01/21/http-server 使用简明/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http-server-使用简明"><a href="#http-server-使用简明" class="headerlink" title="http-server 使用简明"></a>http-server 使用简明</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm i http-server -g</div></pre></td></tr></table></figure>
<p>http-server服务器只能解析以<code>.html</code>后缀的文件. 不能处理shtml的文件,这点请注意.</p>
<p><br><br><br><br></p>
<p>最简单的做法是直接在 <code>git bash</code>里面输入下面的这行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http-server</div></pre></td></tr></table></figure>
<p>这样就启动了一个服务器,可以方便的 在手机上调试了.</p>
<p><br><br><br><br></p>
<h2 id="稍微复杂一点的操作"><a href="#稍微复杂一点的操作" class="headerlink" title="稍微复杂一点的操作"></a>稍微复杂一点的操作</h2><p>嗯..有时候需要启动多个服务器,那么就需要修改一下参数.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http-server -a 172.20.XXXX.XXX -pYYYY</div></pre></td></tr></table></figure>
<p>xxxx,和YYYY分别代表数字.-p YYYY最四位已经以上</p>
<p>172.20.xxx.xxxx 是本机的IP地址. 查询方法:</p>
<p><br><br><br><br></p>
<h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ipconfig</div></pre></td></tr></table></figure>
<p>Done</p>
<p>:)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;http-server-使用简明&quot;&gt;&lt;a href=&quot;#http-server-使用简明&quot; class=&quot;headerlink&quot; title=&quot;http-server 使用简明&quot;&gt;&lt;/a&gt;http-server 使用简明&lt;/h2&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure
    
    </summary>
    
      <category term="Web前端" scheme="http://yichewx.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://yichewx.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="http-server" scheme="http://yichewx.com/tags/http-server/"/>
    
  </entry>
  
  <entry>
    <title>ie8的 奇怪的地方</title>
    <link href="http://yichewx.com/2017/01/21/ie8%E7%9A%84%20%E5%A5%87%E6%80%AA%E7%9A%84%E5%9C%B0%E6%96%B9./"/>
    <id>http://yichewx.com/2017/01/21/ie8的 奇怪的地方./</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ie8的-奇怪的地方"><a href="#ie8的-奇怪的地方" class="headerlink" title="ie8的 奇怪的地方"></a>ie8的 奇怪的地方</h2><ul>
<li>你对其元素设置z-index值,他会按照其父元素的位置确定而不是他本身的位置. <strong>人家拼的是爹.</strong></li>
</ul>
<p>  ​</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ie8的-奇怪的地方&quot;&gt;&lt;a href=&quot;#ie8的-奇怪的地方&quot; class=&quot;headerlink&quot; title=&quot;ie8的 奇怪的地方&quot;&gt;&lt;/a&gt;ie8的 奇怪的地方&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;你对其元素设置z-index值,他会按照其父元素的位置确定而不是
    
    </summary>
    
      <category term="Web前端" scheme="http://yichewx.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://yichewx.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IE8" scheme="http://yichewx.com/tags/IE8/"/>
    
  </entry>
  
  <entry>
    <title>IE浏览器的检验</title>
    <link href="http://yichewx.com/2017/01/21/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%A3%80%E9%AA%8C/"/>
    <id>http://yichewx.com/2017/01/21/IE浏览器的检验/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IE浏览器的检验"><a href="#IE浏览器的检验" class="headerlink" title="IE浏览器的检验"></a>IE浏览器的检验</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">          $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">          <span class="keyword">var</span> isIE78910=<span class="regexp">/mise/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line">          <span class="keyword">var</span> isIE11=<span class="regexp">/trident/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line">          <span class="keyword">var</span> isIE=(isIE78910 || isIE11);</div><div class="line">  </div><div class="line">          <span class="keyword">if</span>(isIE)&#123;</div><div class="line">             <span class="comment">//todo</span></div><div class="line">          &#125;</div><div class="line">          &#125;)();</div><div class="line">      <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="IE8-以及以下的版本检测"><a href="#IE8-以及以下的版本检测" class="headerlink" title="IE8 以及以下的版本检测"></a>IE8 以及以下的版本检测</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> islowIE8=<span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> isIE=<span class="regexp">/mise/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line"><span class="keyword">if</span> (isIE) &#123;</div><div class="line">true<span class="keyword">var</span> ieVersion=<span class="regexp">/msie ([\d.]+)/</span>.navigator.userAgent.toLowerCase();</div><div class="line">trueieVersion = <span class="built_in">parseInt</span>(ieVersion);</div><div class="line">trueislowIE8= (ieVersion&gt;<span class="number">8</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (islowIE8)&#123; 	<span class="comment">//&lt;=ie8的情况</span></div><div class="line">true<span class="comment">//todo..</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;		 	<span class="comment">//其他情况</span></div><div class="line">true<span class="comment">//todo..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IE浏览器的检验&quot;&gt;&lt;a href=&quot;#IE浏览器的检验&quot; class=&quot;headerlink&quot; title=&quot;IE浏览器的检验&quot;&gt;&lt;/a&gt;IE浏览器的检验&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yichewx.com/tags/web/"/>
    
      <category term="浏览器" scheme="http://yichewx.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="IE" scheme="http://yichewx.com/tags/IE/"/>
    
      <category term="正则" scheme="http://yichewx.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title> PC 修改表单的highlight </title>
    <link href="http://yichewx.com/2017/01/21/input%20%E8%A1%A8%E5%8D%95%E7%9B%B8%E5%85%B3/"/>
    <id>http://yichewx.com/2017/01/21/input 表单相关/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PC-修改表单的highlight"><a href="#PC-修改表单的highlight" class="headerlink" title="PC 修改表单的highlight"></a>PC 修改表单的highlight</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid;</div><div class="line">    <span class="attribute">outline</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.input-add</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.input-add</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3F51B5</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-class">.input-add</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">outline</span><span class="selector-pseudo">:none</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PC-修改表单的highlight&quot;&gt;&lt;a href=&quot;#PC-修改表单的highlight&quot; class=&quot;headerlink&quot; title=&quot;PC 修改表单的highlight&quot;&gt;&lt;/a&gt;PC 修改表单的highlight&lt;/h2&gt;&lt;figure class
    
    </summary>
    
      <category term="web" scheme="http://yichewx.com/categories/web/"/>
    
    
      <category term="CSS" scheme="http://yichewx.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础算法</title>
    <link href="http://yichewx.com/2017/01/21/JS%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>http://yichewx.com/2017/01/21/JS基础算法/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-基础算法"><a href="#JavaScript-基础算法" class="headerlink" title="JavaScript 基础算法"></a>JavaScript 基础算法</h2><hr>

<h3 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h3><p>解析url</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">true<span class="keyword">if</span>( url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> )&#123;</div><div class="line">truetrue<span class="keyword">var</span> arr = url.split(<span class="string">'?'</span>);											<span class="comment">//split 将url分割为两项.以'http://baidu.com?a=b&amp;c=d;'为例,即["http://baidu.com", "a=b&amp;c=d;"]</span></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> queryString = arr[<span class="number">1</span>];											<span class="comment">//获取arr[1]即获取到参数部分,即为queryString</span></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> items = queryString.length ? queryString.split(<span class="string">'&amp;'</span>) : [];		<span class="comment">//以&amp;为分割,将queryString分割为name,value串数组存放在items中.</span></div><div class="line"></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> queryObj = &#123;&#125;;</div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> itemArr,name,value;</div><div class="line">truetrue<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=items.length;i&lt;len;i++)&#123;</div><div class="line"></div><div class="line">truetruetrueitemArr = items[i].split(<span class="string">'='</span>);</div><div class="line">truetruetruename = <span class="built_in">decodeURIComponent</span>(itemArr[<span class="number">0</span>]);</div><div class="line">truetruetruevalue = <span class="built_in">decodeURIComponent</span>(itemArr[<span class="number">1</span>]);</div><div class="line"></div><div class="line">truetruetrue<span class="keyword">if</span>(name.length)&#123;												<span class="comment">//if是为了防止 name为空的情况</span></div><div class="line">truetruetruetruequeryObj[name] = value;										<span class="comment">//设置对象的属性</span></div><div class="line">truetruetrue&#125;</div><div class="line">truetrue&#125;</div><div class="line"></div><div class="line">truetrue<span class="keyword">return</span> queryObj;</div><div class="line"></div><div class="line">true&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://baidu.com?a=100&amp;c=1034'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(getQueryString(url)));</div><div class="line"></div><div class="line"><span class="comment">//其中有个需要注意的地方就是URL里面的querystring都是经过编码了的， 所以在取值的时候要先解码decodeURIComponent()</span></div></pre></td></tr></table></figure>
<hr>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>为Array原型中添加一个去重的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// way1</span></div><div class="line"><span class="built_in">Array</span>.prototype.uniqiue=<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  arr.sort();</div><div class="line">  <span class="keyword">var</span> i=<span class="number">1</span>,</div><div class="line">      j=<span class="number">0</span>;</div><div class="line">      length=arr.length;</div><div class="line">      arrTemp=[];</div><div class="line">      arrTemp=arrp[<span class="number">0</span>];</div><div class="line">    <span class="keyword">while</span>(i&lt;length)&#123;</div><div class="line">      <span class="keyword">if</span>(arrTemp[j]==arr[i])&#123;</div><div class="line">        i++;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        arrTemp[++j]=arr[i++];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arrTemp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// way2</span></div><div class="line"><span class="built_in">Array</span>.prototype.uniqiue=<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> arrTemp=[];</div><div class="line">  <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;arr.length)&#123;</div><div class="line">    buf=arr[i];</div><div class="line">    <span class="keyword">var</span> j=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(j&lt;arrTemp.length)&#123;</div><div class="line">      <span class="keyword">if</span> (arrTemp[j] == buf) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      j++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (j==arrTemp.length) &#123;</div><div class="line">      arrTemp.push(buf);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    i++;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arrTemp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这道题是阿里某一年前端的面试题. 其实在现实使用中一般不会做这么大的动作去改变Array对象的原型,因为动作太大,保不齐哪里会不会出什么问题. (一言以蔽之, 所有对全局的操作都需要慎重再慎重.) 这道题的主要考点我觉得有两个,一个是对js原型链的理解.另一个是对数组去重的基本算法的考察.解决这道题的方法有很多种算法, 在思考的过程中要兼顾性能最优.</p>
<h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><p>真是在那儿都遇到它.(这其实已经跟JS无关了). 之前的在一篇文章中提到过它的作用(当时比较的是二分查找和fib查找之间的性能比较.) 代码不贴了,可以在那篇文章中找到.两点需要注意:</p>
<ol>
<li>打死都不要用递归, 是典型的2^n类型. 会吃光你所有的性能. 无论你的机器性能有多强</li>
<li>用迭代代替递归. 用三个参数进行叠加就可以了.(甚至两个). 也不要用数组, 三个临时变量或者两个临时变量就够了.(^_^)</li>
</ol>
<p>再提一点, 为什么不建议用数组,而采用三个临时变量呢? 原因在于: 数组是存放在内存的栈中, 你看到栈会觉得已经够快了是吧?是挺快的. 但是呢, 临时变量存放在哪儿呢? 寄存器中. 现在知道这个区别了吗?  这个结论的来源是&lt;深入理解计算机系统&gt;, 有兴趣的同学可以去了解下.</p>
<h3 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter"></a>insertAfter</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newEl,targetNode</span>)</span>&#123;<span class="comment">//在目标节点的后面插入节点</span></div><div class="line">true<span class="keyword">var</span> parentNode=targetNode.parentNode;</div><div class="line">true<span class="keyword">if</span> (parentNode.lashChild==targetNode) &#123;</div><div class="line">truetrueparentNode.appendChild(newEl);</div><div class="line">true&#125;<span class="keyword">else</span>&#123;</div><div class="line">truetrueparentNode.insertBefore(newEl,targetNode.nextSubling);</div><div class="line">true&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本DOM操作</p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNmu</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">true<span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myarr=[];</div><div class="line">myarr.sort(sortNmu);</div></pre></td></tr></table></figure>
<p>会快排么?</p>
<p>(^_^)</p>
<p>###　sum</p>
<p>求sum(),参数的长度无限制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">// Should equal 15</div><div class="line">sum(1, 2, 3, 4, 5);</div><div class="line">// Should equal 0</div><div class="line">sum(5, null, -5);</div><div class="line">// Should equal 10</div><div class="line">sum('1.0', false, 1, true, 1, 'A', 1, 'B', 1, 'C', 1, 'D', 1,</div><div class="line">  'E', 1, 'F', 1, 'G', 1);</div><div class="line">// Should equal 0.3, not 0.30000000000000004</div><div class="line">sum(0.1, 0.2);</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> nResult = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</div><div class="line">        nResult += <span class="built_in">window</span>.parseFloat(<span class="built_in">arguments</span>[i]) || <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nResult.toFixed(<span class="number">3</span>) * <span class="number">1000</span> / <span class="number">1000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这好像也是阿里某年的一道笔试题. 这道题我觉得有意思的地方在于对于各种异常输入情况的处理,以及对结果的处理.另外对于js基础部分是对arguments 的了解.</p>
<p>###　正则匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">/^(\w+[_|\.|\_]?)*(\w)+@(\w+[_|\.|\_])*(\w)+\.[a-zA-z]&#123;<span class="number">2</span>,<span class="number">4</span>&#125;$/.test(<span class="string">"wanglinzhizhi@hotmail.com"</span>);</div></pre></td></tr></table></figure>
<h3 id="loading…"><a href="#loading…" class="headerlink" title="loading….."></a>loading…..</h3><p>晚安,地球</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-基础算法&quot;&gt;&lt;a href=&quot;#JavaScript-基础算法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础算法&quot;&gt;&lt;/a&gt;JavaScript 基础算法&lt;/h2&gt;&lt;hr&gt;

&lt;h3 id=&quot;queryst
    
    </summary>
    
      <category term="算法" scheme="http://yichewx.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yichewx.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="JS" scheme="http://yichewx.com/tags/JS/"/>
    
  </entry>
  
</feed>
