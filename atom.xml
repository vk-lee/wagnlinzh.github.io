<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanglinzhizhi</title>
  <subtitle>Hi, wanglinzhizhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanglinzhizhi.me/"/>
  <updated>2017-01-21T12:31:49.000Z</updated>
  <id>http://www.wanglinzhizhi.me/</id>
  
  <author>
    <name>wanglinzhizhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入浅出Node.js  朴灵</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/深入浅出Node.js/</id>
    <published>2017-01-21T12:31:49.000Z</published>
    <updated>2017-01-21T12:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入浅出Node-js"><a href="#深入浅出Node-js" class="headerlink" title="深入浅出Node.js"></a>深入浅出Node.js</h1><p><strong>朴灵</strong></p>
<h2 id="1-3-Node给JavaScript带来的意义"><a href="#1-3-Node给JavaScript带来的意义" class="headerlink" title="1.3 Node给JavaScript带来的意义"></a>1.3 Node给JavaScript带来的意义</h2><p>除了HTML、WebKit和显卡这些UI相关技术没有支持外，Node的结构与Chrome十分相似。它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务I/O</p>
<p>在Node中，JavaScript可以随心所欲地访问本地文件，可以搭建WebSocket服务器端，可以连接数据库，可以如Web Workers一样玩转多进程。如今，JavaScript可以运行在不同的地方，不再继续限制在浏览器中与CSS样式表、DOM树打交道。如果HTTP协议栈是水平面，Node就是浏览器在协议栈另一边的倒影。Node不处理UI，但用与浏览器相同的机制和原理运行。Node打破了过去JavaScript只能在浏览器中运行的局面。前后端编程环境统一，可以大大降低前后端转换所需要的上下文交换代价。</p>
<p>随着Node的出现，关于JavaScript的想象总是无限的。目前，社区已经出现node-webkit这样的项目，这个项目在2012年的沪JS会议上首次介绍给了公众。如同上文提及的关于浏览器的优势和限制，在node-webkit项目中，它将Node中的事件循环和WebKit的事件循环融合在一起，既可以通过它享受HTML、CSS带来的UI构建，也能通过它访问本地资源，将两者的优势整合到一起。桌面应用程序的开发可以完全通过HTML、CSS、JavaScript完成。</p>
<h3 id="1-4-1-异步I-O"><a href="#1-4-1-异步I-O" class="headerlink" title="1.4.1 异步I/O"></a>1.4.1 异步I/O</h3><p>下面的代码用于发起一个Ajax请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">$.post(<span class="string">'/url'</span>, &#123;</div><div class="line">  <span class="attr">title</span>: <span class="string">'深入浅出Node.js'</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'收到响应'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'发送Ajax结束'</span>);</div></pre></td></tr></table></figure>
<p>熟悉异步的用户必然知道，“收到响应”是在“发送Ajax结束”之后输出的。在调用$.post()后，后续代码是被立即执行的，而“收到响应”的执行时间是不被预期的。我们只知道它将在这个异步请求结束后执行，但并不知道具体的时间点。异步调用中对于结果值的捕获是符合“Don’t call me, I will call you”的原则的，这也是注重结果，不关心过程的一种表现</p>
<p>在Node中，异步I/O也很常见。以读取文件为例，我们可以看到它与前端Ajax调用的方式是极其类似的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件完成'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'发起读取文件'</span>);</div></pre></td></tr></table></figure>
<p>这里的“发起读取文件”是在“读取文件完成”之前输出的。同样，“读取文件完成”的执行也取决于读取文件的异步调用何时结束。图1-3是一个经典的异步调用。</p>
<p>在Node中，绝大多数的操作都以异步的方式进行调用。RyanDahl排除万难，在底层构建了很多异步I/O的API，从文件读取到网络请求等，均是如此。这样的意义在于，在Node中，我们可以从语言层面很自然地进行并行I/O操作。每个调用之间无须等待之前的I/O调用结束。在编程模型上可以极大提升效率。</p>
<p>下面的两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">fs.readFile(<span class="string">'/path1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件1完成'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fs.readFile(<span class="string">'/path2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件2完成'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>而对于同步I/O而言，它们的耗时是两个任务的耗时之和</p>
<h3 id="5-1-1-Node与V8"><a href="#5-1-1-Node与V8" class="headerlink" title="5.1.1 Node与V8"></a>5.1.1 Node与V8</h3><p>关于V8，它的来历与背景亦是大有来头。作为虚拟机，V8的性能表现优异，这与它的领导者有莫大的渊源，Chrome的成功也离不开它背后的天才——Lars Bak</p>
<p>在Lars的工作履历里，绝大部分都是与虚拟机相关的工作。在开发V8之前，他曾经在Sun公司工作，担任HotSpot团队的技术领导，主要致力于开发高性能的Java虚拟机。在这之前，他也曾为Self、Smalltalk语言开发过高性能虚拟机。这些无与伦比的经历让V8一出世就超越了当时所有的JavaScript虚拟机。</p>
<p>Node在JavaScript的执行上直接受益于V8，可以随着V8的升级就能享受到更好的性能或新的语言特性（如ES5和ES6）等，同时也受到V8的一些限制，尤其是本章要重点讨论的内存限制。</p>
<h3 id="5-1-2-V8的内存限制"><a href="#5-1-2-V8的内存限制" class="headerlink" title="5.1.2 V8的内存限制"></a>5.1.2 V8的内存限制</h3><p>在一般的后端开发语言中，在基本的内存使用上没有什么限制，然而在Node中通过JavaScript使用内存时就会发现只能使用部分内存（64位系统下约为1.4 GB，32位系统下约为0.7GB）。在这样的限制下，将会导致Node无法直接操作大内存对象，比如无法将一个2 GB的文件读入内存中进行字符串分析处理，即使物理内存有32 GB。这样在单个Node进程的情况下，计算机的内存资源无法得到充足的使用。</p>
<p>造成这个问题的主要原因在于Node基于V8构建，所以在Node中使用的JavaScript对象基本上都是通过V8自己的方式来进行分配和管理的。V8的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，足以胜任前端页面中的所有需求。但在Node中，这却限制了开发者随心所欲使用大内存的想法。</p>
<h3 id="5-1-3-V8的对象分配"><a href="#5-1-3-V8的对象分配" class="headerlink" title="5.1.3 V8的对象分配"></a>5.1.3 V8的对象分配</h3><p>在V8中，所有的JavaScript对象都是通过堆来进行分配的</p>
<p>当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中。如果已申请的堆空闲内存不够分配新的对象，将继续申请堆内存，直到堆的大小超过V8的限制为止</p>
<p>至于V8为何要限制堆的大小，表层原因为V8最初为浏览器而设计，不太可能遇到用大量内存的场景。对于网页来说，V8的限制值已经绰绰有余。深层原因是V8的垃圾回收机制的限制。按官方的说法，以1.5 GB的垃圾回收堆内存为例，V8做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JavaScript线程暂停执行的时间，在这样的时间花销下，应用的性能和响应能力都会直线下降。这样的情况不仅仅后端服务无法接受，前端浏览器也无法接受。因此，在当时的考虑下直接限制堆内存是一个好的选择。</p>
<p>当然，这个限制也不是不能打开，V8依然提供了选项让我们使用更多的内存。Node在启动时可以传递<code>--max-old-space-size</code>或<code>--max-new-space-size</code> 来调整内存限制的大小，示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node --max-old-space-size=1700 test.js // 单位为MB// 或者</div><div class="line">node --max-new-space-size=1024 test.js // 单位为KB</div></pre></td></tr></table></figure>
<p>上述参数在V8初始化时生效，一旦生效就不能再动态改变。如果遇到Node无法分配足够内存给JavaScript对象的情况，可以用这个办法来放宽V8默认的内存限制，避免在执行过程中稍微多用了一些内存就轻易崩溃。</p>
<h3 id="5-1-4-V8的垃圾回收机制"><a href="#5-1-4-V8的垃圾回收机制" class="headerlink" title="5.1.4 V8的垃圾回收机制"></a>5.1.4 V8的垃圾回收机制</h3><p>V8的垃圾回收策略主要基于分代式垃圾回收机制。在自动垃圾回收的演变过程中，人们发现没有一种垃圾回收算法能够胜任所有的场景。因为在实际的应用中，对象的生存周期长短不一，不同的算法只能针对特定情况具有最好的效果。</p>
<p>在V8中，主要将内存分为新生代和老生代两代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。</p>
<p>V8堆的整体大小就是新生代所用内存空间加上老生代的内存空间</p>
<p>前面我们提及的–max-old-space-size命令行参数可以用于设置老生代内存空间的最大值，–max-new-space-size命令行参数则用于设置新生代内存空间的大小的。比较遗憾的是，这两个最大值需要在启动时就指定。这意味着V8使用的内存没有办法根据使用情况自动扩充，当内存分配过程中超过极限值时，就会引起进程出错。</p>
<p>对于新生代内存，它由两个<code>reserved_semispace_size_</code> 所构成，后面将描述其原因。按机器位数不同，reserved_semispace<em>size</em>在64位系统和32位系统上分别为16 MB和8 MB。所以新生代内存的最大值在64位系统和32位系统上分别为32 MB和16 MB。</p>
<p>Cheney算法是一种采用复制的方式实现的垃圾回收算法。它将堆内存一分为二，每一部分空间称为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。当我们分配对象时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间的角色发生对换。简而言之，在垃圾回收的过程中，就是通过将存活对象在两个semispace空间之间进行复制。</p>
<p>Scavenge的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但Scavenge由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。</p>
<p>由于Scavenge是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p>
<p>当一个对象经过多次复制依然存活时，它将会被认为是生命周期较长的对象。这种较长生命周期的对象随后会被移动到老生代中，采用新的算法进行管理。对象从新生代中移动到老生代中的过程称为晋升</p>
<p>对于老生代中的对象，由于存活对象占较大比重，再采用Scavenge的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。这两个问题导致应对生命周期较长的对象时Scavenge会显得捉襟见肘。为此，V8在老生代中主要采用了Mark-Sweep和Mark-Compact相结合的方式进行垃圾回收。</p>
<p>Mark-Sweep是标记清除的意思，它分为标记和清除两个阶段。与Scavenge相比，Mark-Sweep并不将内存空间划分为两半，所以不存在浪费一半空间的行为。与Scavenge复制活着的对象不同，Mark-Sweep在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出，Scavenge中只复制活着的对象，而Mark-Sweep只清理死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因</p>
<p>Mark-Sweep最大的问题是在进行一次标记清除回收后，内存空间会出现不连续的状态。这种内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。<br>为了解决Mark-Sweep的内存碎片问题，Mark-Compact被提出来。Mark-Compact是标记整理的意思，是在Mark-Sweep的基础上演变而来的。它们的差别在于对象在标记为死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</p>
<p>，在Mark-Sweep和Mark-Compact之间，由于Mark-Compact需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8主要使用Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用Mark-Compact。</p>
<p>为了避免出现JavaScript应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在V8的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但V8的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full 垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。</p>
<p>图5-8　增量标记示意图<br>V8在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。</p>
<p>从V8的自动垃圾回收机制的设计角度可以看到，V8对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于Chrome浏览器这种每个选项卡页面使用一个V8实例而言，内存的使用是绰绰有余了。对于Node编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和JavaScript在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能的执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。<br>以Web服务器中的会话实现为例，一般通过内存来存储，但在访问量大的时候会导致老生代中的存活对象骤增，不仅造成清理/整理过程费时，还会造成内存紧张，甚至溢出</p>
<h3 id="5-1-5-查看垃圾回收日志"><a href="#5-1-5-查看垃圾回收日志" class="headerlink" title="5.1.5 查看垃圾回收日志"></a>5.1.5 查看垃圾回收日志</h3><p>查看垃圾回收日志的方式主要是在启动时添加–trace_gc参数。在进行垃圾回收时，将会从标准输出中打印垃圾回收的日志信息。下面是一段示例，执行结束后，将会在gc.log文件中得到所有垃圾回收信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node --trace_gc <span class="_">-e</span> <span class="string">"var a = [];for (var i = 0; i&lt; 1000000; i++) a.push(new Array(100));"</span> &gt; gc.log</div></pre></td></tr></table></figure>
<h3 id="5-2-高效使用内存"><a href="#5-2-高效使用内存" class="headerlink" title="5.2 高效使用内存"></a>5.2 高效使用内存</h3><p>高效使用内存<br>在V8面前，开发者所要具备的责任是如何让垃圾回收机制更高效地工作。</p>
<h3 id="5-2-1-作用域"><a href="#5-2-1-作用域" class="headerlink" title="5.2.1 作用域"></a>5.2.1 作用域</h3><p>提到如何触发垃圾回收，第一个要介绍的是作用域（scope）。在JavaScript中能形成作用域的有函数调用、with以及全局作用</p>
<p>foo()函数在每次被调用时会创建对应的作用域，函数执行结束后，该作用域将会销毁。同时作用域中声明的局部变量分配在该作用域上，随作用域的销毁而销毁。只被局部变量引用的对象存活周期较短</p>
<p>将会分配在新生代中的From空间中。在作用域释放后，局部变量local失效，其引用的对象将会在下次垃圾回收时被释放。</p>
<p>标识符查找<br>与作用域相关的即是标识符查找。所谓标识符，可以理解为变量名。在下面的代码中，执行bar()函数时，将会遇到local变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(local);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>JavaScript在执行时会去查找该变量定义在哪里。它最先查找的是当前作用域，如果在当前作用域中无法找到该变量的声明，将会向上级的作用域里查找，直到查到为止。</p>
<h3 id="2-作用域链"><a href="#2-作用域链" class="headerlink" title="2. 作用域链"></a>2. 作用域链</h3><p>local变量在baz()函数形成的作用域里查找不到，继而将在bar()的作用域里寻找。如果去掉上述代码bar()中的local声明，将会继续向上查找，一直到全局作用域。这样的查找方式使得作用域像一个链条。由于标识符的查找方向是向上的，所以变量只能向外访问，而不能向内访问。</p>
<p>当我们在baz()函数中访问local变量时，由于作用域中的变量列表中没有local，所以会向上一个作用域中查找，接着会在bar()函数执行得到的变量列表中找到了一个local变量的定义，于是使用它。尽管在再上一层的作用域中也存在local的定义，但是不会继续查找了。如果查找一个不存在的变量，将会一直沿着作用域链查找到全局作用域，最后抛出未定义错误。</p>
<p>变量的主动释放</p>
<p>如果变量是全局变量（不通过var声明或定义在global变量上），由于全局作用域需要直到进程退出才能释放，此时将导致引用的对象常驻内存（常驻在老生代中）。如果需要释放常驻内存的对象，可以通过delete操作来删除引用关系。或者将变量重新赋值，让旧的对象脱离引用关系。在接下来的老生代内存清除和整理的过程中，会被回收释放。下面为示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">global.foo = <span class="string">"I am global object"</span>;</div><div class="line"><span class="built_in">console</span>.log(global.foo);<span class="comment">// =&gt;"I am global object"</span></div><div class="line"><span class="keyword">delete</span> global.foo;<span class="comment">// 或者重新赋值</span></div><div class="line">global.foo = <span class="literal">undefined</span>; <span class="comment">// or nullconsole.log(global.foo); // =&gt; undefined</span></div></pre></td></tr></table></figure>
<p>同样，如果在非全局作用域中，想主动释放变量引用的对象，也可以通过这样的方式。虽然delete操作和重新赋值具有相同的效果，但是在V8中通过delete删除对象的属性有可能干扰V8的优化，所以通过赋值方式解除引用更好。</p>
<h3 id="5-2-2-闭包"><a href="#5-2-2-闭包" class="headerlink" title="5.2.2 闭包"></a>5.2.2 闭包</h3><p>我们知道作用域链上的对象访问只能向上，这样外部无法向内部访问。</p>
<p>在JavaScript中，实现外部作用域访问内部作用域中变量的方法叫做闭包（closure）。这得益于高阶函数的特性：函数可以作为参数或者返回值。</p>
<p>一般而言，在bar()函数执行完成后，局部变量local将会随着作用域的销毁而被回收。但是注意这里的特点在于返回值是一个匿名函数，且这个函数中具备了访问local的条件。虽然在后续的执行中，在外部作用域中还是无法直接访问local，但是若要访问它，只要通过这个中间函数稍作周转即可</p>
<p>闭包是JavaScript的高级特性，利用它可以产生很多巧妙的效果。它的问题在于，一旦有变量引用这个中间函数，这个中间函数将不会释放，同时也会使原始的作用域不会得到释放，作用域中产生的内存占用也不会得到释放。除非不再有引用，才会逐步释放。</p>
<h3 id="5-2-3-小结"><a href="#5-2-3-小结" class="headerlink" title="5.2.3 小结"></a>5.2.3 小结</h3><p>在正常的JavaScript执行中，无法立即回收的内存有闭包和全局变量引用这两种情况。由于V8的内存限制，要十分小心此类变量是否无限制地增加，因为它会导致老生代中的对象增多</p>
<h3 id="5-3-内存指标"><a href="#5-3-内存指标" class="headerlink" title="5.3 内存指标"></a>5.3 内存指标</h3><p>一般而言，应用中存在一些全局性的对象是正常的，而且在正常的使用中，变量都会自动释放回收。但是也会存在一些我们认为会回收但是却没有被回收的对象，这会导致内存占用无限增长。一旦增长达到V8的内存限制，将会得到内存溢出错误，进而导致进程退出。</p>
<h3 id="5-3-2-堆外内存"><a href="#5-3-2-堆外内存" class="headerlink" title="5.3.2 堆外内存"></a>5.3.2 堆外内存</h3><p>我们看到15次循环都完整执行，并且三个内存占用值与前一个示例完全不同。在改造后的输出结果中，heapTotal与heapUsed的变化极小，唯一变化的是rss的值，并且该值已经远远超过V8的限制值。这其中的原因是Buffer对象不同于其他对象，它不经过V8的内存分配机制，所以也不会有堆内存的大小限制。</p>
<p>这意味着利用堆外内存可以突破内存限制的问题。<br>为何Buffer对象并非通过V8分配？这在于Node并不同于浏览器的应用场景。在浏览器中，JavaScript直接处理字符串即可满足绝大多数的业务需求，而Node则需要处理网络流和文件I/O流，操作字符串远远不能满足传输的性能需求。</p>
<h3 id="5-3-3-小结"><a href="#5-3-3-小结" class="headerlink" title="5.3.3 小结"></a>5.3.3 小结</h3><p>Node的内存构成主要由通过V8进行分配的部分和Node自行分配的部分。受V8的垃圾回收限制的主要是V8的堆内存。</p>
<h3 id="5-4-内存泄漏"><a href="#5-4-内存泄漏" class="headerlink" title="5.4 内存泄漏"></a>5.4 内存泄漏</h3><p>Node对内存泄漏十分敏感，一旦线上应用有成千上万的流量，那怕是一个字节的内存泄漏也会造成堆积，垃圾回收过程中将会耗费更多时间进行对象扫描，应用响应缓慢，直到进程内存溢出，应用崩</p>
<p>在V8的垃圾回收机制下，在通常的代码编写中，很少会出现内存泄漏的情况。但是内存泄漏通常产生于无意间，较难排查。尽管内存泄漏的情况不尽相同，但其实质只有一个，那就是应当回收的对象出现意外而没有被回收，变成了常驻在老生代中的对象。</p>
<p>通常，造成内存泄漏的原因有如下几个。<br>缓存。队列消费不及时。<br>作用域未释放。</p>
<h3 id="5-4-1-慎将内存当做缓存"><a href="#5-4-1-慎将内存当做缓存" class="headerlink" title="5.4.1 慎将内存当做缓存"></a>5.4.1 慎将内存当做缓存</h3><p>慎将内存当做缓存</p>
<p>缓存在应用中的作用举足轻重，可以十分有效地节省资源。因为它的访问效率要比I/O的效率高，一旦命中缓存，就可以节省一次I/O的时间。</p>
<p>但是在Node中，缓存并非物美价廉。一旦一个对象被当做缓存来使用，那就意味着它将会常驻在老生代中。缓存中存储的键越多，长期存活的对象也就越多，这将导致垃圾回收在进行扫描和整理时，对这些对象做无用功。<br>另一个问题在于，JavaScript开发者通常喜欢用对象的键值对来缓存东西，但这与严格意义上的缓存又有着区别，严格意义的缓存有着完善的过期策略，而普通对象的键值对并没有。</p>
<p>十分容易理解，如果需要，只要限定缓存对象的大小，加上完善的过期策略以防止内存无限制增长，还是可以一用的。</p>
<p>这里给出一个可能无意识造成内存泄漏的场景：memoize。</p>
<p>它的原理是以参数作为键进行缓存，以内存空间换CPU执行时间。这里潜藏的陷阱即是每个被执行的结果都会按参数缓存在memo对象上，不会被清除。这在前端网页这种短时应用场景中不存在大问题，但是执行量大和参数多样性的情况下，会造成内存占用不释放。</p>
<p>所以在Node中，任何试图拿内存当缓存的行为都应当被限制。当然，这种限制并不是不允许使用的意思，而是要小心为之。</p>
<p>为了解决缓存中的对象永远无法释放的问题，需要加入一种策略来限制缓存的无限增长。</p>
<p>为此我曾写过一个模块limitablemap，它可以实现对键值数量的限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LimitableMap = <span class="function"><span class="keyword">function</span> (<span class="params">limit</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.limit = limit || <span class="number">10</span>; <span class="keyword">this</span>.map = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.keys = [];</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</div><div class="line">  LimitableMap.prototype.set = <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">this</span>.map; <span class="keyword">var</span> keys = <span class="keyword">this</span>.keys;</div><div class="line">    <span class="keyword">if</span> (!hasOwnProperty.call(map, key)) &#123;</div><div class="line">      <span class="keyword">if</span> (keys.length === <span class="keyword">this</span>.limit) &#123;</div><div class="line">        <span class="keyword">var</span> firstKey = keys.shift();</div><div class="line">        <span class="keyword">delete</span> map[firstKey];</div><div class="line">      &#125;</div><div class="line">      keys.push(key);</div><div class="line">    &#125;</div><div class="line">    map[key] = value;</div><div class="line">  &#125;;</div><div class="line">  LimitableMap.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map[key];</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">module</span>.exports = LimitableMap</div></pre></td></tr></table></figure>
<p>实现过程还是非常简单的。记录键在数组中，一旦超过数量，就以先进先出的方式进行淘汰。</p>
<p>这种淘汰策略并不是十分高效，只能应付小型应用场景。如果需要更高效的缓存，可以参见Isaac Z.Schlueter采用LRU算法的缓存，地址为<a href="https://github.com/isaacs/node-lru-cache。结合有限制的缓存，memoize还是可用的。" target="_blank" rel="external">https://github.com/isaacs/node-lru-cache。结合有限制的缓存，memoize还是可用的。</a></p>
<p>另一个案例在于模块机制。在第2章的模块介绍中，为了加速模块的引入，所有模块都会通过编译执行，然后被缓存起来。由于通过exports导出的函数，可以访问文件模块中的私有变量，这样每个文件模块在编译执行后形成的作用域因为模块缓存的原因，不会被释放。示例代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> local =<span class="string">"局部变量"</span>;</div><div class="line">  exports.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> local;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于模块的缓存机制，模块是常驻老生代的。在设计模块时，要十分小心内存泄漏的出现。在下面的代码，每次调用leak()方法时，都导致局部变量leakArray不停增加内存的占用，且不被释放：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> leakArray = [];</div><div class="line">exports.leak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  leakArray.push(<span class="string">"leak"</span> + <span class="built_in">Math</span>.random());</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果模块不可避免地需要这么设计，那么请添加清空队列的相应接口，以供调用者释放内存。</p>
<h3 id="缓存的解决方案"><a href="#缓存的解决方案" class="headerlink" title="缓存的解决方案"></a>缓存的解决方案</h3><p>直接将内存作为缓存的方案要十分慎重。除了限制缓存的大小外，另外要考虑的事情是，进程之间无法共享内存。如果在进程内使用缓存，这些缓存不可避免地有重复，对物理内存的使用是一种浪费。如何使用大量缓存，目前比较好的解决方案是采用进程外的缓存，进程自身不存储状态。外部的缓存软件有着良好的缓存过期淘汰策略以及自有的内存管理，不影响Node进程的性能。它的好处多多，在Node中主要可以解决以下两个问题。</p>
<p>（1）将缓存转移到外部，减少常驻内存的对象的数量，让垃圾回收更高效。<br>（2）进程之间可以共享缓存。</p>
<p>目前，市面上较好的缓存有Redis和Memcached。Node模块的生态系统十分完善，这两个产品的客户端都有，通过以下地址可以查看具体使用详情。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Redis：https://github.com/mranney/node_redis。</div><div class="line">Memcached：https://github.com/3rd-Eden/node-memcached。</div></pre></td></tr></table></figure>
<h3 id="5-4-2-关注队列状态"><a href="#5-4-2-关注队列状态" class="headerlink" title="5.4.2 关注队列状态"></a>5.4.2 关注队列状态</h3><p>关注队列状态</p>
<p>在解决了缓存带来的内存泄漏问题后，另一个不经意产生的内存泄漏则是队列。在第4章中可以看到，在JavaScript中可以通过队列（数组对象）来完成许多特殊的需求，比如Bagpipe。队列在消费者-生产者模型中经常充当中间产物。这是一个容易忽略的情况，因为在大多数应用场景下，消费的速度远远大于生产的速度，内存泄漏不易产生。但是一旦消费速度低于生产速度，将会形成堆积。</p>
<p>举个实际的例子，有的应用会收集日志。如果欠缺考虑，也许会采用数据库来记录日志。日志通常会是海量的，数据库构建在文件系统之上，写入效率远远低于文件直接写入，于是会形成数据库写入操作的堆积，而JavaScript中相关的作用域也不会得到释放，内存占用不会回落，从而出现内存泄漏。</p>
<p>遇到这种场景，表层的解决方案是换用消费速度更高的技术。在日志收集的案例中，换用文件写入日志的方式会更高效。需要注意的是，如果生产速度因为某些原因突然激增，或者消费速度因为突然的系统故障降低，内存泄漏还是可能出现的。深度的解决方案应该是监控队列的长度，一旦堆积，应当通过监控系统产生报警并通知相关人员。另一个解决方案是任意异步调用都应该包含超时机制，一旦在限定的时间内未完成响应，通过回调函数传递超时异常，使得任意异步调用的回调都具备可控的响应时间，给消费速度一个下限值。</p>
<p>对于Bagpipe而言，它提供了超时模式和拒绝模式。启用超时模式时，调用加入到队列中就开始计时，超时就直接响应一个超时错误。启用拒绝模式时，当队列拥塞时，新到来的调用会直接响应拥塞错误。这两种模式都能够有效地防止队列拥塞导致的内存泄漏问题。</p>
<h3 id="5-5-内存泄漏排查"><a href="#5-5-内存泄漏排查" class="headerlink" title="5.5 内存泄漏排查"></a>5.5 内存泄漏排查</h3><p>在Node中，由于V8的堆内存大小的限制，它对内存泄漏非常敏感。当在线服务的请求量变大时，哪怕是一个字节的泄漏都会导致内存占用过高。</p>
<p><code>v8-profiler</code> 。由Danny Coates提供，它可以用于对V8堆内存抓取快照和对CPU进行分析，但该项目已经有3年没有维护了。</p>
<p><code>node-heapdump</code>。这是Node核心贡献者之一Ben Noordhuis编写的模块，它允许对V8堆内存抓取快照，用于事后分析。</p>
<p><code>node-mtrace</code> 。由Jimb Esser提供，它使用了GCC的mtrace工具来分析堆的使用。</p>
<p><code>dtrace</code> 。在Joyent的SmartOS系统上，有完善的dtrace工具用来分析内存泄漏。</p>
<p><code>node-memwatch</code> 。来自Mozilla的Lloyd Hilaiel贡献的模块，采用WTFPL许可发布。</p>
<h3 id="5-5-2-node-memwatch"><a href="#5-5-2-node-memwatch" class="headerlink" title="5.5.2 node-memwatch"></a>5.5.2 node-memwatch</h3><p>最终得到的leak事件的信息只能告知我们应用中存在内存泄漏，具体问题产生在何处还需要从V8的堆内存上定位。node-memwatch提供了抓取快照和比较快照的功能，它能够比较堆上对象的名称和分配数量，从而找出导致内存泄漏的元凶。</p>
<h3 id="5-6-大内存应用"><a href="#5-6-大内存应用" class="headerlink" title="5.6 大内存应用"></a>5.6 大内存应用</h3><p>在Node中，不可避免地还是会存在操作大文件的场景。由于Node的内存限制，操作大文件也需要小心，好在Node提供了stream模块用于处理大文件。<br>stream模块是Node的原生模块，直接引用即可。stream继承自EventEmitter，具备基本的自定义事件功能，同时抽象出标准的事件和方法。它分可读和可写两种。Node中的大多数模块都有stream的应用，比如fs的createReadStream()和createWriteStream()方法可以分别用于创建文件的可读流和可写流，process模块中的stdin和stdout则分别是可读流和可写流的示例。由于V8的内存限制，我们无法通过fs.readFile()和fs.writeFile()直接进行大文件的操作，而改用fs.createReadStream()和fs.createWriteStream()方法通过流的方式实现对大文件的操作</p>
<p>如果不需要进行字符串层面的操作，则不需要借助V8来处理，可以尝试进行纯粹的Buffer操作，这不会受到V8堆内存的限制。但是这种大片使用内存的情况依然要小心，即使V8不限制堆内存的大小，物理内存依然有限制。</p>
<h2 id="第06章-理解Buffer"><a href="#第06章-理解Buffer" class="headerlink" title="第06章 理解Buffer"></a>第06章 理解Buffer</h2><p>文件和网络I/O对于前端开发者而言都是不曾有的应用场景，因为前端只需做一些简单的字符串操作或DOM操作基本就能满足业务需求，在ECMAScript规范中，也没有对这些方面做任何的定义，只有CommonJS中有部分二进制的定义。由于应用场景不同，在Node中，应用需要处理网络协议、操作数据库、处理图片、接收上传文件等，在网络流和文件的操作中，还要处理大量二进制数据，JavaScript自有的字符串远远不能满足这些需求，于是Buffer对象应运而生。</p>
<h3 id="6-1-Buffer结构"><a href="#6-1-Buffer结构" class="headerlink" title="6.1 Buffer结构"></a>6.1 Buffer结构</h3><p>Buffer是一个像Array的对象，但它主要用于操作字节</p>
<h3 id="6-1-1-模块结构"><a href="#6-1-1-模块结构" class="headerlink" title="6.1.1 模块结构"></a>6.1.1 模块结构</h3><p>Buffer是一个典型的JavaScript与C++结合的模块，它将性能相关部分用C++实现，将非性能相关的部分用JavaScript实现，如图6-1所示。<br>图6-1　Buffer的分工</p>
<p>Buffer所占用的内存不是通过V8分配的，属于堆外内存。由于V8垃圾回收性能的影响，将常用的操作对象用更高效和专有的内存分配回收策略来管理是个不错的思路。</p>
<p>由于Buffer太过常见，Node在进程启动时就已经加载了它，并将其放在全局对象（global）上。所以在使用Buffer时，无须通过require()即可直接使用。</p>
<h3 id="6-1-2-Buffer对象"><a href="#6-1-2-Buffer对象" class="headerlink" title="6.1.2 Buffer对象"></a>6.1.2 Buffer对象</h3><p>Buffer受Array类型的影响很大，可以访问length属性得到长度，也可以通过下标访问元素，在构造对象时也十分相似，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(buf.length); <span class="comment">// =&gt; 100</span></div></pre></td></tr></table></figure>
<p>上述代码分配了一个长100字节的Buffer对象。可以通过下标访问刚初始化的Buffer的元素，代码如下：console.log(buf[10]);<br>这里会得到一个比较奇怪的结果，它的元素值是一个0到255的随机值。</p>
<p>值得注意的是，如果给元素赋值不是0到255的整数而是小数时会怎样呢？示例代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">buf[<span class="number">20</span>] = <span class="number">-100</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">20</span>]); <span class="comment">// 156</span></div><div class="line">buf[<span class="number">21</span>] = <span class="number">300</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">21</span>]); <span class="comment">// 44</span></div><div class="line">buf[<span class="number">22</span>] = <span class="number">3.1415</span>;</div><div class="line"><span class="built_in">console</span>.log(buf[<span class="number">22</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>给元素的赋值如果小于0，就将该值逐次加256，直到得到一个0到255之间的整数。如果得到的数值大于255，就逐次减256，直到得到0~255区间内的数值。如果是小数，舍弃小数部分，只保留整数部分。</p>
<h3 id="6-1-3-Buffer内存分配"><a href="#6-1-3-Buffer内存分配" class="headerlink" title="6.1.3 Buffer内存分配"></a>6.1.3 Buffer内存分配</h3><p>Buffer内存分配</p>
<p>Buffer对象的内存分配不是在V8的堆内存中，而是在Node的C++层面实现内存的申请的。因为处理大量的字节数据不能采用需要一点内存就向操作系统申请一点内存的方式，这可能造成大量的内存申请的系统调用，对操作系统有一定压力。为此Node在内存的使用上应用的是在C++层面申请内存、在JavaScript中分配内存的策略。为了高效地使用申请来的内存，Node采用了slab分配机制。slab是一种动态内存管理机制，最早诞生于SunOS操作系统（Solaris）中，目前在一些*nix操作系统中有广泛的应用，如FreeBSD和Linux。<br>简单而言，slab就是一块申请好的固定大小的内存区域。slab具有如下3种状态。</p>
<p>full：完全分配状态。<br>partial：部分分配状态。<br>empty：没有被分配状态。</p>
<p>当我们需要一个Buffer对象，可以通过以下方式分配指定大小的Buffer对象：new Buffer(size);</p>
<p>Node以8 KB为界限来区分Buffer是大对象还是小对象：Buffer.poolSize = 8 * 1024;</p>
<p>这个8 KB的值也就是每个slab的大小值，在JavaScript层面，以它作为单位单元进行内存的分配。</p>
<p>分配小Buffer对象</p>
<p>如果指定Buffer的大小少于8 KB，Node会按照小对象的方式进行分配。Buffer的分配过程中主要使用一个局部变量pool作为中间处理对象，处于分配状态的slab单元都指向它。以下是分配一个全新的slab单元的操作，它会将新申请的SlowBuffer对象指向它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pool;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allocPool</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  pool = <span class="keyword">new</span> SlowBuffer(Buffer.poolSize);</div><div class="line">  pool.used = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次创建一个Buffer对象时，构造过程中将会判断这个slab的剩余空间是否足够。如果足够，使用剩余空间，并更新slab的分配状态。下面的代码创建了一个新的Buffer对象，它会引起一次slab分配：</p>
<p>如果slab剩余的空间不够，将会构造新的slab，原slab中剩余的空间会造成浪费。例如，第一次构造1字节的Buffer对象，第二次构造8192字节的Buffer对象，由于第二次分配时slab中的空间不够，所以创建并使用新的slab，第一个slab的8 KB将会被第一个1字节的Buffer对象独占。下面的代码一共使用了两个slab单元：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(<span class="number">1</span>);</div><div class="line"><span class="keyword">new</span> Buffer(<span class="number">8192</span>);</div></pre></td></tr></table></figure>
<p>这里要注意的事项是，由于同一个slab可能分配给多个Buffer对象使用，只有这些小Buffer对象在作用域释放并都可以回收时，slab的8 KB空间才会被回收。尽管创建了1个字节的Buffer对象，但是如果不释放它，实际可能是8 KB的内存没有释放。</p>
<p>分配大Buffer对象<br>如果需要超过8 KB的Buffer对象，将会直接分配一个SlowBuffer对象作为slab单元，这个slab单元将会被这个大Buffer对象独占。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Big buffer, just alloc one</span></div><div class="line"><span class="keyword">this</span>.parent = <span class="keyword">new</span> SlowBuffer(<span class="keyword">this</span>.length);</div><div class="line"><span class="keyword">this</span>.offset = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>这里的SlowBuffer类是在C++中定义的，虽然引用buffer模块可以访问到它，但是不推荐直接操作它，而是用Buffer替代。</p>
<p>上面提到的Buffer对象都是JavaScript层面的，能够被V8的垃圾回收标记回收。但是其内部的parent属性指向的SlowBuffer对象却来自于Node自身C++中的定义，是C++层面上的Buffer对象，所用内存不在V8的堆中。</p>
<p>简单而言，真正的内存是在Node的C++层面提供的，JavaScript层面只是使用它。当进行小而频繁的Buffer操作时，采用slab的机制进行预先申请和事后分配，使得JavaScript到操作系统之间不必有过多的内存申请方面的系统调用。对于大块的Buffer而言，则直接使用C++层面提供的内存，而无需细腻的分配操作。</p>
<h3 id="6-2-Buffer的转换"><a href="#6-2-Buffer的转换" class="headerlink" title="6.2 Buffer的转换"></a>6.2 Buffer的转换</h3><p>Buffer对象可以与字符串之间相互转换。</p>
<h3 id="6-2-1-字符串转Buffer"><a href="#6-2-1-字符串转Buffer" class="headerlink" title="6.2.1 字符串转Buffer"></a>6.2.1 字符串转Buffer</h3><p>字符串转Buffer<br>字符串转Buffer对象主要是通过构造函数完成的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(str, [encoding]);</div></pre></td></tr></table></figure>
<p>通过构造函数转换的Buffer对象，存储的只能是一种编码类型。encoding参数不传递时，默认按UTF-8编码进行转码和存储。</p>
<p>一个Buffer对象可以存储不同编码类型的字符串转码的值，调用write()方法可以实现该目的</p>
<p>由于可以不断写入内容到Buffer对象中，并且每次写入可以指定编码，所以Buffer对象中可以存在多种编码转化后的内容。需要小心的是，每种编码所用的字节长度不同，将Buffer反转回字符串时需要谨慎处理。</p>
<h3 id="6-2-2-Buffer转字符串"><a href="#6-2-2-Buffer转字符串" class="headerlink" title="6.2.2 Buffer转字符串"></a>6.2.2 Buffer转字符串</h3><p>实现Buffer向字符串的转换也十分简单，Buffer对象的toString()可以将Buffer对象转换为字符串</p>
<p>比较精巧的是，可以设置encoding（默认为UTF-8）、start、end这3个参数实现整体或局部的转换。如果Buffer对象由多种编码写入，就需要在局部指定不同的编码，才能转换回正常的编码。</p>
<h3 id="6-2-3-Buffer不支持的编码类型"><a href="#6-2-3-Buffer不支持的编码类型" class="headerlink" title="6.2.3 Buffer不支持的编码类型"></a>6.2.3 Buffer不支持的编码类型</h3><p>目前比较遗憾的是，Node的Buffer对象支持的编码类型有限，只有少数的几种编码类型可以在字符串和Buffer之间转换。为此，Buffer提供了一个isEncoding()函数来判断编码是否支持转换：<br>Buffer.isEncoding(encoding)将编码类型作为参数传入上面的函数，如果支持转换返回值为true，否则为false。很遗憾的是，在中国常用的GBK、GB2312和BIG-5编码都不在支持的行列中。</p>
<p>对于不支持的编码类型，可以借助Node生态圈中的模块完成转换。iconv和iconv-lite两个模块可以支持更多的编码类型转换，包括Windows 125系列、ISO-8859系列、IBM/DOS代码页系列、Macintosh系列、KOI8系列，以及Latin1、US-ASCII，也支持宽字节编码GBK和GB2312。</p>
<p>iconv-lite采用纯JavaScript实现，iconv则通过C++调用libiconv库完成。前者比后者更轻量，无须编译和处理环境依赖直接使用。在性能方面，由于转码都是耗用CPU，在V8的高性能下，少了C++到JavaScript的层次转换，纯JavaScript的性能比C++实现得更好。</p>
<p>另外，iconv和iconv-lite对无法转换的内容进行降级处理时的方案不尽相同。iconv-lite无法转换的内容如果是多字节，会输出&lt;图&gt;；如果是单字节，则输出?。iconv则有三级降级策略，会尝试翻译无法转换的内容，或者忽略这些内容。如果不设置忽略，iconv对于无法转换的内容将会得到EILSEQ异常</p>
<h3 id="6-3-Buffer的拼接"><a href="#6-3-Buffer的拼接" class="headerlink" title="6.3 Buffer的拼接"></a>6.3 Buffer的拼接</h3><p>Buffer的拼接<br>Buffer在使用场景中，通常是以一段一段的方式传输。</p>
<p>以下是常见的从输入流中读取内容的示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'test.md'</span>);</div><div class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</div><div class="line">rs.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">trunk</span>)</span>&#123;</div><div class="line">  data += trunk;</div><div class="line">&#125;);</div><div class="line">rs.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面这段代码常见于国外，用于流读取的示范，data事件中获取的chunk对象即是Buffer对象。对于初学者而言，容易将Buffer当做字符串来理解，所以在接受上面的示例时不会觉得有任何异常。</p>
<p>一旦输入流中有宽字节编码时，问题就会暴露出来。如果你在通过Node开发的网站上看到&lt;图&gt;乱码符号，那么该问题的起源多半来自于这里。<br>这里潜藏的问题在于如下这句代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">data += trunk;</div></pre></td></tr></table></figure>
<p>这句代码里隐藏了toString()操作，它等价于如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">data= data.toString() + trunk.toString();</div></pre></td></tr></table></figure>
<p>值得注意的是，外国人的语境通常是指英文环境，在他们的场景下，这个toString()不会造成任何问题。但对于宽字节的中文，却会形成问题。</p>
<h3 id="6-3-1-乱码是如何产生的"><a href="#6-3-1-乱码是如何产生的" class="headerlink" title="6.3.1 乱码是如何产生的"></a>6.3.1 乱码是如何产生的</h3><p>上面的诗歌中，“月”、“是”、“望”、“低”4个字没有被正常输出，取而代之的是3个&lt;图&gt;。产生这个输出结果的原因在于文件可读流在读取时会逐个读取Buffer。这首诗的原始Buffer应存储为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Buffer e5 ba <span class="number">8</span>a e5 <span class="number">89</span> <span class="number">8</span>d e6 <span class="number">98</span> <span class="number">8</span>e e6 <span class="number">9</span>c <span class="number">88</span> e5 <span class="number">85</span> <span class="number">89</span> ef bc <span class="number">8</span>c e7 <span class="number">96</span> <span class="number">91</span> e6 <span class="number">98</span></div><div class="line">af e5 <span class="number">9</span>c b0 e4 b8 <span class="number">8</span>a e9 <span class="number">9</span>c <span class="number">9</span>c ef bc <span class="number">9</span>b e4 b8 be e5 a4 b4 e6 <span class="number">9</span>c <span class="number">9</span>b e6 <span class="number">98</span> <span class="number">8</span>e e6</div><div class="line"><span class="number">9</span>c <span class="number">88</span> ...&gt;</div></pre></td></tr></table></figure>
<p>由于我们限定了Buffer对象的长度为11，因此只读流需要读取7次才能完成完整的读取，结果是以下几个Buffer对象依次输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Buffer e5 ba <span class="number">8</span>a e5 <span class="number">89</span> <span class="number">8</span>d e6 <span class="number">98</span> <span class="number">8</span>e e6 <span class="number">9</span>c&gt;<span class="xml"><span class="tag">&lt;<span class="name">Buffer</span> <span class="attr">88</span> <span class="attr">e5</span> <span class="attr">85</span> <span class="attr">89</span> <span class="attr">ef</span> <span class="attr">bc</span> <span class="attr">8c</span></span></span></div><div class="line"><span class="attr">e7</span> <span class="attr">96</span> <span class="attr">91</span> <span class="attr">e6</span>&gt;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>上文提到的<code>buf.toString()</code> 方法默认以UTF-8为编码，中文字在UTF-8下占3个字节。所以第一个Buffer对象在输出时，只能显示3个字符，Buffer中剩下的2个字节（e6 9c）将会以乱码的形式显示。第二个Buffer对象的第一个字节也不能形成文字，只能显示乱码。于是形成一些文字无法正常显示的问题。<br>在这个示例中我们构造了11这个限制，但是对于任意长度的Buffer而言，宽字节字符串都有可能存在被截断的情况，只不过Buffer的长度越大出现的概率越低而已，但该问题依然不可忽视。</p>
<h3 id="6-3-2-setEncoding-与string-decoder"><a href="#6-3-2-setEncoding-与string-decoder" class="headerlink" title="6.3.2 setEncoding()与string_decoder()"></a>6.3.2 setEncoding()与string_decoder()</h3><p>setEncoding()与string_decoder()</p>
<p>在看过上述的示例后，也许我们忘记了可读流还有一个设置编码的方法setEncoding()，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">readable.setEncoding(encoding)</div></pre></td></tr></table></figure>
<p>该方法的作用是让data事件中传递的不再是一个Buffer对象，而是编码后的字符串。为此，我们继续改进前面诗歌的程序，添加setEncoding()的步骤如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'test.md'</span>, &#123;</div><div class="line">  <span class="attr">highWaterMark</span>: <span class="number">11</span></div><div class="line">&#125;);</div><div class="line">rs.setEncoding(<span class="string">'utf8'</span>);</div></pre></td></tr></table></figure>
<p>要知道，无论如何设置编码，触发data事件的次数依旧相同，这意味着设置编码并未改变按段读取的基本方式。</p>
<p>事实上，在调用setEncoding()时，可读流对象在内部设置了一个decoder对象。每次data事件都通过该decoder对象进行Buffer到字符串的解码，然后传递给调用者。是故设置编码后，data不再收到原始的Buffer对象。但是这依旧无法解释为何设置编码后乱码问题被解决掉了，因为在前述分析中，无论如何转码，总是存在宽字节字符串被截断的问题。最终乱码问题得以解决，还是在于decoder的神奇之处。decoder对象来自于string_decoder模块StringDecoder的实例对象。它神奇的原理是什么，下面我们以代码来说明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> StringDecoder = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>).StringDecoder;</div><div class="line"><span class="keyword">var</span> decoder = <span class="keyword">new</span> StringDecoder(<span class="string">'utf8'</span>);</div><div class="line"><span class="keyword">var</span> buf1 = <span class="keyword">new</span> Buffer([<span class="number">0xE5</span>, <span class="number">0xBA</span>, <span class="number">0x8A</span>, <span class="number">0xE5</span>, <span class="number">0x89</span>, <span class="number">0x8D</span>, <span class="number">0xE6</span>, <span class="number">0x98</span>, <span class="number">0x8E</span>, <span class="number">0xE6</span>, <span class="number">0x9C</span>]);</div><div class="line"><span class="built_in">console</span>.log(decoder.write(buf1)); <span class="comment">// =&gt; 床前明</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> buf2 = <span class="keyword">new</span> Buffer([<span class="number">0x88</span>, <span class="number">0xE5</span>, <span class="number">0x85</span>, <span class="number">0x89</span>, <span class="number">0xEF</span>, <span class="number">0xBC</span>, <span class="number">0x8C</span>, <span class="number">0xE7</span>, <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0xE6</span>]);</div><div class="line"><span class="built_in">console</span>.log(decoder.write(buf2)); <span class="comment">// =&gt; 月光，疑</span></div></pre></td></tr></table></figure>
<p>我将前文提到的前两个Buffer对象写入decoder中。奇怪的地方在于“月”的转码并没有如平常一样在两个部分分开输出。StringDecoder在得到编码后，知道宽字节字符串在UTF-8编码下是以3个字节的方式存储的，所以第一次write()时，只输出前9个字节转码形成的字符，“月”字的前两个字节被保留在StringDecoder实例内部。第二次write()时，会将这2个剩余字节和后续11个字节组合在一起，再次用3的整数倍字节进行转码。于是乱码问题通过这种中间形式被解决了。</p>
<p>奇妙，但是它也并非万能药，它目前只能处理UTF-8、Base64和UCS-2/UTF-16LE这3种编码。所以，通过setEncoding()的方式不可否认能解决大部分的乱码问题，但并不能从根本上解决该问题。</p>
<h3 id="6-3-3-正确拼接Buffer"><a href="#6-3-3-正确拼接Buffer" class="headerlink" title="6.3.3 正确拼接Buffer"></a>6.3.3 正确拼接Buffer</h3><p>正确拼接Buffer<br>淘汰掉setEncoding()方法后，剩下的解决方案只有将多个小Buffer对象拼接为一个Buffer对象，然后通过iconv-lite一类的模块来转码这种方式。+=的方式显然不行，那么正确的Buffer拼接方法应该如下面展示的形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> chunks = [];</div><div class="line"><span class="keyword">var</span> size = <span class="number">0</span>;</div><div class="line">res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  chunks.push(chunk);</div><div class="line">  size += chunk.length;</div><div class="line">&#125;);</div><div class="line">res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> buf = Buffer.concat(chunks, size);</div><div class="line">  <span class="keyword">var</span> str = iconv.decode(buf, <span class="string">'utf8'</span>);</div><div class="line">  <span class="built_in">console</span>.log(str);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>正确的拼接方式是用一个数组来存储接收到的所有Buffer片段并记录下所有片段的总长度，然后调用Buffer.concat()方法生成一个合并的Buffer对象。Buffer.concat()方法封装了从小Buffer对象向大Buffer对象的复制过程，实现十分细腻，值得围观学习：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">Buffer.concat = <span class="function"><span class="keyword">function</span> (<span class="params">list, length</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(list)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Usage: Buffer.concat(list, [length])'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (list.length === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Buffer(<span class="number">0</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list.length === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> list[<span class="number">0</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> length !== <span class="string">'number'</span>) &#123;</div><div class="line">    length = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> buf = list[i];</div><div class="line">      length += buf.length;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(length);</div><div class="line">  <span class="keyword">var</span> pos = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> buf = list[i];</div><div class="line">    buf.copy(buffer, pos);</div><div class="line">    pos += buf.length;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> buffer;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="6-4-Buffer与性能"><a href="#6-4-Buffer与性能" class="headerlink" title="6.4 Buffer与性能"></a>6.4 Buffer与性能</h3><p>Buffer与性能</p>
<p>Buffer在文件I/O和网络I/O中运用广泛，尤其在网络传输中，它的性能举足轻重。在应用中，我们通常会操作字符串，但一旦在网络中传输，都需要转换为Buffer，以进行二进制数据传输。在Web应用中，字符串转换到Buffer是时时刻刻发生的，提高字符串到Buffer的转换效率，可以很大程度地提高网络吞吐率。</p>
<p>在展开Buffer与网络传输的关系之前，我们可以先来进行一次性能测试。下面的例子中构造了一个10 KB大小的字符串。我们首先通过纯字符串的方式向客户端发送，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> helloworld = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">10</span>; i++) &#123;</div><div class="line">  helloworld += <span class="string">"a"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// helloworld = new Buffer(helloworld);</span></div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>);</div><div class="line">  res.end(helloworld);</div><div class="line">&#125;).listen(<span class="number">8001</span>);</div></pre></td></tr></table></figure>
<p>我们通过ab进行一次性能测试，发起200个并发客户端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ab -c 200 -t 100</div></pre></td></tr></table></figure>
<p><a href="http://127.0.0.1:8001/" target="_blank" rel="external">http://127.0.0.1:8001/</a></p>
<p>得到的测试结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTML transferred: 512000000 bytes</div><div class="line">Requests per second: 2527.64 [#/sec] (mean)Time per request: 79.125 [ms] (mean)</div><div class="line">Time per request: 0.396 [ms] (mean, across all concurrent requests)Transfer</div><div class="line">rate: 25370.16 [Kbytes/sec] received</div></pre></td></tr></table></figure>
<p>测试的QPS（每秒查询次数）是2527.64，传输率为每秒25 370.16 KB。接下来我们注释掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">helloworld = <span class="keyword">new</span> Buffer(helloworld);</div></pre></td></tr></table></figure>
<p>使向客户端输出的是一个Buffer对象，无须在每次响应时进行转换。再次进行性能测试的结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Total transferred: 513900000 bytesHTML transferred: 512000000 bytes</div><div class="line">Requests per second: 4843.28 [#/sec] (mean)Time per request: 41.294 [ms] (mean)</div><div class="line">Time per request: 0.206 [ms] (mean, across all concurrent requests)Transfer rate:</div><div class="line">48612.56 [Kbytes/sec] received</div></pre></td></tr></table></figure>
<p>QPS的提升到4843.28，传输率为每秒48 612.56KB，性能提高近一倍。</p>
<p>通过预先转换静态内容为Buffer对象，可以有效地减少CPU的重复使用，节省服务器资源。在Node构建的Web应用中，可以选择将页面中的动态内容和静态内容分离，静态内容部分可以通过预先转换为Buffer的方式，使性能得到提升。由于文件自身是二进制数据，所以在不需要改变内容的场景下，尽量只读取Buffer，然后直接传输，不做额外的转换，避免损耗。</p>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>Buffer的使用除了与字符串的转换有性能损耗外，在文件的读取时，有一个<code>highWaterMark</code> 设置对性能的影响至关重要。在<code>fs.createReadStream(path, opts)</code> 时，我们可以传入一些参数，</p>
<p><code>fs.createReadStream()</code> 的工作方式是在内存中准备一段Buffer，然后在fs.read()读取时逐步从磁盘中将字节复制到Buffer中。完成一次读取时，则从这个Buffer中通过slice()方法取出部分数据作为一个小Buffer对象，再通过data事件传递给调用方。如果Buffer用完，则重新分配一个；如果还有剩余，则继续使用。下面为分配一个新的Buffer对象的操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pool;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allocNewPool</span>(<span class="params">poolSize</span>) </span>&#123;</div><div class="line">  pool = <span class="keyword">new</span> Buffer(poolSize);</div><div class="line">  pool.used = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在理想的状况下，每次读取的长度就是用户指定的highWaterMark。但是有可能读到了文件结尾，或者文件本身就没有指定的highWaterMark那么大，这个预先指定的Buffer对象将会有部分剩余，不过好在这里的内存可以分配给下次读取时使用。pool是常驻内存的，只有当pool单元剩余数量小于128（kMinPoolSpace）字节时，才会重新分配一个新的Buffer对</p>
<p>Node源代码中分配新的Buffer对象的判断条件如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (!pool || pool.length - pool.used &lt; kMinPoolSpace) &#123;</div><div class="line">  <span class="comment">// discard the old pool</span></div><div class="line">  pool = <span class="literal">null</span>;</div><div class="line">  allocNewPool(<span class="keyword">this</span>._readableState.highWaterMark);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里与Buffer的内存分配比较类似，highWaterMark的大小对性能有两个影响的点。</p>
<p><code>highWaterMark</code> 设置对Buffer内存的分配和使用有一定影响。<br><code>highWaterMark</code> 设置过小，可能导致系统调用次数过多。</p>
<p>文件流读取基于Buffer分配，Buffer则基于SlowBuffer分配，这可以理解为两个维度的分配策略。如果文件较小（小于8 KB），有可能造成slab未能完全使用。<br>由于fs.createReadStream()内部采用fs.read()实现，将会引起对磁盘的系统调用，对于大文件而言，highWaterMark的大小决定会触发系统调用和data事件的次数</p>
<p>读取一个相同的大文件时，highWaterMark值的大小与读取速度的关系：该值越大，读取速度越快。</p>
<h3 id="6-5-总结"><a href="#6-5-总结" class="headerlink" title="6.5 总结"></a>6.5 总结</h3><p>体验过JavaScript友好的字符串操作后，有些开发者可能会形成思维定势，将Buffer当做字符串来理解。但字符串与Buffer之间有实质上的差异，即Buffer是二进制数据，字符串与Buffer之间存在编码关系。因此，理解Buffer的诸多细节十分必要，对于如何高效处理二进制数据十分有用。</p>
<h2 id="第07章-网络编程"><a href="#第07章-网络编程" class="headerlink" title="第07章 网络编程"></a>第07章 网络编程</h2><p>Node是一个面向网络而生的平台，它具有事件驱动、无阻塞、单线程等特性，具备良好的可伸缩性，使得它十分轻量，适合在分布式网络中扮演各种各样的角色。同时Node提供的API十分贴合网络，适合用它基础的API构建灵活的网络服务。</p>
<p>在Web领域，大多数的编程语言需要专门的Web服务器作为容器，如ASP、ASP.NET需要IIS作为服务器，PHP需要搭载Apache或Nginx环境等，JSP需要Tomcat服务器等。但对于Node而言，只需要几行代码即可构建服务器，无需额外的容器。</p>
<p>Node提供了net、dgram、http、https这4个模块，分别用于处理TCP、UDP、HTTP、HTTPS，适用于服务器端和客户端。</p>
<h3 id="7-1-1-TCP"><a href="#7-1-1-TCP" class="headerlink" title="7.1.1 TCP"></a>7.1.1 TCP</h3><p>TCP全名为传输控制协议，在OSI模型（由七层组成，分别为物理层、数据链结层、网络层、传输层、会话层、表示层、应用层）中属于传输层协议。许多应用层协议基于TCP构建，典型的是HTTP、SMTP、IMAP等协议。</p>
<p>只有会话形成之后，服务器端和客户端之间才能互相发送数据。在创建会话的过程中，服务器端和客户端分别提供一个套接字，这两个套接字共同形成一个连接。服务器端与客户端则通过套接字实现两者之间连接的操作。</p>
<table>
<thead>
<tr>
<th>注</th>
<th>计算机基础(^_^)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h3 id="7-1-2-创建TCP服务器端"><a href="#7-1-2-创建TCP服务器端" class="headerlink" title="7.1.2 创建TCP服务器端"></a>7.1.2 创建TCP服务器端</h3><p>我们可以开始创建一个TCP服务器端来接受网络请求，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123; <span class="comment">// 新的连接</span></div><div class="line">  socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    socket.write(<span class="string">"你好"</span>);</div><div class="line">  &#125;);</div><div class="line">  socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'连接断开'</span>);</div><div class="line">  &#125;);</div><div class="line">  socket.write(<span class="string">"欢迎光临《深入浅出Node.js》示例：\n"</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8124</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们通过net.createServer(listener)即可创建一个TCP服务器，listener是连接事件connection的侦听器，也可以采用如下的方式进行侦听：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> server = net.createServer();</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="comment">// 新的连接</span></div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8124</span>);</div></pre></td></tr></table></figure>
<p>我们可以利用Telnet工具作为客户端对刚才创建的简单服务器进行会话交流，相关代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">$ telnet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8124</span></div><div class="line">Trying <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>...</div><div class="line">Connected to localhost.</div><div class="line">Escape character is <span class="string">'^]'</span>.欢迎光临《深入浅出Node.js》</div><div class="line">示例：</div><div class="line">hi</div><div class="line">你好</div></pre></td></tr></table></figure>
<p>除了端口外，同样我们也可以对Domain Socket进行监听，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server.listen(&apos;/tmp/echo.sock&apos;);</div></pre></td></tr></table></figure>
<p>通过nc工具进行会话，测试上面构建的TCP服务的代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ nc -U /tmp/echo.sock欢迎光临《深入浅出Node.js》</div><div class="line"></div><div class="line">示例：</div><div class="line">hi你好</div></pre></td></tr></table></figure>
<p>通过net模块自行构造客户端进行会话，测试上面构建的TCP服务的代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;</div><div class="line">  <span class="attr">port</span>: <span class="number">8124</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//'connect' listener</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</div><div class="line">  client.write(<span class="string">'world!\r\n'</span>);</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data.toString());</div><div class="line">  client.end();</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将以上客户端代码存为client.js并执行，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ node client.js</div></pre></td></tr></table></figure>
<p>client connected</p>
<p>欢迎光临《深入浅出Node.js》示例：<br>你好<br>client disconnected</p>
<p>其结果与使用Telnet和nc的会话结果并无差别。如果是Domain Socket，在填写选项时，填写path即可，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">path</span>: <span class="string">'/tmp/echo.sock'</span>&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-1-3-TCP服务的事件"><a href="#7-1-3-TCP服务的事件" class="headerlink" title="7.1.3 TCP服务的事件"></a>7.1.3 TCP服务的事件</h3><p>对于通过net.createServer()创建的服务器而言，它是一个EventEmitter实例，它的自定义事件有如下几种。</p>
<ul>
<li>listening：在调用server.listen()绑定端口或者Domain Socket后触发，简洁写法为server.listen(port,listeningListener)，通过listen()方法的第二个参数传入。</li>
<li>connection：每个客户端套接字连接到服务器端时触发，简洁写法为通过net.create-Server()，最后一个参数传递。</li>
<li>close：当服务器关闭时触发，在调用server.close()后，服务器将停止接受新的套接字连接，但保持当前存在的连接，等待所有连接都断开后，会触发该事件。</li>
<li>error：当服务器发生异常时，将会触发该事件。比如侦听一个使用中的端口，将会触发一个异常，如果不侦听error事件，服务器将会抛出异常。</li>
</ul>
<p>连接事件</p>
<p>服务器可以同时与多个客户端保持连接，对于每个连接而言是典型的可写可读Stream对象。Stream对象可以用于服务器端和客户端之间的通信，既可以通过data事件从一端读取另一端发来的数据，也可以通过write()方法从一端向另一端发送数据。</p>
<ul>
<li>data：当一端调用write()发送数据时，另一端会触发data事件，事件传递的数据即是write()发送的数据。</li>
</ul>
<ul>
<li>end：当连接中的任意一端发送了FIN数据时，将会触发该事件。</li>
</ul>
<ul>
<li>connect：该事件用于客户端，当套接字与服务器端连接成功时会被触发。</li>
</ul>
<ul>
<li>drain：当任意一端调用write()发送数据时，当前这端会触发该事件。</li>
</ul>
<ul>
<li>error：当异常发生时，触发该事件。</li>
</ul>
<ul>
<li>close：当套接字完全关闭时，触发该事件</li>
</ul>
<ul>
<li>timeout：当一定时间后连接不再活跃时，该事件将会被触发，通知用户当前该连接已经被闲置了。</li>
</ul>
<p>由于TCP套接字是可写可读的Stream对象，可以利用pipe()方法巧妙地实现管道操作</p>
<p>值得注意的是，TCP针对网络中的小数据包有一定的优化策略：Nagle算法。如果每次只发送一个字节的内容而不优化，网络中将充满只有极少数有效数据的数据包，将十分浪费网络资源。Nagle算法针对这种情况，要求缓冲区的数据达到一定数量或者一定时间后才将其发出，所以小数据包将会被Nagle算法合并，以此来优化网络。这种优化虽然使网络带宽被有效地使用，但是数据有可能被延迟发送。</p>
<p>在Node中，由于TCP默认启用了Nagle算法，可以调用socket.setNoDelay(true)去掉Nagle算法，使得write()可以立即发送数据到网络中。</p>
<p>另一个需要注意的是，尽管在网络的一端调用write()会触发另一端的data事件，但是并不意味着每次write()都会触发一次data事件，在关闭掉Nagle算法后，另一端可能会将接收到的多个小数据包合并，然后只触发一次data事件。</p>
<h3 id="7-2-构建UDP服务"><a href="#7-2-构建UDP服务" class="headerlink" title="7.2 构建UDP服务"></a>7.2 构建UDP服务</h3><p>但在UDP中，一个套接字可以与多个UDP服务通信，它虽然提供面向事务的简单不可靠信息传输服务，在网络差的情况下存在丢包严重的问题，但是由于它无须连接，资源消耗低，处理快速且灵活，所以常常应用在那种偶尔丢一两个数据包也不会产生重大影响的场景，比如音频、视频等。UDP目前应用很广泛，DNS服务即是基于它实现的。</p>
<h3 id="7-2-1-创建UDP套接字"><a href="#7-2-1-创建UDP套接字" class="headerlink" title="7.2.1 创建UDP套接字"></a>7.2.1 创建UDP套接字</h3><p>7.2.1　创建UDP套接字<br>创建UDP套接字十分简单，UDP套接字一旦创建，既可以作为客户端发送数据，也可以作为服务器端接收数据。下面的代码创建了一个UDP套接字：var dgram = require(‘dgram’);<br>var socket = dgram.createSocket(“udp4”);</p>
<h3 id="7-2-2-创建UDP服务器端"><a href="#7-2-2-创建UDP服务器端" class="headerlink" title="7.2.2 创建UDP服务器端"></a>7.2.2 创建UDP服务器端</h3><p>若想让UDP套接字接收网络消息，只要调用dgram.bind(port,[address])方法对网卡和端口进行绑定即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">"dgram"</span>);</div><div class="line"><span class="keyword">var</span> server = dgram.createSocket(<span class="string">"udp4"</span>);</div><div class="line">server.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, rinfo</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"server got: "</span> + msg + <span class="string">" from "</span> + rinfo.address\ + <span class="string">":"</span> + rinfo.port);</div><div class="line">&#125;);</div><div class="line">server.on(<span class="string">"listening"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> address = server.address();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"server listening "</span> + address.address + <span class="string">":"</span> +</div><div class="line">    address.port);</div><div class="line">&#125;);</div><div class="line">server.bind(<span class="number">41234</span>);</div></pre></td></tr></table></figure>
<p>该套接字将接收所有网卡上41234端口上的消息。在绑定完成后，将触发listening事件。</p>
<h3 id="7-2-4-UDP套接字事件"><a href="#7-2-4-UDP套接字事件" class="headerlink" title="7.2.4 UDP套接字事件"></a>7.2.4 UDP套接字事件</h3><p>UDP套接字相对TCP套接字使用起来更简单，它只是一个EventEmitter的实例，而非Stream的实例。</p>
<ul>
<li>message：当UDP套接字侦听网卡端口后，接收到消息时触发该事件，触发携带的数据为消息Buffer对象和一个远程地址信息。</li>
</ul>
<ul>
<li>listening：当UDP套接字开始侦听时触发该事件</li>
</ul>
<ul>
<li><p>close：调用close()方法时触发该事件，并不再触发message事件。如需再次触发message事件，重新绑定即可。</p>
</li>
<li><p>error：当异常发生时触发该事件，如果不侦听，异常将直接抛出，使进程退出。</p>
</li>
</ul>
<h3 id="7-3-构建HTTP服务"><a href="#7-3-构建HTTP服务" class="headerlink" title="7.3 构建HTTP服务"></a>7.3 构建HTTP服务</h3><p>TCP与UDP都属于网络传输层协议，如果要构造高效的网络应用，就应该从传输层进行着手</p>
<p>但是对于经典的应用场景，则无须从传输层协议入手构造自己的应用，比如HTTP或SMTP等，这些经典的应用层协议对于普通应用而言绰绰有余。Node提供了基本的http和https模块用于HTTP和HTTPS的封装，对于其他应用层协议的封装，也能从社区中轻松找到其实现。</p>
<p>在Node中构建HTTP服务极其容易，Node官网上的经典例子就展示了如何用寥寥几行代码实现一个HTTP服务器，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http: //127.0.0.1:1337/'</span>);</div></pre></td></tr></table></figure>
<p>尽管这个HTTP服务器简单到只能回复Hello World，但是它能维持的并发量和QPS都是不容小觑的，其背后的原因在第3章中有叙述，此处我们不再探讨</p>
<p><strong>7.3.1 HTTP</strong></p>
<p>从上述的报文信息中可以看出HTTP的特点，它是基于请求响应式的，以一问一答的方式实现服务，虽然基于TCP会话，但是本身却并无会话的特点。</p>
<p>从协议的角度来说，现在的应用，如浏览器，其实是一个HTTP的代理，用户的行为将会通过它转化为HTTP请求报文发送给服务器端，服务器端在处理请求后，发送响应报文给代理，代理在解析报文后，将用户需要的内容呈现在界面上</p>
<p>以浏览器打开一张图片地址为例：</p>
<ul>
<li>首先，浏览器构造HTTP报文发向图片服务器端；</li>
<li>然后，服务器端判断报文中的要请求的地址，将磁盘中的图片文件以报文的形式发送给浏览器；</li>
<li>浏览器接收完图片后，调用渲染引擎将其显示给用户。</li>
</ul>
<p>简而言之，HTTP服务只做两件事情：处理HTTP请求和发送HTTP响应。</p>
<h3 id="7-3-2-http模块"><a href="#7-3-2-http模块" class="headerlink" title="7.3.2 http模块"></a>7.3.2 http模块</h3><p>Node的http模块包含对HTTP处理的封装。在Node中，HTTP服务继承自TCP服务器（net模块），它能够与多个客户端保持连接，由于其采用事件驱动的形式，并不为每一个连接创建额外的线程或进程，保持很低的内存占用，所以能实现高并发</p>
<p>HTTP服务与TCP服务模型有区别的地方在于，在开启keepalive后，一个TCP会话可以用于多次请求和响应。TCP服务以connection为单位进行服务，HTTP服务以request为单位进行服务。http模块即是将connection到request的过程进行了封装</p>
<p>http模块将连接所用套接字的读写抽象为ServerRequest和ServerResponse对象，它们分别对应请求和响应操作。</p>
<p>对于TCP连接的读操作，http模块将其封装为ServerRequest对象。让我们再次查看前面的请求报文，报文头部将会通过http_parser进行解析。请求报文的代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET / HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337&gt;</div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p>报文头第一行GET / HTTP/1.1被解析之后分解为如下属性。</p>
<ul>
<li><code>req.method</code>属性 ： 值为GET，是为请求方法，常见的请求方法有GET、POST、DELETE、PUT、CONNECT等几种。req.url属性：值为/。</li>
<li><code>req.httpVersion</code>属性：值为1.1。其余报头是很规律的Key: Value格式，被解析后放置在req.headers属性上传递给业务逻辑以供调用，如下所示：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">headers: &#123;</div><div class="line">  'user-agent': 'curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL / 0.9 .8 r zlib / 1.2 .5 ', </div><div class="line">  host: '127.0 .0 .1: 1337 ',</div><div class="line">  accept: '*/*'</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>报文体部分则抽象为一个只读流对象，如果业务逻辑需要读取报文体中的数据，则要在这个数据流结束后才能进行操作，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// console.log(req.headers);</span></div><div class="line">  <span class="keyword">var</span> buffers = [];</div><div class="line">  req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">trunk</span>) </span>&#123;</div><div class="line">    buffers.push(trunk);</div><div class="line">  &#125;).on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> buffer = Buffer.concat(buffers); <span class="comment">// TODO</span></div><div class="line">    res.end(<span class="string">'Hello world'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>HTTP请求对象和HTTP响应对象是相对较底层的封装，现行的Web框架如Connect和Express都是在这两个对象的基础上进行高层封装完成的。</p>
<p>HTTP响应<br>再来看看HTTP响应对象。HTTP响应相对简单一些，它封装了对底层连接的写操作，可以将其看成一个可写的流对象。它影响响应报文头部信息的API为res.setHeader()和res.writeHead()。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div></pre></td></tr></table></figure>
<p>其分为setHeader()和writeHead()两个步骤。它在http模块的封装下，实际生成如下报文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt; HTTP/1.1 200 OK</div><div class="line"></div><div class="line">&lt; Content-Type: text/plain 我们可以调用setHeader进行多次设置，但只有调用writeHead后，报头才会写入到连接中。除此之外，http模块会自动帮你设置一些头信息，如下所示：</div><div class="line"></div><div class="line">&lt; Date: Sat, 06 Apr 2013 08:01:44 GMT</div><div class="line">&lt; Connection: keep-alive</div><div class="line">&lt; Transfer-Encoding: chunked</div><div class="line">&lt;</div></pre></td></tr></table></figure>
<p>报文体部分则是调用res.write()和res.end()方法实现，后者与前者的差别在于res.end()会先调用write()发送数据，然后发送信号告知服务器这次响应结束，响应结果如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">Hello World</div></pre></td></tr></table></figure>
<p>响应结束后，HTTP服务器可能会将当前的连接用于下一个请求，或者关闭连接。值得注意的是，报头是在报文体发送前发送的，一旦开始了数据的发送，writeHead()和setHeader()将不再生效。这由协议的特性决定。</p>
<p>另外，无论服务器端在处理业务逻辑时是否发生异常，务必在结束时调用res.end()结束请求，否则客户端将一直处于等待的状态。当然，也可以通过延迟res.end()的方式实现客户端与服务器端之间的长连接，但结束时务必关闭连接。</p>
<p>HTTP服务的事件</p>
<p>如同TCP服务一样，HTTP服务器也抽象了一些事件，以供应用层使用，同样典型的是，服务器也是一个EventEmitter实例。</p>
<ul>
<li>connection事件：在开始HTTP请求和响应前，客户端与服务器端需要建立底层的TCP连接，这个连接可能因为开启了keep-alive，可以在多次请求响应之间使用；当这个连接建立时，服务器触发一次connection事件。</li>
</ul>
<ul>
<li>request事件：建立TCP连接后，http模块底层将在数据流中抽象出HTTP请求和HTTP响应，当请求数据发送到服务器端，在解析出HTTP请求头后，将会触发该事件；在res.end()后，TCP连接可能将用于下一次请求响应。</li>
</ul>
<ul>
<li>close事件：与TCP服务器的行为一致，调用server.close()方法停止接受新的连接，当已有的连接都断开时，触发该事件；可以给server.close()传递一个回调函数来快速注册该事件</li>
</ul>
<ul>
<li>checkContinue事件：某些客户端在发送较大的数据时，并不会将数据直接发送，而是先发送一个头部带Expect: 100-continue的请求到服务器，服务器将会触发checkContinue事件；如果没有为服务器监听这个事件，服务器将会自动响应客户端100 Continue的状态码，表示接受数据上传；如果不接受数据的较多时，响应客户端400Bad Request拒绝客户端继续发送数据即可。需要注意的是，当该事件发生时不会触发request事件，两个事件之间互斥。当客户端收到100 Continue后重新发起请求时，才会触发request事件</li>
</ul>
<ul>
<li>connect事件：当客户端发起CONNECT请求时触发，而发起CONNECT请求通常在HTTP代理时出现；如果不监听该事件，发起该请求的连接将会关闭。</li>
</ul>
<ul>
<li>upgrade事件：当客户端要求升级连接的协议时，需要和服务器端协商，客户端会在请求头中带上Upgrade字段，服务器端会在接收到这样的请求时触发该事件。这在后文的WebSocket部分有详细流程的介绍。如果不监听该事件，发起该请求的连接将会关闭。</li>
</ul>
<ul>
<li>clientError事件：连接的客户端触发error事件时，这个错误会传递到服务器端，此时触发该事件。</li>
</ul>
<h3 id="7-3-3-HTTP客户端"><a href="#7-3-3-HTTP客户端" class="headerlink" title="7.3.3 HTTP客户端"></a>7.3.3 HTTP客户端</h3><p>在对服务器端的实现进行了描述后，HTTP客户端的原理几乎不用再描述，因为它就是服务器端服务模型的另一部分，处于HTTP的另一端，在整个报文的参与中，报文头和报文体由它产生。同时http模块提供了一个底层API：http.request(options, connect)，用于构造HTTP客户端。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">1334</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> +</div><div class="line">    res.statusCode);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">  res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(chunk);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">req.end();</div></pre></td></tr></table></figure>
<p>host：服务器的域名或IP地址，默认为localhost。<br>hostname：服务器名称。<br>port：服务器端口，默认为80。<br>localAddress：建立网络连接的本地网卡。<br>socketPath：Domain套接字路径。<br>method：HTTP请求方法，默认为GET。<br>path：请求路径，默认为/。<br>headers：请求头对象。<br>auth：Basic认证，这个值将被计算成请求头中的Authorization部分。</p>
<p>报文体的内容由请求对象的write()和end()方法实现：通过write()方法向连接中写入数据，通过end()方法告知报文结束。它与浏览器中的Ajax调用几近相同，Ajax的实质就是一个异步的网络HTTP请求。</p>
<p>HTTP客户端的响应对象与服务器端较为类似，在ClientRequest对象中，它的事件叫做response。ClientRequest在解析响应报文时，一解析完响应头就触发response事件，同时传递一个响应对象以供操作ClientResponse。后续响应报文体以只读流的方式提供，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">  res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(chunk);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于从响应读取数据与服务器端ServerRequest读取数据的行为较为类似，此处不再赘述。</p>
<p>如同服务器端的实现一般，http提供的ClientRequest对象也是基于TCP层实现的，在keepalive的情况下，一个底层会话连接可以多次用于请求。为了重用TCP连接，http模块包含一个默认的客户端代理对象http.globalAgent。它对每个服务器端（host + port）创建的连接进行了管理，默认情况下，通过ClientRequest对象对同一个服务器端发起的HTTP请求最多可以创建5个连接。它的实质是一个连接池，</p>
<p>调用HTTP客户端同时对一个服务器发起10次HTTP请求时，其实质只有5个请求处于并发状态，后续的请求需要等待某个请求完成服务后才真正发出。这与浏览器对同一个域名有下载连接数的限制是相同的行为。</p>
<p>如果你在服务器端通过ClientRequest调用网络中的其他HTTP服务，记得关注代理对象对网络请求的限制。一旦请求量过大，连接限制将会限制服务性能。如需要改变，可以在options中传递agent选项。默认情况下，请求会采用全局的代理对象，默认连接数限制的为5</p>
<p>我们既可以自行构造代理对象，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> agent = <span class="keyword">new</span> http.Agent(&#123;</div><div class="line">  <span class="attr">maxSockets</span>: <span class="number">10</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">1334</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">agent</span>: agent</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也可以设置agent选项为false值，以脱离连接池的管理，使得请求不受并发的限制。</p>
<p>Agent对象的sockets和requests属性分别表示当前连接池中使用中的连接数和处于等待状态的请求数，在业务中监视这两个值有助于发现业务状态的繁忙程度。</p>
<p>与服务器端对应的，HTTP客户端也有相应的事件。</p>
<ul>
<li>response：与服务器端的request事件对应的客户端在请求发出后得到服务器端响应时，会触发该事件。</li>
<li>socket：当底层连接池中建立的连接分配给当前请求对象时，触发该事件</li>
<li>connect：当客户端向服务器端发起CONNECT请求时，如果服务器端响应了200状态码，客户端将会触发该事件。</li>
<li>upgrade：客户端向服务器端发起Upgrade请求时，如果服务器端响应了101 Switching Protocols状态，客户端将会触发该事件。</li>
<li>continue：客户端向服务器端发起Expect:100-continue头信息，以试图发送较大数据量，如果服务器端响应100 Continue状态，客户端将触发该事件。</li>
</ul>
<h3 id="7-4-构建WebSocket服务"><a href="#7-4-构建WebSocket服务" class="headerlink" title="7.4 构建WebSocket服务"></a>7.4 构建WebSocket服务</h3><p>提到Node，不能错过的是WebSocket协议。它与Node之间的配合堪称完美，其理由有两条。<br>WebSocket客户端基于事件的编程模型与Node中自定义事件相差无几。WebSocket实现了客户端与服务器端之间的长连接，而Node事件驱动的方式十分擅长与大量的客户端保持高并发连接。</p>
<p>客户端与服务器端只建立一个TCP连接，可以使用更少的连接。<br>WebSocket服务器端可以推送数据到客户端，这远比HTTP请求响应模式更灵活、更高效。有更轻量级的协议头，减少数据传送量。</p>
<p>WebSocket最早是作为HTML5重要特性而出现的，最终在W3C和IETF的推动下，形成RFC<br>6455规范。现代浏览器大多都支持WebSocket协议，接下来我们用一段代码来展现WebSocket在客户端的应用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:12010/updates'</span>);</div><div class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (socket.bufferedAmount == <span class="number">0</span>) socket.send(getUpdateData());</div><div class="line">  &#125;, <span class="number">50</span>);</div><div class="line">&#125;;</div><div class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; <span class="comment">// TODO：event.data</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器与服务器端创建WebSocket协议请求，在请求完成后连接打开，每50毫秒向服务器端发送一次数据，同时可以通过onmessage()方法接收服务器端传来的数据。这行为与TCP客户端十分相似，相较于HTTP，它能够双向通信。浏览器一旦能够使用WebSocket，可以想象应用的使用空间极大。</p>
<p>在WebSocket之前，网页客户端与服务器端进行通信最高效的是Comet技术。实现Comet技术的细节是采用长轮询（long-polling）或iframe流。长轮询的原理是客户端向服务器端发起请求，服务器端只在超时或有数据响应时断开连接（res.end()）；客户端在收到数据或者超时后重新发起请求。这个请求行为拖着长长的尾巴，是故用Comet（彗星）来命名它。</p>
<p>使用WebSocket的话，网页客户端只需一个TCP连接即可完成双向通信，在服务器端与客户端频繁通信时，无须频繁断开连接和重发请求。连接可以得到高效应用，编程模型也十分简洁。</p>
<p>相比HTTP，WebSocket更接近于传输层协议，它并没有在HTTP的基础上模拟服务器端的推送，而是在TCP上定义独立的协议。让人迷惑的部分在于WebSocket的握手部分是由HTTP完成的，使人觉得它可能是基于HTTP实现的。</p>
<p>WebSocket协议主要分为两个部分：握手和数据传输</p>
<h3 id="7-4-1-WebSocket握手"><a href="#7-4-1-WebSocket握手" class="headerlink" title="7.4.1 WebSocket握手"></a>7.4.1 WebSocket握手</h3><p>WebSocket握手<br>客户端建立连接时，通过HTTP发起请求报文，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">GET/chat HTTP/1.1</div><div class="line">Host: server.example.com</div><div class="line">Upgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</div><div class="line">Sec-WebSocket-Protocol: chat, </div><div class="line">superchatSec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<p>与普通的HTTP请求协议略有区别的部分在于如下这些协议头：</p>
<ul>
<li>Upgrade: websocket</li>
<li>Connection: Upgrade上述两个字段表示请求服务器端升级协议为WebSocket。<br>其中Sec-WebSocket-Key用于安全校验：</li>
<li>Sec-WebSocket-Key:dGhlIHNhbXBsZSBub25jZQ==</li>
</ul>
<p>Sec-WebSocket-Key的值是随机生成的Base64编码的字符串。</p>
<p>服务器端接收到之后将其与字符串258EAFA5-E914-47DA-95CA-C5AB0DC85B11相连，形成字符串dGhlIHNhbXBsZSBub25jZQ==258EAFA5-E914-47DA-95CA-C5AB0DC85B11，然后通过sha1安全散列算法计算出结果后，再进行Base64编码，最后返回给客户端。这个算法如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> val =crypto.createHash(<span class="string">'sha1'</span>).update(key).digest(<span class="string">'base64'</span>);;</div></pre></td></tr></table></figure>
<p>另外，下面两个字段指定子协议和版本号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Sec-WebSocket-Protocol: chat,</div><div class="line">superchatSec-WebSocket-Version: 13</div></pre></td></tr></table></figure>
<p>服务器端在处理完请求后，响应如下报文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 101 Switching ProtocolsUpgrade: websocket</div><div class="line">Connection: Upgrade</div><div class="line">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</div><div class="line">Sec-WebSocket-Protocol: chat</div></pre></td></tr></table></figure>
<p>上面的报文告之客户端正在更换协议，更新应用层协议为WebSocket协议，并在当前的套接字连接上应用新协议。剩余的字段分别表示服务器端基于<code>Sec-WebSocket-Key</code> 生成的字符串和选中的子协议。客户端将会校验<code>Sec-WebSocket-Accept</code> 的值，如果成功，将开始接下来的数据传输。</p>
<p>一旦WebSocket握手成功，服务器端与客户端将会呈现对等的效果，都能接收和发送消息。</p>
<h3 id="7-4-2-WebSocket数据传输"><a href="#7-4-2-WebSocket数据传输" class="headerlink" title="7.4.2 WebSocket数据传输"></a>7.4.2 WebSocket数据传输</h3><p>WebSocket数据传输<br>在握手顺利完成后，当前连接将不再进行HTTP的交互，而是开始WebSocket的数据帧协议，实现客户端与服务器端的数据交换</p>
<p>握手完成后，客户端的onopen()将会被触发执行，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> opened()</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>服务器端则没有onopen()方法可言。为了完成TCP套接字事件到WebSocket事件的封装，需要在接收数据时进行处理，WebSocket的数据帧协议即是在底层data事件上封装完成的，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">WebSocket.prototype.setSocket = <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.socket = socket;</div><div class="line">  <span class="keyword">this</span>.socket.on(<span class="string">'data'</span>, <span class="keyword">this</span>.receiver);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样的数据发送时，也需要做封装操作，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">WebSocket.prototype.send =</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._send(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当客户端调用send()发送数据时，服务器端触发onmessage()；当服务器端调用send()发送数据时，客户端的onmessage()触发。当我们调用send()发送一条数据时，协议可能将这个数据封装为一帧或多帧数据，然后逐帧发送。</p>
<p>为了安全考虑，客户端需要对发送的数据帧进行掩码处理，服务器一旦收到无掩码帧（比如中间拦截破坏），连接将关闭。而服务器发送到客户端的数据帧则无须做掩码处理，同样，如果客户端收到带掩码的数据帧，连接也将关闭。</p>
<p>图7-7中为WebSocket数据帧的定义，每8位为一列，也即1个字节。其中每一位都有它的意义。<br>图7-7　WebSocket数据帧的定义</p>
<ul>
<li><code>fin</code> ： 如果这个数据帧是最后一帧，这个fin位为1，其余情况为0。当一个数据没有被分为多帧时，它既是第一帧也是最后一帧。</li>
<li><code>rsv1、rsv2、rsv3</code> ： 各为1位长，3个标识用于扩展，当有已协商的扩展时，这些值可能为1，其余情况为0。</li>
<li><code>opcode</code> ： 长为4位的操作码，可以用来表示0到15的值，用于解释当前数据帧。0表示附加数据帧，1表示文本数据帧，2表示二进制数据帧，8表示发送一个连接关闭的数据帧，9表示ping数据帧，10表示pong数据帧，其余值暂时没有定义。ping数据帧和pong数据帧用于心跳检测，当一端发送ping数据帧时，另一端必须发送pong数据帧作为响应，告知对方这一端仍然处于响应状态。</li>
<li><code>masked</code> ：表示是否进行掩码处理，长度为1。客户端发送给服务器端时为1，服务器端发送给客户端时为0。payload</li>
<li><code>length</code> ：一个7、7+16或7+64位长的数据位，标识数据的长度，如果值在0~125之间，那么该值就是数据的真实长度；如果值是126，则后面16位的值是数据的真实长度；如果值是127，则后面64位的值是数据的真实长度。</li>
<li><code>masking key</code> ：当masked为1时存在，是一个32位长的数据位，用于解密数据。payload data：我们的目标数据，位数为8的倍数。</li>
</ul>
<p>客户端发送消息时，需要构造一个或多个数据帧协议报文。由于hello world!较短，不存在分割为多个数据帧的情况，又由于hello world!会以文本的方式发送，它的payload length长度为96（12字节×8位/字节），二进制表示为1100000。</p>
<h3 id="7-4-3-小结"><a href="#7-4-3-小结" class="headerlink" title="7.4.3 小结"></a>7.4.3 小结</h3><p>在所有的WebSocket服务器端实现中，没有比Node更贴近WebSocket的使用方式了。它们的共性有以下内容。<br>基于事件的编程接口。基于JavaScript，以封装良好的WebSocket实现，API与客户端可以高度相似。<br>另外，Node基于事件驱动的方式使得它应对WebSocket这类长连接的应用场景可以轻松地处理大量并发请求。尽管Node没有内置WebSocket的库，但是社区的ws模块封装了WebSocket的底层实现。socket.io即是在它的基础上构建实现的。</p>
<h3 id="7-5-网络服务与安全"><a href="#7-5-网络服务与安全" class="headerlink" title="7.5 网络服务与安全"></a>7.5 网络服务与安全</h3><p>网络服务与安全</p>
<p>在网络中，数据在服务器端和客户端之间传递，由于是明文传递的内容，一旦在网络被人监控，数据就可能一览无余地展现在中间的窃听者面前。为此我们需要将数据加密后再进行网络传输，这样即使数据被截获和窃听，窃听者也无法知道数据的真实内容是什么。但是对于我们的应用层协议而言，如HTTP、FTP等，我们仍然希望能够透明地处理数据，而无须操心网络传输过程中的安全问题。在网景公司的NetScape浏览器推出之初就提出了 <code>SSL（Secure Sockets Layer，安全套接层）</code> 。SSL作为一种安全协议，它在传输层提供对网络连接加密的功能。对于应用层而言，它是透明的，数据在传递到应用层之前就已经完成了加密和解密的过程。最初的SSL应用在Web上，被服务器端和浏览器端同时支持，随后IETF将其标准化，称为 <code>TLS（Transport Layer Security，安全传输层协议）</code> 。</p>
<p>Node在网络安全上提供了3个模块，分别为<code>crypto</code> 、<code>tls</code>、<code>https</code>。其中<code>crypto</code> 主要用于加密解密，SHA1、MD5等加密算法都在其中有体现，在这里我们不用再提。真正用于网络的是另外两个模块，tls模块提供了与net模块类似的功能，区别在于它建立在TLS/SSL加密的TCP连接上。对于https而言，它完全与http模块接口一致，区别也仅在于它建立于安全的连接之上。</p>
<h3 id="7-5-1-TLS-SSL"><a href="#7-5-1-TLS-SSL" class="headerlink" title="7.5.1 TLS/SSL"></a>7.5.1 TLS/SSL</h3><p>密钥</p>
<p>TLS/SSL是一个公钥/私钥的结构，它是一个非对称的结构，每个服务器端和客户端都有自己的公私钥。</p>
<p>公钥用来加密要传输的数据，私钥用来解密接收到的数据。公钥和私钥是配对的，通过公钥加密的数据，只有通过私钥才能解密，所以在建立安全传输之前，客户端和服务器端之间需要互换公钥。客户端发送数据时要通过服务器端的公钥进行加密，服务器端发送数据时则需要客户端的公钥进行加密，如此才能完成加密解密的过程，如图7-8所示。图7-8　客户端和服务器端交换密钥Node在底层采用的是openssl实现TLS/SSL的，为此要生成公钥和私钥可以通过openssl完成。我们分别为服务器端和客户端生成私钥，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 生成服务器端私钥</div><div class="line">$ openssl genrsa -out server.key 1024</div><div class="line">// 生成客户端私钥</div><div class="line">$ openssl genrsa -out client.key 1024</div></pre></td></tr></table></figure>
<p>上述命令生成了两个1024位长的RSA私钥文件，我们可以通过它继续生成公钥，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ openssl rsa -in server.key -pubout -out server.pem$ openssl rsa -in</div><div class="line">client.key -pubout -out client.pem</div></pre></td></tr></table></figure>
<p>公私钥的非对称加密虽好，但是网络中依然可能存在窃听的情况，典型的例子是中间人攻击。客户端和服务器端在交换公钥的过程中，中间人对客户端扮演服务器端的角色，对服务器端扮演客户端的角色，因此客户端和服务器端几乎感受不到中间人的存在。为了解决这种问题，数据传输过程中还需要对得到的公钥进行认证，以确认得到的公钥是出自目标服务器。如果不能保证这种认证，中间人可能会将伪造的站点响应给用户，从而造成经济损失。图7-9是中间人攻击的示意图。图7-9　中间人攻击示意图</p>
<p>为了解决这个问题，TLS/SSL引入了数字证书来进行认证。与直接用公钥不同，数字证书中包含了服务器的名称和主机名、服务器的公钥、签名颁发机构的名称、来自签名颁发机构的签名。在连接建立前，会通过证书中的签名确认收到的公钥是来自目标服务器的，从而产生信任关系。</p>
<p>数字证书为了确保我们的数据安全，现在我们引入了一个第三方：<code>CA（CertificateAuthority，数字证书认证中心）</code> 。<br>CA的作用是为站点颁发证书，且这个证书中具有CA通过自己的公钥和私钥实现的签名。为了得到签名证书，服务器端需要通过自己的私钥生成CSR（Certificate Signing Request，证书签名请求）文件。CA机构将通过这个文件颁发属于该服务器端的签名证书，只要通过CA机构就能验证证书是否合法。通过CA机构颁发证书通常是一个烦琐的过程，需要付出一定的精力和费用。对于中小型企业而言，多半是采用自签名证书来构建安全网络的。所谓自签名证书，就是自己扮演CA机构，给自己的服务器端颁发签名证书。以下为生成私钥、生成CSR文件、通过私钥自签名生成证书的过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ openssl genrsa -out ca.key 1024</div><div class="line">$ openssl req -new -key ca.key -outca.csr</div><div class="line">$ openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</div></pre></td></tr></table></figure>
<p>图7-11　客户端通过CA验证服务器端证书的真伪过程示意图CA机构将证书颁发给服务器端后，证书在请求的过程中会被发送给客户端，客户端需要通过CA的证书验证真伪。如果是知名的CA机构，它们的证书一般预装在浏览器中。如果是自己扮演CA机构，颁发自有签名证书则不能享受这个福利，客户端需要获取到CA的证书才能进行验证。上述的过程中可以看出，签名证书是一环一环地颁发的，但是在CA那里的证书是不需要上级证书参与签名的，这个证书我们通常称为根证书。</p>
<h3 id="7-5-2-TLS服务"><a href="#7-5-2-TLS服务" class="headerlink" title="7.5.2 TLS服务"></a>7.5.2 TLS服务</h3><p>创建服务器端将构建服务所需要的证书都备齐之后，我们通过Node的tls模块来创建一个安全的TCP服务，这个服务是一个简单的echo服务，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>),</div><div class="line">  <span class="attr">requestCert</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> server = tls.createServer(options, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server connected'</span>, stream.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">  stream.write(<span class="string">"welcome!\n"</span>);</div><div class="line">  stream.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  stream.pipe(stream);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'serverbound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>启动上述服务后，通过下面的命令可以测试证书是否正常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ openssls_client -connect 127.0.0.1:8000</div></pre></td></tr></table></figure>
<h3 id="7-5-3-HTTPS服务"><a href="#7-5-3-HTTPS服务" class="headerlink" title="7.5.3 HTTPS服务"></a>7.5.3 HTTPS服务</h3><p>创建HTTPS服务只比HTTP服务多一个选项配置，其余地方几乎相同，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启动之后通过curl进行测试</p>
<p>由于是自签名的证书，curl工具无法验证服务器端证书是否正确，所以出现了上述的抛错，要解决上面的问题有两种方式。一种是加-k选项，让curl工具忽略掉证书的验证，这样的结果是数据依然会通过公钥加密传输，但是无法保证对方是可靠的，会存在中间人攻击的潜在风险。</p>
<p>另一种解决的方式是给curl设置–cacert选项，告知CA证书使之完成对服务器证书的验证，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">8000</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">options.agent = <span class="keyword">new</span> https.Agent(options);</div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  res.setEncoding(<span class="string">'utf-8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(d);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">req.end();</div><div class="line"></div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p>Node基于事件驱动和非阻塞设计，在分布式环境中尤其能发挥出它的特长，基于事件驱动可以实现与大量的客户端进行连接，非阻塞设计则让它可以更好地提升网络的响应吞吐。Node提供了相对底层的网络调用，以及基于事件的编程接口，使得开发者在这些模块上十分轻松地构建网络应用。下一章我们将在本章的基础上探讨具体的Web应用。</p>
<h2 id="第08章-构建Web应用"><a href="#第08章-构建Web应用" class="headerlink" title="第08章 构建Web应用"></a>第08章 构建Web应用</h2><p>如今看来，Web应用俨然是互联网的主角，伴随Web 1.0、Web 2.0一路走来，HTTP占据了网络中的大多数流量。随着移动互联网时代的到来，Web又开始在移动浏览器上发挥光和热。在Web标准化的努力过后，Web又开始朝向应用化发展，JavaScript在前端变得炙手可热</p>
<h3 id="8-1-基础功能"><a href="#8-1-基础功能" class="headerlink" title="8.1 基础功能"></a>8.1 基础功能</h3><p>非阻塞</p>
<p>事件机制</p>
<p>对于一个Web应用而言，仅仅只是上面这样的响应远远达不到业务的需求。在具体的业务中，我们可能有如下这些需求。</p>
<ul>
<li>请求方法的判断。URL的路径解析。</li>
<li>URL中查询字符串解析。Cookie的解析。</li>
<li>Basic认证。表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<p>除此之外，可能还有<code>Session（会话）</code> 的需求。尽管Node提供的底层API相对来说比较简单，但要完成业务需求，还需要大量的工作，仅仅一个request事件似乎无法满足这些需求。但是要实现这些需求并非难事，一切的一切，都从如下这个函数展开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第4章中，我们曾对高阶函数有过简单的介绍：我们的应用可能无限地复杂，但是只要最终结果返回一个上面的函数作为参数，传递给createServer()方法作为request事件的侦听器就可以了。</p>
<h3 id="8-1-1-请求方法"><a href="#8-1-1-请求方法" class="headerlink" title="8.1.1 请求方法"></a>8.1.1 请求方法</h3><p>在Web应用中，最常见的请求方法是GET和POST，除此之外，还有HEAD、DELETE、PUT、CONNECT等方法。请求方法存在于报文的第一行的第一个单词，通常是大写</p>
<p>如下为一个报文头的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0(x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337 </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>在解析请求报文的时候，将报文头抽取出来，设置为req.method。通常，我们只需要处理GET和POST两类请求方法，但是在RESTful类Web服务中请求方法十分重要，因为它会决定资源的操作行为。PUT代表新建一个资源，POST表示要更新一个资源，GET表示查看一个资源，而DELETE表示删除一个资源。</p>
<p>我们可以通过请求方法来决定响应行为，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (req.method) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'POST'</span>:</div><div class="line">      update(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE'</span>:</div><div class="line">      remove(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'PUT'</span>:</div><div class="line">      create(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'GET'</span>:</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      get(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-1-2-路径解析"><a href="#8-1-2-路径解析" class="headerlink" title="8.1.2 路径解析"></a>8.1.2 路径解析</h3><p>路径解析</p>
<p>除了根据请求方法来进行分发外，最常见的请求判断莫过于路径的判断了。路径部分存在于报文的第一行的第二部分，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>将其解析为req.url。一般而言，完整的URL地址是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</div></pre></td></tr></table></figure>
<p>客户端代理（浏览器）会将这个地址解析成报文，将路径和查询部分放在报文第一行。需要注意的是，hash部分会被丢弃，不会存在于报文的任何地方。</p>
<h3 id="8-1-3-查询字符串"><a href="#8-1-3-查询字符串" class="headerlink" title="8.1.3 查询字符串"></a>8.1.3 查询字符串</h3><p>查询字符串</p>
<p>查询字符串位于路径之后，在地址栏中路径后的?foo=bar&amp;baz=val字符串就是查询字符串。这个字符串会跟随在路径后，形成请求报文首行的第二部分。这部分内容经常需要为业务逻辑所用，Node提供了querystring模块用于处理这部分数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> query = querystring.parse(url.parse(req.url).query);</div></pre></td></tr></table></figure>
<p>更简洁的方法是给url.parse()传递第二个参数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> query = url.parse(req.url, <span class="literal">true</span>).query;</div></pre></td></tr></table></figure>
<p>它会将foo=bar&amp;baz=val解析为一个JSON对象，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  foo: 'bar',</div><div class="line">  baz: 'val'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-1-4-Cookie"><a href="#8-1-4-Cookie" class="headerlink" title="8.1.4 Cookie"></a>8.1.4 Cookie</h2><h3 id="初识Cookie"><a href="#初识Cookie" class="headerlink" title="初识Cookie"></a>初识Cookie</h3><p>在Web应用中，请求路径和查询字符串对业务至关重要，通过它们已经可以进行很多业务操作了，但是HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。如何标识和认证一个用户，最早的方案就是Cookie（曲奇饼）了</p>
<p>Cookie的处理分为如下几步。</p>
<ul>
<li>服务器向客户端发送Cookie。浏览器将Cookie保存。<br>之后每次浏览器都会将Cookie发向服务器端。客户端发送的Cookie在请求报文的Cookie字段中，我们可以通过curl工具构造这个字段，如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -v -H &quot;Cookie: foo=bar; baz=val&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>“<a href="http://127.0.0.1:1337/path?foo=bar&amp;foo=baz" target="_blank" rel="external">http://127.0.0.1:1337/path?foo=bar&amp;foo=baz</a>“</p>
<p>HTTP_Parser会将所有的报文字段解析到req.headers上，那么Cookie就是req.headers.cookie。根据规范中的定义，Cookie值的格式是key=value; key2=value2形式的，如果我们需要Cookie，解析它也十分容易，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (!cookie) &#123;</div><div class="line">    <span class="keyword">return</span> cookies;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> list = cookie.split(<span class="string">';'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> pair = list[i].split(<span class="string">'='</span>);</div><div class="line">    cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cookies;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在业务逻辑代码执行之前，我们将其挂载在req对象上，让业务代码可以直接访问，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.cookies = parseCookie(req.headers.cookie);</div><div class="line">  hande(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何请求报文中，如果Cookie值没有isVisit，都会收到“欢迎第一次来到动物园”这样的响应。这里提出一个问题，如果识别到用户没有访问过我们的站点，那么我们的站点是否应该告诉客户端已经访问过的标识呢？告知客户端的方式是通过响应报文实现的，响应的Cookie值在Set-Cookie字段中。它的格式与请求中的格式不太相同，规范中对它的定义如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: name=value; </div><div class="line">Path=/; </div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT;</div><div class="line">Domain=.domain.com;</div></pre></td></tr></table></figure>
<p>其中name=value是必须包含的部分，其余部分皆是可选参数。这些可选参数将会影响浏览器在后续将Cookie发送给服务器端的行为</p>
<p>path表示这个Cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。<br>Expires和Max-Age是用来告知浏览器这个Cookie何时过期的，如果不设置该选项，在关闭浏览器时会丢失掉这个Cookie。如果设置了过期时间，浏览器将会把Cookie内容写入到磁盘中并保存，下次打开浏览器依旧有效。Expires的值是一个UTC格式的时间字符串，告知浏览器此Cookie何时将过期，Max-Age则告知浏览器此Cookie多久后过期。前者一般而言不存在问题，但是如果服务器端的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age告知浏览器这条Cookie多久之后过期，而不是一个具体的时间点。</p>
<p>HttpOnly告知浏览器不允许通过脚本document.cookie去更改这个Cookie值，事实上，设置HttpOnly之后，这个值在document.cookie中不可见。但是在HTTP请求的过程中，依然会发送这个Cookie到服务器端。</p>
<p>Secure。当Secure值为true时，在HTTP中是无效的，在HTTPS中才有效，表示创建的Cookie只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以很难被窃听到。</p>
<p>略改前文的访问逻辑，我们就能轻松地判断用户的状态了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.cookies.isVisit) &#123;</div><div class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, serialize(<span class="string">'isVisit'</span>, <span class="string">'1'</span>));</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>值得注意的是，Set-Cookie是较少的，在报头中可能存在多个字段。为此res.setHeader的第二个参数可以是一个数组，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, [serialize(<span class="string">'foo'</span>, <span class="string">'bar'</span>), serialize(<span class="string">'baz'</span>, <span class="string">'val'</span>)]);</div></pre></td></tr></table></figure>
<p>这会在报文头部中形成两条Set-Cookie字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: foo=bar</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div><div class="line">Set-Cookie: baz=val</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div></pre></td></tr></table></figure>
<h3 id="Cookie的性能影响"><a href="#Cookie的性能影响" class="headerlink" title="Cookie的性能影响"></a>Cookie的性能影响</h3><p>由于Cookie的实现机制，一旦服务器端向客户端发送了设置Cookie的意图，除非Cookie过期，否则客户端每次请求都会发送这些Cookie到服务器端，一旦设置的Cookie过多，将会导致报头较大。大多数的Cookie并不需要每次都用上，因为这会造成带宽的部分浪费。</p>
<p><strong>在YSlow的性能优化规则中有这么一条：减小Cookie的大小</strong></p>
<p>更严重的情况是，如果在域名的根节点设置Cookie，几乎所有子路径下的请求都会带上这些Cookie，这些Cookie在某些情况下是有用的，但是在有些情况下是完全无用的。其中以静态文件最为典型，静态文件的业务定位几乎不关心状态，Cookie对它而言几乎是无用的，但是一旦有Cookie设置到相同域下，它的请求中就会带上Cookie。</p>
<p>好在Cookie在设计时限定了它的域，只有域名相同时才会发送。</p>
<p><strong>所以YSlow中有另外一条规则用来避免Cookie带来的性能影响。为静态组件使用不同的域名</strong></p>
<p>简而言之就是，为不需要Cookie的组件换个域名可以实现减少无效Cookie的传输。所以很多网站的静态文件会有特别的域名，使得业务相关的Cookie不再影响静态资源。当然换用额外的域名带来的好处不只这点，还可以突破浏览器下载线程数量的限制，因为域名不同，可以将下载线程数翻倍。但是换用额外域名还是有一定的缺点的，那就是将域名转换为IP需要进行DNS查询，多一个域名就多一次DNS查询。</p>
<p><strong>YSlow中有这样一条规则：减少DNS查询</strong></p>
<p>看起来减少DNS查询和使用不同的域名是冲突的两条规则，但是好在现今的浏览器都会进行DNS缓存，以削弱这个副作用的影响。</p>
<p>Cookie除了可以通过后端添加协议头的字段设置外，在前端浏览器中也可以通过JavaScript进行修改，浏览器将Cookie通过document.cookie暴露给了JavaScript。前端在修改Cookie之后，后续的网络请求中就会携带上修改过后的值</p>
<p>目前，广告和在线统计领域是最为依赖Cookie的，通过嵌入第三方的广告或者统计脚本，将Cookie和当前页面绑定，这样就可以标识用户，得到用户的浏览行为，广告商就可以定向投放广告了。尽管这样的行为看起来很可怕，但是从Cookie的原理来说，它只能做到标识，而不能做任何具有破坏性的事情。如果依然担心自己站点的用户被记录下行为，那就不要挂任何第三方的脚本</p>
<h3 id="8-1-5-Session"><a href="#8-1-5-Session" class="headerlink" title="8.1.5 Session"></a>8.1.5 Session</h3><p>通过Cookie，浏览器和服务器可以实现状态的记录。但是Cookie并非是完美的，前文提及的体积过大就是一个显著的问题，最为严重的问题是Cookie可以在前后端进行修改，因此数据就极容易被篹改和伪造。如果服务器端有部分逻辑是根据Cookie中的isVIP字段进行判断，那么一个普通用户通过修改Cookie就可以轻松享受到VIP服务了。综上所述，Cookie对于敏感数据的保护是无效的</p>
<p>为了解决Cookie敏感数据的问题，Session应运而生。Session的数据只保留在服务器端，客户端无法修改，这样数据的安全性得到一定的保障，数据也无须在协议中每次都被传递。</p>
<p>虽然在服务器端存储数据十分方便，但是如何将每个客户和服务器中的数据一一对应起来，这里有常见的两种实现方式。</p>
<ul>
<li>第一种：基于Cookie来实现用户和数据的映射</li>
</ul>
<p>虽然将所有数据都放在Cookie中不可取，但是将口令放在Cookie中还是可以的。因为口令一旦被篹改，就丢失了映射关系，也无法修改服务器端存在的数据了。并且Session的有效期通常较短，普遍的设置是20分钟，如果在20分钟内客户端和服务器端没有交互产生，服务器端就将数据删除。由于数据过期时间较短，且在服务器端存储数据，因此安全性相对较高。那么口令是如何产生的呢？一旦服务器端启用了Session，它将约定一个键值作为Session的口令，这个值可以随意约定，比如Connect默认采用connect_uid，Tomcat会采用jsessionid等。一旦服务器检查到用户请求Cookie中没有携带该值，它就会为之生成一个值，这个值是唯一且不重复的值，并设定超时时间。</p>
<p>以下为生成session的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sessions = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> key = <span class="string">'session_id'</span>;</div><div class="line"><span class="keyword">var</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> session = &#123;&#125;;</div><div class="line">  session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random();</div><div class="line">  session.cookie = &#123;</div><div class="line">    <span class="attr">expire</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">  &#125;;</div><div class="line">  sessions[session.id] = session;</div><div class="line">  <span class="keyword">return</span> session;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>每个请求到来时，检查Cookie中的口令与服务器端的数据，如果过期，就重新生成，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">        <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">      req.session = session;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">      req.session = generate();</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">    req.session = generate();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">handle(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然仅仅重新生成Session还不足以完成整个流程，还需要在响应给客户端时设置新的值，以便下次请求时能够对应服务器端的数据。这里我们hack响应对象的writeHead()方法，在它的内部注入设置Cookie的逻辑，</p>
<p>如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session =</div><div class="line">    serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies,</div><div class="line">    session</div><div class="line">  ];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>session在前后端进行对应的过程就完成了。这样的业务逻辑可以判断和设置session，以此来维护用户与服务器端的关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.session.isVisit) &#123;</div><div class="line">    res.session.isVisit = <span class="literal">true</span>;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在session中保存的数据比直接在Cookie中保存数据要安全得多。这种实现方案依赖Cookie实现，而且也是目前大多数Web应用的方案。如果客户端禁止使用Cookie，这个世界上大多数的网站将无法实现登录等操作。</p>
<p>第二种：通过查询字符串来实现浏览器端和服务器端数据的对应</p>
<p>它的原理是检查请求的查询字符串，如果没有值，会先生成新的带值的URL，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getURL = <span class="function"><span class="keyword">function</span> (<span class="params">_url, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = url.parse(_url, <span class="literal">true</span>);</div><div class="line">  obj.query[key] = value;</div><div class="line">  <span class="keyword">return</span> url.format(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后形成跳转，让客户端重新发起请求，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, url);</div><div class="line">    res.writeHead(<span class="number">302</span>);</div><div class="line">    res.end();</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> id = req.query[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    <span class="keyword">var</span> session = generate();</div><div class="line">    redirect(getURL(req.url, key, session.id));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123; <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">        req.session =</div><div class="line">          session;</div><div class="line">        handle(req, res);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">        <span class="keyword">var</span> session = generate();</div><div class="line">        redirect(getURL(req.url, key, session.id));</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">      <span class="keyword">var</span> session = generate();</div><div class="line">      redirect(getURL(req.url, key, session.id));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户访问<a href="http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`" target="_blank" rel="external">http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`</a> 参数，就会将用户跳转到<code>http://localhost/pathname?session_id=12344567</code>这样一个类似的地址。如果浏览器收到302状态码和Location报头，就会重新发起新的请求，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt; HTTP/1.1 302 Moved Temporarily </div><div class="line">&lt; Location: /pathname?session_id=12344567</div></pre></td></tr></table></figure>
<p>这样，新的请求到来时就能通过Session的检查，除非内存中的数据过期。</p>
<p>有的服务器在客户端禁用Cookie时，会采用这种方案实现退化。通过这种方案，无须在响应时设置Cookie。但是这种方案带来的风险远大于基于Cookie实现的风险，因为只要将地址栏中的地址发给另外一个人，那么他就拥有跟你相同的身份。Cookie的方案在换了浏览器或者换了电脑之后无法生效，相对较为安全。</p>
<p>还有一种比较有趣的处理Session的方式是利用HTTP请求头中的ETag，同样对于更换浏览器和电脑后也是无效的</p>
<h3 id="Session与内存"><a href="#Session与内存" class="headerlink" title="Session与内存"></a>Session与内存</h3><p>在上面的示例代码中，我们都将Session数据直接存在变量sessions中，它位于内存中。然而在第5章的内存控制部分，我们分析了为什么Node会存在内存限制，这里将数据存放在内存中将会带来极大的隐患，如果用户增多，我们很可能就接触到了内存限制的上限，并且内存中的数据量加大，必然会引起垃圾回收的频繁扫描，引起性能问题。另一个问题则是我们可能为了利用多核CPU而启动多个进程，这个细节在第9章中有详细描述。用户请求的连接将可能随意分配到各个进程中，Node的进程与进程之间是不能直接共享内存的，用户的Session可能会引起错乱。<br>为了解决性能问题和Session数据无法跨进程共享的问题，常用的方案是将Session集中化，将原本可能分散在多个进程里的数据，统一转移到集中的数据存储中。目前常用的工具是Redis、Memcached等，通过这些高效的缓存，Node进程无须在内部维护数据对象，垃圾回收问题和内存限制问题都可以迎刃而解，并且这些高速缓存设计的缓存过期策略更合理更高效，比在Node中自行设计缓存策略更好。</p>
<p>采用第三方缓存来存储Session引起的一个问题是会引起网络访问。理论上来说访问网络中的数据要比访问本地磁盘中的数据速度要慢，因为涉及到握手、传输以及网络终端自身的磁盘I/O等，尽管如此但依然会采用这些高速缓存的理由有以下几条：</p>
<ul>
<li>Node与缓存服务保持长连接，而非频繁的短连接，握手导致的延迟只影响初始化。</li>
<li>高速缓存直接在内存中进行数据存储和访问。</li>
<li>缓存服务通常与Node进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小。</li>
</ul>
<p>尽管采用专门的缓存服务会比直接在内存中访问慢，但其影响小之又小，带来的好处却远远大于直接在Node中保存数据。为此，一旦Session需要异步的方式获取，代码就需要略作调整，变成异步的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">    handle(req, res);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, sesson</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (session) &#123;</div><div class="line">          <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">            <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">            <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">          req.session = session;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">          req.session = generate();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">        req.session = generate();</div><div class="line">      &#125;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在响应时，将新的session保存回缓存中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session = serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies =</div><div class="line">    <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies); <span class="comment">// 保存回缓存</span></div><div class="line">  store.save(req.session);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Session与安全"><a href="#Session与安全" class="headerlink" title="Session与安全"></a>Session与安全</h3><p>从前文可以知道，尽管我们的数据都放置在后端了，使得它能保障安全，但是无论通过Cookie，还是查询字符串的实现方式，Session的口令依然保存在客户端，这里会存在口令被盗用的情况。如果Web应用的用户十分多，自行设计的随机算法的一些口令值就有理论机会命中有效的口令值。一旦口令被伪造，服务器端的数据也可能间接被利用。这里提到的Session的安全，就主要指如何让这个口令更加安全。有一种做法是将这个口令通过私钥加密进行签名，使得伪造的成本较高。客户端尽管可以伪造口令值，但是由于不知道私钥值，签名信息很难伪造。如此，我们只要在响应时将口令和签名进行对比，如果签名非法，我们将服务器端的数据立即过期即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto.createHmac(<span class="string">'sha256'</span>, secret)</div><div class="line">    .update(val).digest(<span class="string">'base64'</span>)</div><div class="line">    .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在响应时，设置session值到Cookie中或者跳转URL中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> val = sign(req.sessionID,secret);</div><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val));</div></pre></td></tr></table></figure>
<p>接收请求时，检查签名，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 取出口令部分进行签名，对比用户提交的值 </span></div><div class="line"><span class="keyword">var</span> unsign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = val.slice(<span class="number">0</span>, val.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">  <span class="keyword">return</span> sign(str, secret) == val ? str : <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样一来，即使攻击者知道口令中.号前的值是服务器端Session的ID值，只要不知道secret私钥的值，就无法伪造签名信息，以此实现对Session的保护。该方法被Connect中间件框架所使用，保护好私钥，就是在保障自己Web应用的安全。</p>
<p>当然，将口令进行签名是一个很好的解决方案，但是如果攻击者通过某种方式获取了一个真实的口令和签名，他就能实现身份的伪装。一种方案是将客户端的某些独有信息与口令作为原值，然后签名，这样攻击者一旦不在原始的客户端上进行访问，就会导致签名失败。这些独有信息包括用户IP和用户代理（User Agent）。但是原始用户与攻击者之间也存在上述信息相同的可能性，如局域网出口IP相同，相同的客户端信息等，不过纳入这些考虑能够提高安全性。通常而言，将口令存在Cookie中不容易被他人获取，但是一些别的漏洞可能导致这个口令被泄漏，典型的有XSS漏洞，下面简单介绍一下如何通过XSS拿到用户的口令，实现伪造。</p>
<p><code>XSS</code>的全称是<code>跨站脚本攻击（CrossSite Scripting，通常简称为XSS）</code></p>
<p>通常都是由网站开发者决定哪些脚本可以执行在浏览器端，不过XSS漏洞会让别的脚本执行。它的主要形成原因多数是用户的输入没有被转义，而被直接执行。</p>
<p>这段代码将该用户的Cookie提交给了c.com站点，这个站点就是攻击者的服务器，他也就能拿到该用户的Session口令。然后他在客户端中用这个口令伪造Cookie，从而实现了伪装用户的身份。如果该用户是网站管理员，就可能造成极大的危害。</p>
<p>XSS造成的危害远远不止这些，这里不再过多介绍。在这个案例中，如果口令中有用户的客户端信息的签名，即使口令被泄漏，除非攻击者与用户客户端完全相同，否则不能实现伪造。</p>
<h3 id="8-1-6-缓存"><a href="#8-1-6-缓存" class="headerlink" title="8.1.6 缓存"></a>8.1.6 缓存</h3><p>我们知道软件的架构经历过一次<code>C/S</code> 模式到<code>B/S</code>模式的演变，在HTTP之上构建的应用，其客户端除了比普通桌面应用具备更轻量的升级和部署等特性外，在跨平台、跨浏览器、跨设备上也具备独特优势。传统客户端在安装后的应用过程中仅仅需要传输数据，Web应用还需要传输构成界面的组件（HTML、JavaScript、CSS文件等）。这部分内容在大多数场景下并不经常变更，却需要在每次的应用中向客户端传递，如果不进行处理，那么它将造成不必要的带宽浪费。如果网络速度较差，就需要花费更多时间来打开页面，对于用户的体验将会造成一定影响。因此节省不必要的传输，对用户和对服务提供者来说都有好处。</p>
<p>为了提高性能，<strong>YSlow</strong>中也提到几条关于缓存的规则。添加Expires或Cache-Control到报文头中。<br>配置ETags。让Ajax可缓存。<br>这里我们将展开这几条规则的来源。如何让浏览器缓存我们的静态资源，这也是一个需要由服务器与浏览器共同协作完成的事情。</p>
<p>RFC 2616规范对此有一定的描述，只有遵循约定，整个缓存机制才能有效建立。通常来说，POST、DELETE、PUT这类带行为性的请求操作一般不做任何缓存，大多数缓存只应用在GET请求中。使用缓存的流程如图8-1所示。</p>
<p>简单来讲，本地没有文件时，浏览器必然会请求服务器端的内容，并将这部分内容放置在本地的某个缓存目录中。在第二次请求时，它将对本地文件进行检查，如果不能确定这份本地文件是否可以直接使用，它将会发起一次条件请求。所谓条件请求，就是在普通的GET请求报文中，附带If-Modified-Since字段，如下所示：<br>If-Modified-Since: Sun, 03 Feb 2013 06:01:12 GMT它将询问服务器端是否有更新的版本，本地文件的最后修改时间。如果服务器端没有新的版本，只需响应一个304状态码，客户端就使用本地版本。如果服务器端有新的版本，就将新的内容发送给客户端，客户端放弃本地版本。代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.stat(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastModified =</div><div class="line">      stat.mtime.toUTCString();</div><div class="line">    <span class="keyword">if</span> (lastModified === req.headers[<span class="string">'if-modified-since'</span>]) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>,</div><div class="line">        <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lastModified =</div><div class="line">          stat.mtime.toUTCString();</div><div class="line">        res.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">        res.writeHead(<span class="number">200</span>,</div><div class="line">          <span class="string">"Ok"</span>);</div><div class="line">        res.end(file);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的条件请求采用时间戳的方式实现，但是时间戳有一些缺陷存在。<br>文件的时间戳改动但内容并不一定改动。时间戳只能精确到秒级别，更新频繁的内容将无法生效。<br>为此HTTP1.1中引入了ETag来解决这个问题。ETag的全称是Entity Tag，由服务器端生成，服务器端可以决定它的生成规则。如果根据文件内容生成散列值，那么条件请求将不会受到时间戳改动造成的带宽浪费。下面是根据内容生成散列值的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getHash = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">  <span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>与If-Modified-Since/Last-Modified不同的是，ETag的请求和响应是If-None-Match/ETag，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(file);</div><div class="line">    <span class="keyword">var</span> noneMatch = req[<span class="string">'if-none-match'</span>];</div><div class="line">    <span class="keyword">if</span> (hash === noneMatch) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.setHeader(<span class="string">"ETag"</span>, hash);</div><div class="line">      res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">      res.end(file);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器在收到<br>ETag: “83-1359871272000”</p>
<p>这样的请求后，在下次的请求中，会将其放置在请求头中：</p>
<p>If-None-Match:”83-1359871272000”。</p>
<p>尽管条件请求可以在文件内容没有修改的情况下节省带宽，但是它依然会发起一个HTTP请求，使得客户端依然会花一定时间来等待响应。可见最好的方案就是连条件请求都不用发起。那么如何让浏览器知晓是否能直接使用本地版本呢？答案就是服务器端在响应内容时，让浏览器明确地将内容缓存起来。如同YSlow规则里提到的，在响应里设置Expires或Cache-Control头，浏览器将根据该值进行缓存。那么这两个值有何区别呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    expires.setTime(expires.getTime() + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Expires是一个GMT格式的时间字符串。浏览器在接到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求。YUI3的CDN实践是缓存文件在10年后过期。但是Expires的缺陷在于浏览器与服务器之间的时间可能不一致，这可能会带来一些问题，比如文件提前过期，或者到期后并没有被删除。</p>
<p>Cache-Control以更丰富的形式，实现相同的功能，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">"Cache-Control"</span>,</div><div class="line">      <span class="string">"max-age="</span> + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码为Cache-Control设置了max-age值，它比Expires优秀的地方在于，Cache-Control能够避免浏览器端与服务器端时间不同步带来的不一致性问题，只要进行类似倒计时的方式计算过期时间即可。除此之外，Cache-Control的值还能设置public、private、no-cache、no-store等能够更精细地控制缓存的选项。<br>由于在HTTP1.0时还不支持max-age，如今的服务器端在模块的支持下多半同时对Expires和Cache-Control进行支持。在浏览器中如果两个值同时存在，且被同时支持时，max-age会覆盖Expires。</p>
<h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>虽然我们知晓了如何设置缓存，以达到节省网络带宽的目的，但是缓存一旦设定，当服务器端意外更新内容时，却无法通知客户端更新。这使得我们在使用缓存时也要为其设定版本号，所幸浏览器是根据URL进行缓存，那么一旦内容有所更新时，我们就让浏览器发起新的URL请求，使得新内容能够被客户端更新。一般的更新机制有如下两种。每次发布，路径中跟随Web应用的版本号：<code>http://url.com/?v=20130501</code> .<br>每次发布，路径中跟随该文件内容的hash值：<code>http://url.com/?hash=afadfadwe</code> 。大体来说，根据文件内容的hash值进行缓存淘汰会更加高效，因为文件内容不一定随着Web应用的版本而更新，而内容没有更新时，版本号的改动导致的更新毫无意义，因此以文件内容形成的hash值更精准。</p>
<h3 id="8-1-7-Basic认证"><a href="#8-1-7-Basic认证" class="headerlink" title="8.1.7 Basic认证"></a>8.1.7 Basic认证</h3><h3 id="Basic认证"><a href="#Basic认证" class="headerlink" title="Basic认证"></a>Basic认证</h3><p>Basic认证是当客户端与服务器端进行请求时，允许通过用户名和密码实现的一种身份认证方式。这里简要介绍它的原理和它在服务器端通过Node处理的流程。</p>
<p>如果一个页面需要Basic认证，它会检查请求报文头中的Authorization字段的内容，该字段的值由认证方式和加密值构成，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ curl -v &quot;http://user:pass@www.baidu.com/&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; GET / HTTP/1.1</div><div class="line">&gt; Authorization: Basic dXNlcjpwYXNz </div><div class="line">&gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">&gt; Host: www.baidu.com </div><div class="line">&gt; Accept: */*</div></pre></td></tr></table></figure>
<p>在Basic认证中，它会将用户和密码部分组合： <code>username\+ &quot;:&quot; + password</code>。然后进行Base64编码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Buffer(username + <span class="string">':'</span> + password).toString(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果用户首次访问该网页，URL地址中也没携带认证内容，那么浏览器会响应一个401未授权的状态码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> auth = req.headers[<span class="string">'authorization'</span>] || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> parts = auth.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> method = parts[<span class="number">0</span>] || <span class="string">''</span>; <span class="comment">// Basic var encoded = parts[1] || ''; //</span></div><div class="line">  dXNlcjpwYXNz</div><div class="line">  <span class="keyword">var</span> decoded = <span class="keyword">new</span> Buffer(encoded,</div><div class="line">    <span class="string">'base64'</span>).toString(<span class="string">'utf-8'</span>).split(<span class="string">":"</span>);</div><div class="line">  <span class="keyword">var</span> user = decoded[<span class="number">0</span>]; <span class="comment">//</span></div><div class="line">  user</div><div class="line">  <span class="keyword">var</span> pass = decoded[<span class="number">1</span>]; <span class="comment">// pass if (!checkUser(user, pass)) &#123;</span></div><div class="line">  res.setHeader(<span class="string">'WWW-Authenticate'</span>, <span class="string">'Basic realm="Secure Area"'</span>);</div><div class="line">  res.writeHead(<span class="number">401</span>);</div><div class="line">  res.end();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  handle(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，响应头中的<code>WWW-Authenticate</code> 字段告知浏览器采用什么样的认证和加密方式。一般而言，未认证的情况下，浏览器会弹出对话框进行交互式提交认证信息，如图8-2所示。<br>图8-2　浏览器弹出的交互式提交认证信息的对话框当认证通过，服务器端响应200状态码之后，浏览器会保存用户名和密码口令，在后续的请求中都携带上Authorization信息。<br>Basic认证有太多的缺点，它虽然经过Base64加密后在网络中传送，但是这近乎于明文，十分危险，一般只有在HTTPS的情况下才会使用。不过Basic认证的支持范围十分广泛，几乎所有的浏览器都支持它。为了改进Basic认证，RFC 2069规范提出了摘要访问认证，它加入了服务器端随机数来保护认证过程，在此不做深入的解释。</p>
<h3 id="8-2-数据上传"><a href="#8-2-数据上传" class="headerlink" title="8.2 数据上传"></a>8.2 数据上传</h3><h3 id="数据上传"><a href="#数据上传" class="headerlink" title="数据上传"></a>数据上传</h3><p>上述的内容基本都集中在HTTP请求报文头中，适用于GET请求和大多数其他请求。头部报文中的内容已经能够让服务器端进行大多数业务逻辑操作了，但是单纯的头部报文无法携带大量的数据，在业务中，我们往往需要接收一些数据，比如表单提交、文件提交、JSON上传、XML上传等。</p>
<p>Node的http模块只对HTTP报文的头部进行了解析，然后触发request事件。如果请求中还带有内容部分（如POST请求，它具有报头和内容），内容部分需要用户自行接收和解析。通过报头的Transfer-Encoding或Content-Length即可判断请求中是否带有内容，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hasBody = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'transfer-encoding'</span> <span class="keyword">in</span> req.headers || <span class="string">'content-length'</span> <span class="keyword">in</span> req.headers;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在HTTP_Parser解析报头结束后，报文内容部分会通过data事件触发，我们只需以流的方式处理即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> buffers = [];</div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">      buffers.push(chunk);</div><div class="line">    &#125;);</div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      req.rawBody = Buffer.concat(buffers).toString();</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将接收到的Buffer列表转化为一个Buffer对象后，再转换为没有乱码的字符串，暂时挂置在req.rawBody处。</p>
<h3 id="8-2-1-表单数据"><a href="#8-2-1-表单数据" class="headerlink" title="8.2.1 表单数据"></a>8.2.1 表单数据</h3><h3 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h3><p>最为常见的数据提交就是通过网页表单提交数据到服务器端，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;</div><div class="line">  &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;</div><div class="line">  &lt;br /&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>默认的表单提交，请求头中的<code>Content-Type</code> 字段值为<code>application/x-www-form-urlencoded</code> ，</p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure>
<p>由于它的报文体内容跟查询字符串相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">foo=bar&amp;baz=val</div></pre></td></tr></table></figure>
<p>因此解析它十分容易：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/x-www-form-urlencoded'</span>) &#123;</div><div class="line">    req.body = querystring.parse(req.rawBody);</div><div class="line">  &#125;</div><div class="line">  todo(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>后续业务中直接访问<code>req.body</code>就可以得到表单中提交的数据。</p>
<h3 id="8-2-2-其他格式"><a href="#8-2-2-其他格式" class="headerlink" title="8.2.2 其他格式"></a>8.2.2 其他格式</h3><p>除了表单数据外，常见的提交还有JSON和XML文件等，判断和解析他们的原理都比较相似，都是依据Content-Type中的值决定，其中JSON类型的值为application/json，XML的值为application/xml。</p>
<p>需要注意的是，在Content-Type中可能还附带如下所示的编码信息：Content-Type: application/json; charset=utf-8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> str = req.headers[<span class="string">'content-type'</span>] || <span class="string">''</span>; <span class="keyword">return</span> str.split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>解析XML文件稍微复杂一点，但是社区有支持XML文件到JSON对象转换的库，这里以xml2js模块为例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xml2js = <span class="built_in">require</span>(<span class="string">'xml2js'</span>);</div><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">    xml2js.parseString(req.rawBody, <span class="function"><span class="keyword">function</span> (<span class="params">err, xml</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// 异常内容，响应Bad request res.writeHead(400);</span></div><div class="line">        res.end(<span class="string">'Invalid XML'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      req.body = xml;</div><div class="line">      todo(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-2-3-附件上传"><a href="#8-2-3-附件上传" class="headerlink" title="8.2.3 附件上传"></a>8.2.3 附件上传</h3><p>附件上传<br>除了常见的表单和特殊格式的内容提交外，还有一种比较独特的表单。通常的表单，其内容可以通过urlencoded的方式编码内容形成报文体，再发送给服务器端，但是业务场景往往需要用户直接提交文件。在前端HTML代码中，特殊表单与普通表单的差异在于该表单中可以含有file类型的控件，以及需要指定表单属性enctype为multipart/form-data，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>浏览器在遇到multipart/form-data表单提交时，构造的请求报文与普通表单完全不同。首先它的报头中最为特殊的如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: multipart/form-data; </div><div class="line">boundary=AaB03x </div><div class="line">Content-Length: 18231</div></pre></td></tr></table></figure>
<p>它代表本次提交的内容是由多部分构成的，其中<code>boundary=AaB03x</code>指定的是每部分内容的分界符，AaB03x是随机生成的一段字符串，报文体的内容将通过在它前面添加–进行分割，报文结束时在它前后都加上–表示结束。另外，Content-Length的值必须确保是报文体的长度。假设上面的表单选择了一个名为diveintonode.js的文件，并进行提交上传，那么生成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;username&quot;\r\n</div><div class="line">\r\n Jackson Tian\r\n</div><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ... </div><div class="line">--AaB03x--</div></pre></td></tr></table></figure>
<p>普通的表单控件的报文体如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n</div><div class="line">Content-Disposition: form-data; name=&quot;username&quot;\r\n \r\n</div><div class="line">Jackson Tian\r\n</div></pre></td></tr></table></figure>
<p>文件控件形成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ...</div></pre></td></tr></table></figure>
<p>一旦我们知晓报文是如何构成的，那么解析它就变得十分容易。值得注意的一点是，由于是文件上传，那么像普通表单、JSON或XML那样先接收内容再解析的方式将变得不可接受。接收大小未知的数据量时，我们需要十分谨慎，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> done = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'application/json'</span>) &#123;</div><div class="line">      parseJSON(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">      parseXML(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      parseMultipart(req, done);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们将req这个流对象直接交给对应的解析方法，由解析方法自行处理上传的内容，或接收内容并保存在内存中，或流式处理掉</p>
<p>这里要介绍到的模块是formidable。它基于流式处理解析报文，将接收到的文件写入到系统的临时文件夹中，并返回对应的路径，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">      form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields,</span></span></div><div class="line">        files) &#123;</div><div class="line">        req.body = fields;</div><div class="line">        req.files = files;</div><div class="line">        handle(req, res);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此在业务逻辑中只要检查req.body和req.files中的内容即可。</p>
<h3 id="8-2-4-数据上传与安全"><a href="#8-2-4-数据上传与安全" class="headerlink" title="8.2.4 数据上传与安全"></a>8.2.4 数据上传与安全</h3><h3 id="数据上传与安全"><a href="#数据上传与安全" class="headerlink" title="数据上传与安全"></a>数据上传与安全</h3><p>Node提供了相对底层的API，通过它构建各种各样的Web应用都是相对容易的，但是在Web应用中，不得不重视与数据上传相关的安全问题。由于Node与前端JavaScript的近缘性，前端JavaScript甚至可以上传到服务器直接执行，但在这里我们并不讨论这样危险的动作，而是介绍内存和CSRF相关的安全问题。</p>
<ol>
<li>内存限制<br>在解析表单、JSON和XML部分，我们采取的策略是先保存用户提交的所有数据，然后再解析处理，最后才传递给业务逻辑。这种策略存在潜在的问题是，它仅仅适合数据量小的提交请求，一旦数据量过大，将发生内存被占光的情况。攻击者通过客户端能够十分容易地模拟伪造大量数据，如果攻击者每次提交1 MB的内容，那么只要并发请求数量一大，内存就会很快地被吃光。要解决这个问题主要有两个方案。</li>
</ol>
<p>限制上传内容的大小，一旦超过限制，停止接收数据，并响应400状态码。通过流式解析，将数据流导向到磁盘中，Node只保留文件路径等小数据。</p>
<p>流式处理在上文的文件上传中已经有所体现，这里介绍一下Connect中采用的上传数据量的限制方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bytes = <span class="number">1024</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> received = <span class="number">0</span>,</div><div class="line">    <span class="keyword">var</span> len = req.headers[<span class="string">'content-length'</span>] ?</div><div class="line">      <span class="built_in">parseInt</span>(req.headers[<span class="string">'content-length'</span>], <span class="number">10</span>) : <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 如果内容超过长度限制，返回请求实体过长的状态码 if (len &amp;&amp; len &gt;</span></div><div class="line">  bytes) &#123;</div><div class="line">  res.writeHead(<span class="number">413</span>);</div><div class="line">  res.end();</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// limit</span></div><div class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  received += chunk.length;</div><div class="line">  <span class="keyword">if</span> (received &gt; bytes) &#123; <span class="comment">// 停止接收数据，触发end()</span></div><div class="line">    req.destroy();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">handle(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码中我们可以看到，数据是由包含Content-Length的请求报文判断是否长度超过限制的，超过则直接响应413状态码。对于没有Content-Length的请求报文，略微简略一点，在每个data事件中判定即可。一旦超过限制值，服务器停止接收新的数据片段。如果是JSON文件或XML文件，极有可能无法完成解析。对于上线的Web应用，添加一个上传大小限制十分有利于保护服务器，在遭遇攻击时，能镇定从容应对。</p>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF的全称是<code>Cross-Site Request Forgery</code>，中文意思为<code>跨站请求伪造</code>。前文提及了服务器端与客户端通过Cookie来标识和认证用户，通常而言，用户通过浏览器访问服务器端的Session ID是无法被第三方知道的，但是CSRF的攻击者并不需要知道Session ID就能让用户中招。为了详细解释CSRF攻击是怎样一个过程，这里以一个留言的例子来说明。假设某个网站有这样一个留言程序，提交留言的接口如下所示：</p>
<p><a href="http://domain_a.com/guestbook" target="_blank" rel="external">http://domain_a.com/guestbook</a></p>
<p>用户通过POST提交content字段就能成功留言。</p>
<p>服务器端会自动从Session数据中判断是谁提交的数据，补足username和updatedAt两个字段后向数据库中写入数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = req.body.content || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> username = req.session.username;</div><div class="line">  <span class="keyword">var</span> feedback = &#123;</div><div class="line">    <span class="attr">username</span>: username,</div><div class="line">    <span class="attr">content</span>: content,</div><div class="line">    <span class="attr">updatedAt</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;;</div><div class="line">  db.save(feedback, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'Ok'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正常的情况下，谁提交的留言，就会在列表中显示谁的信息。如果某个攻击者发现了这里的接口存在CSRF漏洞，那么他就可以在另一个网站（<a href="http://domain_b.com/attack）上构造了一个表单提交，如下所示：" target="_blank" rel="external">http://domain_b.com/attack）上构造了一个表单提交，如下所示：</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#test"</span>).submit();</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下，攻击者只要引诱某个<code>domain_a</code>的登录用户访问这个<code>domain_b</code>的网站，就会自动提交一个留言。由于在提交到<code>domain_a</code>的过程中，浏览器会将<code>domain_a</code>的Cookie发送到服务器，尽管这个请求是来自domain_b的，但是服务器并不知情，用户也不知情。以上过程就是一个CSRF攻击的过程。这里的示例仅仅是一个留言的漏洞，如果出现漏洞的是转账的接口，那么其危害程度可想而知。</p>
<p>尽管通过Node接收数据提交十分容易，但是安全问题还是不容忽视。好在CSRF并非不可防御，解决CSRF攻击的方案有添加随机值的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> generateRandom = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> crypto.randomBytes(<span class="built_in">Math</span>.ceil(len *</div><div class="line">      <span class="number">3</span> / <span class="number">4</span>))</div><div class="line">    .toString(<span class="string">'base64'</span>).slice(<span class="number">0</span>, len);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也就是说，为每个请求的用户，在Session中赋予一个随机值，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div></pre></td></tr></table></figure>
<p>在做页面渲染的过程中，将这个_csrf值告之前端，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">value</span>=<span class="string">"&lt;%=_csrf%&gt;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于该值是一个随机值，攻击者构造出相同的随机值的难度相当大，所以我们只需要在接收端做一次校验就能轻易地识别出该请求是否为伪造的，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div><div class="line">  <span class="keyword">var</span> _csrf = req.body._csrf;</div><div class="line">  <span class="keyword">if</span> (token !== _csrf) &#123;</div><div class="line">    res.writeHead(<span class="number">403</span>);</div><div class="line">    res.end(<span class="string">"禁止访问"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_csrf字段也可以存在于查询字符串或者请求头中。</p>
<h3 id="8-3-1-文件路径型"><a href="#8-3-1-文件路径型" class="headerlink" title="8.3.1 文件路径型"></a>8.3.1 文件路径型</h3><p>在MVC模式流行起来之前，根据文件路径执行动态脚本也是基本的路由方式，它的处理原理是Web服务器根据URL路径找到对应的文件，如/index.asp或/index.php。Web服务器根据文件名后缀去寻找脚本的解析器，并传入HTTP请求的上下文。</p>
<h3 id="8-3-2-MVC"><a href="#8-3-2-MVC" class="headerlink" title="8.3.2 MVC"></a>8.3.2 MVC</h3><p>在MVC流行之前，主流的处理方式都是通过文件路径进行处理的，甚至以为是常态。直到有一天开发者发现用户请求的URL路径原来可以跟具体脚本所在的路径没有任何关系。</p>
<p>MVC模型的主要思想是将业务逻辑按职责分离，主要分为以下几种。</p>
<ul>
<li>控制器（Controller），一组行为的集合。</li>
<li>模型（Model），数据相关的操作和封装。</li>
<li>视图（View），视图的渲染。</li>
</ul>
<p>它的工作模式如下说明。</p>
<p>路由解析，根据URL寻找到对应的控制器和行为。<br>行为调用相关的模型，进行数据操作。<br>数据操作结束后，调用视图和相关数据进行页面渲染，输出到客户端。</p>
<p>如何根据URL做路由映射，这里有两个分支实现。一种方式是通过手工关联映射，一种是自然关联映射。前者会有一个对应的路由文件来将URL映射到对应的控制器，后者没有这样的文件。<br>图8-3　分层模式</p>
<p>手工映射<br>手工映射除了需要手工配置路由外较为原始外，它对URL的要求十分灵活，几乎没有格式上的限制。</p>
<p>手工映射十分方便，由于它对URL十分灵活，所以我们可以将两个路径都映射到相同的业务逻辑，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/user/setting'</span>, exports.setting);</div><div class="line">use(<span class="string">'/setting/user'</span>, exports.setting);</div><div class="line"><span class="comment">// 甚至 use('/setting/user/jacksontian',exports.setting);</span></div></pre></td></tr></table></figure>
<p>正则匹配对于简单的路径，采用上述的硬匹配方式即可，但是如下的路径请求就完全无法满足需求了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/jacksontian</div><div class="line">/profile/hoover</div></pre></td></tr></table></figure>
<p>这些请求需要根据不同的用户显示不同的内容，这里只有两个用户，假如系统中存在成千上万个用户，我们就不太可能去手工维护所有用户的路由请求，因此正则匹配应运而生，我们期望通过以下的方式就可以匹配到任意用户：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>于是我们改进我们的匹配方式，在通过use注册路由时需要将路径转换为一个正则表达式，然后通过它来进行匹配，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  path = path</div><div class="line">    .concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>).replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>)</div><div class="line">    .replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture, optional, star</span>) </span>&#123;</div><div class="line">      slash = slash || <span class="string">''</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) + <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述正则表达式十分复杂，总体而言，它能实现如下的匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/:username =&gt; /profile/jacksontian, </div><div class="line">/profile/hoover /user.:ext =&gt; /user.xml, /user.json</div></pre></td></tr></table></figure>
<p>现在我们重新改进注册部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以及匹配部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">if</span> (route[<span class="number">0</span>].exec(pathname)) &#123;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 处理404请求 handle404(req, res);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="7-5-3-HTTPS服务-1"><a href="#7-5-3-HTTPS服务-1" class="headerlink" title="7.5.3 HTTPS服务"></a>7.5.3 HTTPS服务</h3><p>创建HTTPS服务只比HTTP服务多一个选项配置，其余地方几乎相同，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>启动之后通过curl进行测试</p>
<p>由于是自签名的证书，curl工具无法验证服务器端证书是否正确，所以出现了上述的抛错，要解决上面的问题有两种方式。一种是加-k选项，让curl工具忽略掉证书的验证，这样的结果是数据依然会通过公钥加密传输，但是无法保证对方是可靠的，会存在中间人攻击的潜在风险。</p>
<p>另一种解决的方式是给curl设置–cacert选项，告知CA证书使之完成对服务器证书的验证，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  <span class="attr">hostname</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">8000</span>,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'GET'</span>,</div><div class="line">  <span class="attr">key</span>: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">  <span class="attr">cert</span>: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">  <span class="attr">ca</span>: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">options.agent = <span class="keyword">new</span> https.Agent(options);</div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  res.setEncoding(<span class="string">'utf-8'</span>);</div><div class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(d);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">req.end();</div><div class="line"></div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="7-6-总结-1"><a href="#7-6-总结-1" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p>Node基于事件驱动和非阻塞设计，在分布式环境中尤其能发挥出它的特长，基于事件驱动可以实现与大量的客户端进行连接，非阻塞设计则让它可以更好地提升网络的响应吞吐。Node提供了相对底层的网络调用，以及基于事件的编程接口，使得开发者在这些模块上十分轻松地构建网络应用。下一章我们将在本章的基础上探讨具体的Web应用。</p>
<h2 id="第08章-构建Web应用-1"><a href="#第08章-构建Web应用-1" class="headerlink" title="第08章 构建Web应用"></a>第08章 构建Web应用</h2><p>如今看来，Web应用俨然是互联网的主角，伴随Web 1.0、Web 2.0一路走来，HTTP占据了网络中的大多数流量。随着移动互联网时代的到来，Web又开始在移动浏览器上发挥光和热。在Web标准化的努力过后，Web又开始朝向应用化发展，JavaScript在前端变得炙手可热</p>
<h3 id="8-1-基础功能-1"><a href="#8-1-基础功能-1" class="headerlink" title="8.1 基础功能"></a>8.1 基础功能</h3><p>非阻塞</p>
<p>事件机制</p>
<p>对于一个Web应用而言，仅仅只是上面这样的响应远远达不到业务的需求。在具体的业务中，我们可能有如下这些需求。</p>
<ul>
<li>请求方法的判断。URL的路径解析。</li>
<li>URL中查询字符串解析。Cookie的解析。</li>
<li>Basic认证。表单数据的解析。</li>
<li>任意格式文件的上传处理。</li>
</ul>
<p>除此之外，可能还有<code>Session（会话）</code> 的需求。尽管Node提供的底层API相对来说比较简单，但要完成业务需求，还需要大量的工作，仅仅一个request事件似乎无法满足这些需求。但是要实现这些需求并非难事，一切的一切，都从如下这个函数展开：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></div><div class="line">  &#125;);</div><div class="line">  res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在第4章中，我们曾对高阶函数有过简单的介绍：我们的应用可能无限地复杂，但是只要最终结果返回一个上面的函数作为参数，传递给createServer()方法作为request事件的侦听器就可以了。</p>
<h3 id="8-1-1-请求方法-1"><a href="#8-1-1-请求方法-1" class="headerlink" title="8.1.1 请求方法"></a>8.1.1 请求方法</h3><p>在Web应用中，最常见的请求方法是GET和POST，除此之外，还有HEAD、DELETE、PUT、CONNECT等方法。请求方法存在于报文的第一行的第一个单词，通常是大写</p>
<p>如下为一个报文头的示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1 </div><div class="line">User-Agent: curl/7.24.0(x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: 127.0.0.1:1337 </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>在解析请求报文的时候，将报文头抽取出来，设置为req.method。通常，我们只需要处理GET和POST两类请求方法，但是在RESTful类Web服务中请求方法十分重要，因为它会决定资源的操作行为。PUT代表新建一个资源，POST表示要更新一个资源，GET表示查看一个资源，而DELETE表示删除一个资源。</p>
<p>我们可以通过请求方法来决定响应行为，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (req.method) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'POST'</span>:</div><div class="line">      update(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE'</span>:</div><div class="line">      remove(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'PUT'</span>:</div><div class="line">      create(req, res);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'GET'</span>:</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      get(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-1-2-路径解析-1"><a href="#8-1-2-路径解析-1" class="headerlink" title="8.1.2 路径解析"></a>8.1.2 路径解析</h3><p>路径解析</p>
<p>除了根据请求方法来进行分发外，最常见的请求判断莫过于路径的判断了。路径部分存在于报文的第一行的第二部分，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /path?foo=bar HTTP/1.1</div></pre></td></tr></table></figure>
<p><code>HTTP_Parser</code>将其解析为req.url。一般而言，完整的URL地址是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</div></pre></td></tr></table></figure>
<p>客户端代理（浏览器）会将这个地址解析成报文，将路径和查询部分放在报文第一行。需要注意的是，hash部分会被丢弃，不会存在于报文的任何地方。</p>
<h3 id="8-1-3-查询字符串-1"><a href="#8-1-3-查询字符串-1" class="headerlink" title="8.1.3 查询字符串"></a>8.1.3 查询字符串</h3><p>查询字符串</p>
<p>查询字符串位于路径之后，在地址栏中路径后的?foo=bar&amp;baz=val字符串就是查询字符串。这个字符串会跟随在路径后，形成请求报文首行的第二部分。这部分内容经常需要为业务逻辑所用，Node提供了querystring模块用于处理这部分数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> query = querystring.parse(url.parse(req.url).query);</div></pre></td></tr></table></figure>
<p>更简洁的方法是给url.parse()传递第二个参数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> query = url.parse(req.url, <span class="literal">true</span>).query;</div></pre></td></tr></table></figure>
<p>它会将foo=bar&amp;baz=val解析为一个JSON对象，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  foo: 'bar',</div><div class="line">  baz: 'val'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-1-4-Cookie-1"><a href="#8-1-4-Cookie-1" class="headerlink" title="8.1.4 Cookie"></a>8.1.4 Cookie</h2><h3 id="初识Cookie-1"><a href="#初识Cookie-1" class="headerlink" title="初识Cookie"></a>初识Cookie</h3><p>在Web应用中，请求路径和查询字符串对业务至关重要，通过它们已经可以进行很多业务操作了，但是HTTP是一个无状态的协议，现实中的业务却是需要一定的状态的，否则无法区分用户之间的身份。如何标识和认证一个用户，最早的方案就是Cookie（曲奇饼）了</p>
<p>Cookie的处理分为如下几步。</p>
<ul>
<li>服务器向客户端发送Cookie。浏览器将Cookie保存。<br>之后每次浏览器都会将Cookie发向服务器端。客户端发送的Cookie在请求报文的Cookie字段中，我们可以通过curl工具构造这个字段，如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">curl -v -H &quot;Cookie: foo=bar; baz=val&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>“<a href="http://127.0.0.1:1337/path?foo=bar&amp;foo=baz" target="_blank" rel="external">http://127.0.0.1:1337/path?foo=bar&amp;foo=baz</a>“</p>
<p>HTTP_Parser会将所有的报文字段解析到req.headers上，那么Cookie就是req.headers.cookie。根据规范中的定义，Cookie值的格式是key=value; key2=value2形式的，如果我们需要Cookie，解析它也十分容易，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> parseCookie = <span class="function"><span class="keyword">function</span> (<span class="params">cookie</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (!cookie) &#123;</div><div class="line">    <span class="keyword">return</span> cookies;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> list = cookie.split(<span class="string">';'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> pair = list[i].split(<span class="string">'='</span>);</div><div class="line">    cookies[pair[<span class="number">0</span>].trim()] = pair[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cookies;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在业务逻辑代码执行之前，我们将其挂载在req对象上，让业务代码可以直接访问，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.cookies = parseCookie(req.headers.cookie);</div><div class="line">  hande(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何请求报文中，如果Cookie值没有isVisit，都会收到“欢迎第一次来到动物园”这样的响应。这里提出一个问题，如果识别到用户没有访问过我们的站点，那么我们的站点是否应该告诉客户端已经访问过的标识呢？告知客户端的方式是通过响应报文实现的，响应的Cookie值在Set-Cookie字段中。它的格式与请求中的格式不太相同，规范中对它的定义如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: name=value; </div><div class="line">Path=/; </div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT;</div><div class="line">Domain=.domain.com;</div></pre></td></tr></table></figure>
<p>其中name=value是必须包含的部分，其余部分皆是可选参数。这些可选参数将会影响浏览器在后续将Cookie发送给服务器端的行为</p>
<p>path表示这个Cookie影响到的路径，当前访问的路径不满足该匹配时，浏览器则不发送这个Cookie。<br>Expires和Max-Age是用来告知浏览器这个Cookie何时过期的，如果不设置该选项，在关闭浏览器时会丢失掉这个Cookie。如果设置了过期时间，浏览器将会把Cookie内容写入到磁盘中并保存，下次打开浏览器依旧有效。Expires的值是一个UTC格式的时间字符串，告知浏览器此Cookie何时将过期，Max-Age则告知浏览器此Cookie多久后过期。前者一般而言不存在问题，但是如果服务器端的时间和客户端的时间不能匹配，这种时间设置就会存在偏差。为此，Max-Age告知浏览器这条Cookie多久之后过期，而不是一个具体的时间点。</p>
<p>HttpOnly告知浏览器不允许通过脚本document.cookie去更改这个Cookie值，事实上，设置HttpOnly之后，这个值在document.cookie中不可见。但是在HTTP请求的过程中，依然会发送这个Cookie到服务器端。</p>
<p>Secure。当Secure值为true时，在HTTP中是无效的，在HTTPS中才有效，表示创建的Cookie只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以很难被窃听到。</p>
<p>略改前文的访问逻辑，我们就能轻松地判断用户的状态了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.cookies.isVisit) &#123;</div><div class="line">    res.setHeader(<span class="string">'Set-Cookie'</span>, serialize(<span class="string">'isVisit'</span>, <span class="string">'1'</span>));</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>值得注意的是，Set-Cookie是较少的，在报头中可能存在多个字段。为此res.setHeader的第二个参数可以是一个数组，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, [serialize(<span class="string">'foo'</span>, <span class="string">'bar'</span>), serialize(<span class="string">'baz'</span>, <span class="string">'val'</span>)]);</div></pre></td></tr></table></figure>
<p>这会在报文头部中形成两条Set-Cookie字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Set-Cookie: foo=bar</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div><div class="line">Set-Cookie: baz=val</div><div class="line">Path=/</div><div class="line">Expires=Sun, 23-Apr-23 09:01:35 GMT</div><div class="line">Domain=.domain.com</div></pre></td></tr></table></figure>
<h3 id="Cookie的性能影响-1"><a href="#Cookie的性能影响-1" class="headerlink" title="Cookie的性能影响"></a>Cookie的性能影响</h3><p>由于Cookie的实现机制，一旦服务器端向客户端发送了设置Cookie的意图，除非Cookie过期，否则客户端每次请求都会发送这些Cookie到服务器端，一旦设置的Cookie过多，将会导致报头较大。大多数的Cookie并不需要每次都用上，因为这会造成带宽的部分浪费。</p>
<p><strong>在YSlow的性能优化规则中有这么一条：减小Cookie的大小</strong></p>
<p>更严重的情况是，如果在域名的根节点设置Cookie，几乎所有子路径下的请求都会带上这些Cookie，这些Cookie在某些情况下是有用的，但是在有些情况下是完全无用的。其中以静态文件最为典型，静态文件的业务定位几乎不关心状态，Cookie对它而言几乎是无用的，但是一旦有Cookie设置到相同域下，它的请求中就会带上Cookie。</p>
<p>好在Cookie在设计时限定了它的域，只有域名相同时才会发送。</p>
<p><strong>所以YSlow中有另外一条规则用来避免Cookie带来的性能影响。为静态组件使用不同的域名</strong></p>
<p>简而言之就是，为不需要Cookie的组件换个域名可以实现减少无效Cookie的传输。所以很多网站的静态文件会有特别的域名，使得业务相关的Cookie不再影响静态资源。当然换用额外的域名带来的好处不只这点，还可以突破浏览器下载线程数量的限制，因为域名不同，可以将下载线程数翻倍。但是换用额外域名还是有一定的缺点的，那就是将域名转换为IP需要进行DNS查询，多一个域名就多一次DNS查询。</p>
<p><strong>YSlow中有这样一条规则：减少DNS查询</strong></p>
<p>看起来减少DNS查询和使用不同的域名是冲突的两条规则，但是好在现今的浏览器都会进行DNS缓存，以削弱这个副作用的影响。</p>
<p>Cookie除了可以通过后端添加协议头的字段设置外，在前端浏览器中也可以通过JavaScript进行修改，浏览器将Cookie通过document.cookie暴露给了JavaScript。前端在修改Cookie之后，后续的网络请求中就会携带上修改过后的值</p>
<p>目前，广告和在线统计领域是最为依赖Cookie的，通过嵌入第三方的广告或者统计脚本，将Cookie和当前页面绑定，这样就可以标识用户，得到用户的浏览行为，广告商就可以定向投放广告了。尽管这样的行为看起来很可怕，但是从Cookie的原理来说，它只能做到标识，而不能做任何具有破坏性的事情。如果依然担心自己站点的用户被记录下行为，那就不要挂任何第三方的脚本</p>
<h3 id="8-1-5-Session-1"><a href="#8-1-5-Session-1" class="headerlink" title="8.1.5 Session"></a>8.1.5 Session</h3><p>通过Cookie，浏览器和服务器可以实现状态的记录。但是Cookie并非是完美的，前文提及的体积过大就是一个显著的问题，最为严重的问题是Cookie可以在前后端进行修改，因此数据就极容易被篹改和伪造。如果服务器端有部分逻辑是根据Cookie中的isVIP字段进行判断，那么一个普通用户通过修改Cookie就可以轻松享受到VIP服务了。综上所述，Cookie对于敏感数据的保护是无效的</p>
<p>为了解决Cookie敏感数据的问题，Session应运而生。Session的数据只保留在服务器端，客户端无法修改，这样数据的安全性得到一定的保障，数据也无须在协议中每次都被传递。</p>
<p>虽然在服务器端存储数据十分方便，但是如何将每个客户和服务器中的数据一一对应起来，这里有常见的两种实现方式。</p>
<ul>
<li>第一种：基于Cookie来实现用户和数据的映射</li>
</ul>
<p>虽然将所有数据都放在Cookie中不可取，但是将口令放在Cookie中还是可以的。因为口令一旦被篹改，就丢失了映射关系，也无法修改服务器端存在的数据了。并且Session的有效期通常较短，普遍的设置是20分钟，如果在20分钟内客户端和服务器端没有交互产生，服务器端就将数据删除。由于数据过期时间较短，且在服务器端存储数据，因此安全性相对较高。那么口令是如何产生的呢？一旦服务器端启用了Session，它将约定一个键值作为Session的口令，这个值可以随意约定，比如Connect默认采用connect_uid，Tomcat会采用jsessionid等。一旦服务器检查到用户请求Cookie中没有携带该值，它就会为之生成一个值，这个值是唯一且不重复的值，并设定超时时间。</p>
<p>以下为生成session的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sessions = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> key = <span class="string">'session_id'</span>;</div><div class="line"><span class="keyword">var</span> EXPIRES = <span class="number">20</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> session = &#123;&#125;;</div><div class="line">  session.id = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="built_in">Math</span>.random();</div><div class="line">  session.cookie = &#123;</div><div class="line">    <span class="attr">expire</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES</div><div class="line">  &#125;;</div><div class="line">  sessions[session.id] = session;</div><div class="line">  <span class="keyword">return</span> session;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>每个请求到来时，检查Cookie中的口令与服务器端的数据，如果过期，就重新生成，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">        <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">        <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">      req.session = session;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">      req.session = generate();</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">    req.session = generate();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">handle(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然仅仅重新生成Session还不足以完成整个流程，还需要在响应给客户端时设置新的值，以便下次请求时能够对应服务器端的数据。这里我们hack响应对象的writeHead()方法，在它的内部注入设置Cookie的逻辑，</p>
<p>如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session =</div><div class="line">    serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies = <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies,</div><div class="line">    session</div><div class="line">  ];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>session在前后端进行对应的过程就完成了。这样的业务逻辑可以判断和设置session，以此来维护用户与服务器端的关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!req.session.isVisit) &#123;</div><div class="line">    res.session.isVisit = <span class="literal">true</span>;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'欢迎第一次来到动物园'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'动物园再次欢迎你'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样在session中保存的数据比直接在Cookie中保存数据要安全得多。这种实现方案依赖Cookie实现，而且也是目前大多数Web应用的方案。如果客户端禁止使用Cookie，这个世界上大多数的网站将无法实现登录等操作。</p>
<p>第二种：通过查询字符串来实现浏览器端和服务器端数据的对应</p>
<p>它的原理是检查请求的查询字符串，如果没有值，会先生成新的带值的URL，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getURL = <span class="function"><span class="keyword">function</span> (<span class="params">_url, key, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = url.parse(_url, <span class="literal">true</span>);</div><div class="line">  obj.query[key] = value;</div><div class="line">  <span class="keyword">return</span> url.format(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后形成跳转，让客户端重新发起请求，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> redirect = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">'Location'</span>, url);</div><div class="line">    res.writeHead(<span class="number">302</span>);</div><div class="line">    res.end();</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> id = req.query[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    <span class="keyword">var</span> session = generate();</div><div class="line">    redirect(getURL(req.url, key, session.id));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> session = sessions[id];</div><div class="line">    <span class="keyword">if</span> (session) &#123;</div><div class="line">      <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123; <span class="comment">// 更新超时时间</span></div><div class="line">        session.cookie.expire = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">        req.session =</div><div class="line">          session;</div><div class="line">        handle(req, res);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">        <span class="keyword">var</span> session = generate();</div><div class="line">        redirect(getURL(req.url, key, session.id));</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">      <span class="keyword">var</span> session = generate();</div><div class="line">      redirect(getURL(req.url, key, session.id));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户访问<a href="http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`" target="_blank" rel="external">http://localhost/pathname时，如果服务器端发现查询字符串中不带`session_id`</a> 参数，就会将用户跳转到<code>http://localhost/pathname?session_id=12344567</code>这样一个类似的地址。如果浏览器收到302状态码和Location报头，就会重新发起新的请求，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt; HTTP/1.1 302 Moved Temporarily </div><div class="line">&lt; Location: /pathname?session_id=12344567</div></pre></td></tr></table></figure>
<p>这样，新的请求到来时就能通过Session的检查，除非内存中的数据过期。</p>
<p>有的服务器在客户端禁用Cookie时，会采用这种方案实现退化。通过这种方案，无须在响应时设置Cookie。但是这种方案带来的风险远大于基于Cookie实现的风险，因为只要将地址栏中的地址发给另外一个人，那么他就拥有跟你相同的身份。Cookie的方案在换了浏览器或者换了电脑之后无法生效，相对较为安全。</p>
<p>还有一种比较有趣的处理Session的方式是利用HTTP请求头中的ETag，同样对于更换浏览器和电脑后也是无效的</p>
<h3 id="Session与内存-1"><a href="#Session与内存-1" class="headerlink" title="Session与内存"></a>Session与内存</h3><p>在上面的示例代码中，我们都将Session数据直接存在变量sessions中，它位于内存中。然而在第5章的内存控制部分，我们分析了为什么Node会存在内存限制，这里将数据存放在内存中将会带来极大的隐患，如果用户增多，我们很可能就接触到了内存限制的上限，并且内存中的数据量加大，必然会引起垃圾回收的频繁扫描，引起性能问题。另一个问题则是我们可能为了利用多核CPU而启动多个进程，这个细节在第9章中有详细描述。用户请求的连接将可能随意分配到各个进程中，Node的进程与进程之间是不能直接共享内存的，用户的Session可能会引起错乱。<br>为了解决性能问题和Session数据无法跨进程共享的问题，常用的方案是将Session集中化，将原本可能分散在多个进程里的数据，统一转移到集中的数据存储中。目前常用的工具是Redis、Memcached等，通过这些高效的缓存，Node进程无须在内部维护数据对象，垃圾回收问题和内存限制问题都可以迎刃而解，并且这些高速缓存设计的缓存过期策略更合理更高效，比在Node中自行设计缓存策略更好。</p>
<p>采用第三方缓存来存储Session引起的一个问题是会引起网络访问。理论上来说访问网络中的数据要比访问本地磁盘中的数据速度要慢，因为涉及到握手、传输以及网络终端自身的磁盘I/O等，尽管如此但依然会采用这些高速缓存的理由有以下几条：</p>
<ul>
<li>Node与缓存服务保持长连接，而非频繁的短连接，握手导致的延迟只影响初始化。</li>
<li>高速缓存直接在内存中进行数据存储和访问。</li>
<li>缓存服务通常与Node进程运行在相同的机器上或者相同的机房里，网络速度受到的影响较小。</li>
</ul>
<p>尽管采用专门的缓存服务会比直接在内存中访问慢，但其影响小之又小，带来的好处却远远大于直接在Node中保存数据。为此，一旦Session需要异步的方式获取，代码就需要略作调整，变成异步的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies[key];</div><div class="line">  <span class="keyword">if</span> (!id) &#123;</div><div class="line">    req.session = generate();</div><div class="line">    handle(req, res);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, sesson</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (session) &#123;</div><div class="line">          <span class="keyword">if</span> (session.cookie.expire &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()) &#123;</div><div class="line">            <span class="comment">// 更新超时时间 session.cookie.expire = (new</span></div><div class="line">            <span class="built_in">Date</span>()).getTime() + EXPIRES;</div><div class="line">          req.session = session;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 超时了，删除旧的数据，并重新生成 delete sessions[id];</span></div><div class="line">          req.session = generate();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果session过期或口令不对，重新生成session</span></div><div class="line">        req.session = generate();</div><div class="line">      &#125;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在响应时，将新的session保存回缓存中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> writeHead = res.writeHead;</div><div class="line">res.writeHead = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> cookies = res.getHeader(<span class="string">'Set-Cookie'</span>);</div><div class="line">  <span class="keyword">var</span> session = serialize(<span class="string">'Set-Cookie'</span>, req.session.id);</div><div class="line">  cookies =</div><div class="line">    <span class="built_in">Array</span>.isArray(cookies) ? cookies.concat(session) : [cookies, session];</div><div class="line">  res.setHeader(<span class="string">'Set-Cookie'</span>, cookies); <span class="comment">// 保存回缓存</span></div><div class="line">  store.save(req.session);</div><div class="line">  <span class="keyword">return</span> writeHead.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Session与安全-1"><a href="#Session与安全-1" class="headerlink" title="Session与安全"></a>Session与安全</h3><p>从前文可以知道，尽管我们的数据都放置在后端了，使得它能保障安全，但是无论通过Cookie，还是查询字符串的实现方式，Session的口令依然保存在客户端，这里会存在口令被盗用的情况。如果Web应用的用户十分多，自行设计的随机算法的一些口令值就有理论机会命中有效的口令值。一旦口令被伪造，服务器端的数据也可能间接被利用。这里提到的Session的安全，就主要指如何让这个口令更加安全。有一种做法是将这个口令通过私钥加密进行签名，使得伪造的成本较高。客户端尽管可以伪造口令值，但是由于不知道私钥值，签名信息很难伪造。如此，我们只要在响应时将口令和签名进行对比，如果签名非法，我们将服务器端的数据立即过期即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val + <span class="string">'.'</span> + crypto.createHmac(<span class="string">'sha256'</span>, secret)</div><div class="line">    .update(val).digest(<span class="string">'base64'</span>)</div><div class="line">    .replace(<span class="regexp">/\=+$/</span>, <span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在响应时，设置session值到Cookie中或者跳转URL中，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> val = sign(req.sessionID,secret);</div><div class="line">res.setHeader(<span class="string">'Set-Cookie'</span>, cookie.serialize(key, val));</div></pre></td></tr></table></figure>
<p>接收请求时，检查签名，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 取出口令部分进行签名，对比用户提交的值 </span></div><div class="line"><span class="keyword">var</span> unsign = <span class="function"><span class="keyword">function</span> (<span class="params">val, secret</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> str = val.slice(<span class="number">0</span>, val.lastIndexOf(<span class="string">'.'</span>));</div><div class="line">  <span class="keyword">return</span> sign(str, secret) == val ? str : <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样一来，即使攻击者知道口令中.号前的值是服务器端Session的ID值，只要不知道secret私钥的值，就无法伪造签名信息，以此实现对Session的保护。该方法被Connect中间件框架所使用，保护好私钥，就是在保障自己Web应用的安全。</p>
<p>当然，将口令进行签名是一个很好的解决方案，但是如果攻击者通过某种方式获取了一个真实的口令和签名，他就能实现身份的伪装。一种方案是将客户端的某些独有信息与口令作为原值，然后签名，这样攻击者一旦不在原始的客户端上进行访问，就会导致签名失败。这些独有信息包括用户IP和用户代理（User Agent）。但是原始用户与攻击者之间也存在上述信息相同的可能性，如局域网出口IP相同，相同的客户端信息等，不过纳入这些考虑能够提高安全性。通常而言，将口令存在Cookie中不容易被他人获取，但是一些别的漏洞可能导致这个口令被泄漏，典型的有XSS漏洞，下面简单介绍一下如何通过XSS拿到用户的口令，实现伪造。</p>
<p><code>XSS</code>的全称是<code>跨站脚本攻击（CrossSite Scripting，通常简称为XSS）</code></p>
<p>通常都是由网站开发者决定哪些脚本可以执行在浏览器端，不过XSS漏洞会让别的脚本执行。它的主要形成原因多数是用户的输入没有被转义，而被直接执行。</p>
<p>这段代码将该用户的Cookie提交给了c.com站点，这个站点就是攻击者的服务器，他也就能拿到该用户的Session口令。然后他在客户端中用这个口令伪造Cookie，从而实现了伪装用户的身份。如果该用户是网站管理员，就可能造成极大的危害。</p>
<p>XSS造成的危害远远不止这些，这里不再过多介绍。在这个案例中，如果口令中有用户的客户端信息的签名，即使口令被泄漏，除非攻击者与用户客户端完全相同，否则不能实现伪造。</p>
<h3 id="8-1-6-缓存-1"><a href="#8-1-6-缓存-1" class="headerlink" title="8.1.6 缓存"></a>8.1.6 缓存</h3><p>我们知道软件的架构经历过一次<code>C/S</code> 模式到<code>B/S</code>模式的演变，在HTTP之上构建的应用，其客户端除了比普通桌面应用具备更轻量的升级和部署等特性外，在跨平台、跨浏览器、跨设备上也具备独特优势。传统客户端在安装后的应用过程中仅仅需要传输数据，Web应用还需要传输构成界面的组件（HTML、JavaScript、CSS文件等）。这部分内容在大多数场景下并不经常变更，却需要在每次的应用中向客户端传递，如果不进行处理，那么它将造成不必要的带宽浪费。如果网络速度较差，就需要花费更多时间来打开页面，对于用户的体验将会造成一定影响。因此节省不必要的传输，对用户和对服务提供者来说都有好处。</p>
<p>为了提高性能，<strong>YSlow</strong>中也提到几条关于缓存的规则。添加Expires或Cache-Control到报文头中。<br>配置ETags。让Ajax可缓存。<br>这里我们将展开这几条规则的来源。如何让浏览器缓存我们的静态资源，这也是一个需要由服务器与浏览器共同协作完成的事情。</p>
<p>RFC 2616规范对此有一定的描述，只有遵循约定，整个缓存机制才能有效建立。通常来说，POST、DELETE、PUT这类带行为性的请求操作一般不做任何缓存，大多数缓存只应用在GET请求中。使用缓存的流程如图8-1所示。</p>
<p>简单来讲，本地没有文件时，浏览器必然会请求服务器端的内容，并将这部分内容放置在本地的某个缓存目录中。在第二次请求时，它将对本地文件进行检查，如果不能确定这份本地文件是否可以直接使用，它将会发起一次条件请求。所谓条件请求，就是在普通的GET请求报文中，附带If-Modified-Since字段，如下所示：<br>If-Modified-Since: Sun, 03 Feb 2013 06:01:12 GMT它将询问服务器端是否有更新的版本，本地文件的最后修改时间。如果服务器端没有新的版本，只需响应一个304状态码，客户端就使用本地版本。如果服务器端有新的版本，就将新的内容发送给客户端，客户端放弃本地版本。代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.stat(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lastModified =</div><div class="line">      stat.mtime.toUTCString();</div><div class="line">    <span class="keyword">if</span> (lastModified === req.headers[<span class="string">'if-modified-since'</span>]) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>,</div><div class="line">        <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lastModified =</div><div class="line">          stat.mtime.toUTCString();</div><div class="line">        res.setHeader(<span class="string">"Last-Modified"</span>, lastModified);</div><div class="line">        res.writeHead(<span class="number">200</span>,</div><div class="line">          <span class="string">"Ok"</span>);</div><div class="line">        res.end(file);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的条件请求采用时间戳的方式实现，但是时间戳有一些缺陷存在。<br>文件的时间戳改动但内容并不一定改动。时间戳只能精确到秒级别，更新频繁的内容将无法生效。<br>为此HTTP1.1中引入了ETag来解决这个问题。ETag的全称是Entity Tag，由服务器端生成，服务器端可以决定它的生成规则。如果根据文件内容生成散列值，那么条件请求将不会受到时间戳改动造成的带宽浪费。下面是根据内容生成散列值的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> getHash = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">  <span class="keyword">return</span> shasum.update(str).digest(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>与If-Modified-Since/Last-Modified不同的是，ETag的请求和响应是If-None-Match/ETag，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hash = getHash(file);</div><div class="line">    <span class="keyword">var</span> noneMatch = req[<span class="string">'if-none-match'</span>];</div><div class="line">    <span class="keyword">if</span> (hash === noneMatch) &#123;</div><div class="line">      res.writeHead(<span class="number">304</span>, <span class="string">"Not Modified"</span>);</div><div class="line">      res.end();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.setHeader(<span class="string">"ETag"</span>, hash);</div><div class="line">      res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">      res.end(file);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>浏览器在收到<br>ETag: “83-1359871272000”</p>
<p>这样的请求后，在下次的请求中，会将其放置在请求头中：</p>
<p>If-None-Match:”83-1359871272000”。</p>
<p>尽管条件请求可以在文件内容没有修改的情况下节省带宽，但是它依然会发起一个HTTP请求，使得客户端依然会花一定时间来等待响应。可见最好的方案就是连条件请求都不用发起。那么如何让浏览器知晓是否能直接使用本地版本呢？答案就是服务器端在响应内容时，让浏览器明确地将内容缓存起来。如同YSlow规则里提到的，在响应里设置Expires或Cache-Control头，浏览器将根据该值进行缓存。那么这两个值有何区别呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> expires = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    expires.setTime(expires.getTime() + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.setHeader(<span class="string">"Expires"</span>, expires.toUTCString());</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Expires是一个GMT格式的时间字符串。浏览器在接到这个过期值后，只要本地还存在这个缓存文件，在到期时间之前它都不会再发起请求。YUI3的CDN实践是缓存文件在10年后过期。但是Expires的缺陷在于浏览器与服务器之间的时间可能不一致，这可能会带来一些问题，比如文件提前过期，或者到期后并没有被删除。</p>
<p>Cache-Control以更丰富的形式，实现相同的功能，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(filename, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    res.setHeader(<span class="string">"Cache-Control"</span>,</div><div class="line">      <span class="string">"max-age="</span> + <span class="number">10</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">    res.writeHead(<span class="number">200</span>, <span class="string">"Ok"</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码为Cache-Control设置了max-age值，它比Expires优秀的地方在于，Cache-Control能够避免浏览器端与服务器端时间不同步带来的不一致性问题，只要进行类似倒计时的方式计算过期时间即可。除此之外，Cache-Control的值还能设置public、private、no-cache、no-store等能够更精细地控制缓存的选项。<br>由于在HTTP1.0时还不支持max-age，如今的服务器端在模块的支持下多半同时对Expires和Cache-Control进行支持。在浏览器中如果两个值同时存在，且被同时支持时，max-age会覆盖Expires。</p>
<h3 id="清除缓存-1"><a href="#清除缓存-1" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>虽然我们知晓了如何设置缓存，以达到节省网络带宽的目的，但是缓存一旦设定，当服务器端意外更新内容时，却无法通知客户端更新。这使得我们在使用缓存时也要为其设定版本号，所幸浏览器是根据URL进行缓存，那么一旦内容有所更新时，我们就让浏览器发起新的URL请求，使得新内容能够被客户端更新。一般的更新机制有如下两种。每次发布，路径中跟随Web应用的版本号：<code>http://url.com/?v=20130501</code> .<br>每次发布，路径中跟随该文件内容的hash值：<code>http://url.com/?hash=afadfadwe</code> 。大体来说，根据文件内容的hash值进行缓存淘汰会更加高效，因为文件内容不一定随着Web应用的版本而更新，而内容没有更新时，版本号的改动导致的更新毫无意义，因此以文件内容形成的hash值更精准。</p>
<h3 id="8-1-7-Basic认证-1"><a href="#8-1-7-Basic认证-1" class="headerlink" title="8.1.7 Basic认证"></a>8.1.7 Basic认证</h3><h3 id="Basic认证-1"><a href="#Basic认证-1" class="headerlink" title="Basic认证"></a>Basic认证</h3><p>Basic认证是当客户端与服务器端进行请求时，允许通过用户名和密码实现的一种身份认证方式。这里简要介绍它的原理和它在服务器端通过Node处理的流程。</p>
<p>如果一个页面需要Basic认证，它会检查请求报文头中的Authorization字段的内容，该字段的值由认证方式和加密值构成，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ curl -v &quot;http://user:pass@www.baidu.com/&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Authorization: Basic dXNlcjpwYXNz </div><div class="line">User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5</div><div class="line">Host: www.baidu.com </div><div class="line">Accept: */*</div></pre></td></tr></table></figure>
<p>在Basic认证中，它会将用户和密码部分组合： <code>username\+ &quot;:&quot; + password</code>。然后进行Base64编码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Buffer(username + <span class="string">':'</span> + password).toString(<span class="string">'base64'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果用户首次访问该网页，URL地址中也没携带认证内容，那么浏览器会响应一个401未授权的状态码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> auth = req.headers[<span class="string">'authorization'</span>] || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> parts = auth.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> method = parts[<span class="number">0</span>] || <span class="string">''</span>; <span class="comment">// Basic var encoded = parts[1] || ''; //</span></div><div class="line">  dXNlcjpwYXNz</div><div class="line">  <span class="keyword">var</span> decoded = <span class="keyword">new</span> Buffer(encoded,</div><div class="line">    <span class="string">'base64'</span>).toString(<span class="string">'utf-8'</span>).split(<span class="string">":"</span>);</div><div class="line">  <span class="keyword">var</span> user = decoded[<span class="number">0</span>]; <span class="comment">//</span></div><div class="line">  user</div><div class="line">  <span class="keyword">var</span> pass = decoded[<span class="number">1</span>]; <span class="comment">// pass if (!checkUser(user, pass)) &#123;</span></div><div class="line">  res.setHeader(<span class="string">'WWW-Authenticate'</span>, <span class="string">'Basic realm="Secure Area"'</span>);</div><div class="line">  res.writeHead(<span class="number">401</span>);</div><div class="line">  res.end();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  handle(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，响应头中的<code>WWW-Authenticate</code> 字段告知浏览器采用什么样的认证和加密方式。一般而言，未认证的情况下，浏览器会弹出对话框进行交互式提交认证信息，如图8-2所示。<br>图8-2　浏览器弹出的交互式提交认证信息的对话框当认证通过，服务器端响应200状态码之后，浏览器会保存用户名和密码口令，在后续的请求中都携带上Authorization信息。<br>Basic认证有太多的缺点，它虽然经过Base64加密后在网络中传送，但是这近乎于明文，十分危险，一般只有在HTTPS的情况下才会使用。不过Basic认证的支持范围十分广泛，几乎所有的浏览器都支持它。为了改进Basic认证，RFC 2069规范提出了摘要访问认证，它加入了服务器端随机数来保护认证过程，在此不做深入的解释。</p>
<h3 id="8-2-数据上传-1"><a href="#8-2-数据上传-1" class="headerlink" title="8.2 数据上传"></a>8.2 数据上传</h3><h3 id="数据上传-1"><a href="#数据上传-1" class="headerlink" title="数据上传"></a>数据上传</h3><p>上述的内容基本都集中在HTTP请求报文头中，适用于GET请求和大多数其他请求。头部报文中的内容已经能够让服务器端进行大多数业务逻辑操作了，但是单纯的头部报文无法携带大量的数据，在业务中，我们往往需要接收一些数据，比如表单提交、文件提交、JSON上传、XML上传等。</p>
<p>Node的http模块只对HTTP报文的头部进行了解析，然后触发request事件。如果请求中还带有内容部分（如POST请求，它具有报头和内容），内容部分需要用户自行接收和解析。通过报头的Transfer-Encoding或Content-Length即可判断请求中是否带有内容，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hasBody = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'transfer-encoding'</span> <span class="keyword">in</span> req.headers || <span class="string">'content-length'</span> <span class="keyword">in</span> req.headers;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在HTTP_Parser解析报头结束后，报文内容部分会通过data事件触发，我们只需以流的方式处理即可，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> buffers = [];</div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">      buffers.push(chunk);</div><div class="line">    &#125;);</div><div class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      req.rawBody = Buffer.concat(buffers).toString();</div><div class="line">      handle(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将接收到的Buffer列表转化为一个Buffer对象后，再转换为没有乱码的字符串，暂时挂置在req.rawBody处。</p>
<h3 id="8-2-1-表单数据-1"><a href="#8-2-1-表单数据-1" class="headerlink" title="8.2.1 表单数据"></a>8.2.1 表单数据</h3><h3 id="表单数据-1"><a href="#表单数据-1" class="headerlink" title="表单数据"></a>表单数据</h3><p>最为常见的数据提交就是通过网页表单提交数据到服务器端，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;</div><div class="line">  &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;</div><div class="line">  &lt;br /&gt;</div><div class="line">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>默认的表单提交，请求头中的<code>Content-Type</code> 字段值为<code>application/x-www-form-urlencoded</code> ，</p>
<p>如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure>
<p>由于它的报文体内容跟查询字符串相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">foo=bar&amp;baz=val</div></pre></td></tr></table></figure>
<p>因此解析它十分容易：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>] === <span class="string">'application/x-www-form-urlencoded'</span>) &#123;</div><div class="line">    req.body = querystring.parse(req.rawBody);</div><div class="line">  &#125;</div><div class="line">  todo(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>后续业务中直接访问<code>req.body</code>就可以得到表单中提交的数据。</p>
<h3 id="8-2-2-其他格式-1"><a href="#8-2-2-其他格式-1" class="headerlink" title="8.2.2 其他格式"></a>8.2.2 其他格式</h3><p>除了表单数据外，常见的提交还有JSON和XML文件等，判断和解析他们的原理都比较相似，都是依据Content-Type中的值决定，其中JSON类型的值为application/json，XML的值为application/xml。</p>
<p>需要注意的是，在Content-Type中可能还附带如下所示的编码信息：Content-Type: application/json; charset=utf-8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> str = req.headers[<span class="string">'content-type'</span>] || <span class="string">''</span>; <span class="keyword">return</span> str.split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>解析XML文件稍微复杂一点，但是社区有支持XML文件到JSON对象转换的库，这里以xml2js模块为例，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> xml2js = <span class="built_in">require</span>(<span class="string">'xml2js'</span>);</div><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">    xml2js.parseString(req.rawBody, <span class="function"><span class="keyword">function</span> (<span class="params">err, xml</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// 异常内容，响应Bad request res.writeHead(400);</span></div><div class="line">        res.end(<span class="string">'Invalid XML'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      req.body = xml;</div><div class="line">      todo(req, res);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-2-3-附件上传-1"><a href="#8-2-3-附件上传-1" class="headerlink" title="8.2.3 附件上传"></a>8.2.3 附件上传</h3><p>附件上传<br>除了常见的表单和特殊格式的内容提交外，还有一种比较独特的表单。通常的表单，其内容可以通过urlencoded的方式编码内容形成报文体，再发送给服务器端，但是业务场景往往需要用户直接提交文件。在前端HTML代码中，特殊表单与普通表单的差异在于该表单中可以含有file类型的控件，以及需要指定表单属性enctype为multipart/form-data，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>浏览器在遇到multipart/form-data表单提交时，构造的请求报文与普通表单完全不同。首先它的报头中最为特殊的如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: multipart/form-data; </div><div class="line">boundary=AaB03x </div><div class="line">Content-Length: 18231</div></pre></td></tr></table></figure>
<p>它代表本次提交的内容是由多部分构成的，其中<code>boundary=AaB03x</code>指定的是每部分内容的分界符，AaB03x是随机生成的一段字符串，报文体的内容将通过在它前面添加–进行分割，报文结束时在它前后都加上–表示结束。另外，Content-Length的值必须确保是报文体的长度。假设上面的表单选择了一个名为diveintonode.js的文件，并进行提交上传，那么生成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;username&quot;\r\n</div><div class="line">\r\n Jackson Tian\r\n</div><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ... </div><div class="line">--AaB03x--</div></pre></td></tr></table></figure>
<p>普通的表单控件的报文体如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n</div><div class="line">Content-Disposition: form-data; name=&quot;username&quot;\r\n \r\n</div><div class="line">Jackson Tian\r\n</div></pre></td></tr></table></figure>
<p>文件控件形成的报文如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">--AaB03x\r\n </div><div class="line">Content-Disposition: form-data; </div><div class="line">name=&quot;file&quot;;</div><div class="line">filename=&quot;diveintonode.js&quot;\r\n</div><div class="line">Content-Type: application/javascript\r\n \r\n</div><div class="line">... contents of diveintonode.js ...</div></pre></td></tr></table></figure>
<p>一旦我们知晓报文是如何构成的，那么解析它就变得十分容易。值得注意的一点是，由于是文件上传，那么像普通表单、JSON或XML那样先接收内容再解析的方式将变得不可接受。接收大小未知的数据量时，我们需要十分谨慎，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">var</span> done = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      handle(req, res);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'application/json'</span>) &#123;</div><div class="line">      parseJSON(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'application/xml'</span>) &#123;</div><div class="line">      parseXML(req, done);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      parseMultipart(req, done);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们将req这个流对象直接交给对应的解析方法，由解析方法自行处理上传的内容，或接收内容并保存在内存中，或流式处理掉</p>
<p>这里要介绍到的模块是formidable。它基于流式处理解析报文，将接收到的文件写入到系统的临时文件夹中，并返回对应的路径，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (hasBody(req)) &#123;</div><div class="line">    <span class="keyword">if</span> (mime(req) === <span class="string">'multipart/form-data'</span>) &#123;</div><div class="line">      <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">      form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields,</span></span></div><div class="line">        files) &#123;</div><div class="line">        req.body = fields;</div><div class="line">        req.files = files;</div><div class="line">        handle(req, res);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此在业务逻辑中只要检查req.body和req.files中的内容即可。</p>
<h3 id="8-2-4-数据上传与安全-1"><a href="#8-2-4-数据上传与安全-1" class="headerlink" title="8.2.4 数据上传与安全"></a>8.2.4 数据上传与安全</h3><h3 id="数据上传与安全-1"><a href="#数据上传与安全-1" class="headerlink" title="数据上传与安全"></a>数据上传与安全</h3><p>Node提供了相对底层的API，通过它构建各种各样的Web应用都是相对容易的，但是在Web应用中，不得不重视与数据上传相关的安全问题。由于Node与前端JavaScript的近缘性，前端JavaScript甚至可以上传到服务器直接执行，但在这里我们并不讨论这样危险的动作，而是介绍内存和CSRF相关的安全问题。</p>
<ol>
<li>内存限制<br>在解析表单、JSON和XML部分，我们采取的策略是先保存用户提交的所有数据，然后再解析处理，最后才传递给业务逻辑。这种策略存在潜在的问题是，它仅仅适合数据量小的提交请求，一旦数据量过大，将发生内存被占光的情况。攻击者通过客户端能够十分容易地模拟伪造大量数据，如果攻击者每次提交1 MB的内容，那么只要并发请求数量一大，内存就会很快地被吃光。要解决这个问题主要有两个方案。</li>
</ol>
<p>限制上传内容的大小，一旦超过限制，停止接收数据，并响应400状态码。通过流式解析，将数据流导向到磁盘中，Node只保留文件路径等小数据。</p>
<p>流式处理在上文的文件上传中已经有所体现，这里介绍一下Connect中采用的上传数据量的限制方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bytes = <span class="number">1024</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> received = <span class="number">0</span>,</div><div class="line">    <span class="keyword">var</span> len = req.headers[<span class="string">'content-length'</span>] ?</div><div class="line">      <span class="built_in">parseInt</span>(req.headers[<span class="string">'content-length'</span>], <span class="number">10</span>) : <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 如果内容超过长度限制，返回请求实体过长的状态码 if (len &amp;&amp; len &gt;</span></div><div class="line">  bytes) &#123;</div><div class="line">  res.writeHead(<span class="number">413</span>);</div><div class="line">  res.end();</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// limit</span></div><div class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">  received += chunk.length;</div><div class="line">  <span class="keyword">if</span> (received &gt; bytes) &#123; <span class="comment">// 停止接收数据，触发end()</span></div><div class="line">    req.destroy();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">handle(req, res);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码中我们可以看到，数据是由包含Content-Length的请求报文判断是否长度超过限制的，超过则直接响应413状态码。对于没有Content-Length的请求报文，略微简略一点，在每个data事件中判定即可。一旦超过限制值，服务器停止接收新的数据片段。如果是JSON文件或XML文件，极有可能无法完成解析。对于上线的Web应用，添加一个上传大小限制十分有利于保护服务器，在遭遇攻击时，能镇定从容应对。</p>
<h3 id="CSRF-1"><a href="#CSRF-1" class="headerlink" title="CSRF"></a>CSRF</h3><p>CSRF的全称是<code>Cross-Site Request Forgery</code>，中文意思为<code>跨站请求伪造</code>。前文提及了服务器端与客户端通过Cookie来标识和认证用户，通常而言，用户通过浏览器访问服务器端的Session ID是无法被第三方知道的，但是CSRF的攻击者并不需要知道Session ID就能让用户中招。为了详细解释CSRF攻击是怎样一个过程，这里以一个留言的例子来说明。假设某个网站有这样一个留言程序，提交留言的接口如下所示：</p>
<p><a href="http://domain_a.com/guestbook" target="_blank" rel="external">http://domain_a.com/guestbook</a></p>
<p>用户通过POST提交content字段就能成功留言。</p>
<p>服务器端会自动从Session数据中判断是谁提交的数据，补足username和updatedAt两个字段后向数据库中写入数据，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> content = req.body.content || <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> username = req.session.username;</div><div class="line">  <span class="keyword">var</span> feedback = &#123;</div><div class="line">    <span class="attr">username</span>: username,</div><div class="line">    <span class="attr">content</span>: content,</div><div class="line">    <span class="attr">updatedAt</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;;</div><div class="line">  db.save(feedback, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'Ok'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正常的情况下，谁提交的留言，就会在列表中显示谁的信息。如果某个攻击者发现了这里的接口存在CSRF漏洞，那么他就可以在另一个网站（<a href="http://domain_b.com/attack）上构造了一个表单提交，如下所示：" target="_blank" rel="external">http://domain_b.com/attack）上构造了一个表单提交，如下所示：</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"#test"</span>).submit();</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下，攻击者只要引诱某个<code>domain_a</code>的登录用户访问这个<code>domain_b</code>的网站，就会自动提交一个留言。由于在提交到<code>domain_a</code>的过程中，浏览器会将<code>domain_a</code>的Cookie发送到服务器，尽管这个请求是来自domain_b的，但是服务器并不知情，用户也不知情。以上过程就是一个CSRF攻击的过程。这里的示例仅仅是一个留言的漏洞，如果出现漏洞的是转账的接口，那么其危害程度可想而知。</p>
<p>尽管通过Node接收数据提交十分容易，但是安全问题还是不容忽视。好在CSRF并非不可防御，解决CSRF攻击的方案有添加随机值的方式，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> generateRandom = <span class="function"><span class="keyword">function</span> (<span class="params">len</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> crypto.randomBytes(<span class="built_in">Math</span>.ceil(len *</div><div class="line">      <span class="number">3</span> / <span class="number">4</span>))</div><div class="line">    .toString(<span class="string">'base64'</span>).slice(<span class="number">0</span>, len);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也就是说，为每个请求的用户，在Session中赋予一个随机值，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div></pre></td></tr></table></figure>
<p>在做页面渲染的过程中，将这个_csrf值告之前端，如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"http://domain_a.com/guestbook"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"vim是这个世界上最好的编辑器"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_csrf"</span> <span class="attr">value</span>=<span class="string">"&lt;%=_csrf%&gt;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于该值是一个随机值，攻击者构造出相同的随机值的难度相当大，所以我们只需要在接收端做一次校验就能轻易地识别出该请求是否为伪造的，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> token = req.session._csrf || (req.session._csrf = generateRandom(<span class="number">24</span>));</div><div class="line">  <span class="keyword">var</span> _csrf = req.body._csrf;</div><div class="line">  <span class="keyword">if</span> (token !== _csrf) &#123;</div><div class="line">    res.writeHead(<span class="number">403</span>);</div><div class="line">    res.end(<span class="string">"禁止访问"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>_csrf字段也可以存在于查询字符串或者请求头中。</p>
<h3 id="8-3-1-文件路径型-1"><a href="#8-3-1-文件路径型-1" class="headerlink" title="8.3.1 文件路径型"></a>8.3.1 文件路径型</h3><p>在MVC模式流行起来之前，根据文件路径执行动态脚本也是基本的路由方式，它的处理原理是Web服务器根据URL路径找到对应的文件，如/index.asp或/index.php。Web服务器根据文件名后缀去寻找脚本的解析器，并传入HTTP请求的上下文。</p>
<h3 id="8-3-2-MVC-1"><a href="#8-3-2-MVC-1" class="headerlink" title="8.3.2 MVC"></a>8.3.2 MVC</h3><p>在MVC流行之前，主流的处理方式都是通过文件路径进行处理的，甚至以为是常态。直到有一天开发者发现用户请求的URL路径原来可以跟具体脚本所在的路径没有任何关系。</p>
<p>MVC模型的主要思想是将业务逻辑按职责分离，主要分为以下几种。</p>
<ul>
<li>控制器（Controller），一组行为的集合。</li>
<li>模型（Model），数据相关的操作和封装。</li>
<li>视图（View），视图的渲染。</li>
</ul>
<p>它的工作模式如下说明。</p>
<p>路由解析，根据URL寻找到对应的控制器和行为。<br>行为调用相关的模型，进行数据操作。<br>数据操作结束后，调用视图和相关数据进行页面渲染，输出到客户端。</p>
<p>如何根据URL做路由映射，这里有两个分支实现。一种方式是通过手工关联映射，一种是自然关联映射。前者会有一个对应的路由文件来将URL映射到对应的控制器，后者没有这样的文件。<br>图8-3　分层模式</p>
<p>手工映射<br>手工映射除了需要手工配置路由外较为原始外，它对URL的要求十分灵活，几乎没有格式上的限制。</p>
<p>手工映射十分方便，由于它对URL十分灵活，所以我们可以将两个路径都映射到相同的业务逻辑，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/user/setting'</span>, exports.setting);</div><div class="line">use(<span class="string">'/setting/user'</span>, exports.setting);</div><div class="line"><span class="comment">// 甚至 use('/setting/user/jacksontian',exports.setting);</span></div></pre></td></tr></table></figure>
<p>正则匹配对于简单的路径，采用上述的硬匹配方式即可，但是如下的路径请求就完全无法满足需求了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/jacksontian</div><div class="line">/profile/hoover</div></pre></td></tr></table></figure>
<p>这些请求需要根据不同的用户显示不同的内容，这里只有两个用户，假如系统中存在成千上万个用户，我们就不太可能去手工维护所有用户的路由请求，因此正则匹配应运而生，我们期望通过以下的方式就可以匹配到任意用户：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>于是我们改进我们的匹配方式，在通过use注册路由时需要将路径转换为一个正则表达式，然后通过它来进行匹配，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  path = path</div><div class="line">    .concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>).replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>)</div><div class="line">    .replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture, optional, star</span>) </span>&#123;</div><div class="line">      slash = slash || <span class="string">''</span>;</div><div class="line">      <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) + <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述正则表达式十分复杂，总体而言，它能实现如下的匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/profile/:username =&gt; /profile/jacksontian, </div><div class="line">/profile/hoover /user.:ext =&gt; /user.xml, /user.json</div></pre></td></tr></table></figure>
<p>现在我们重新改进注册部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以及匹配部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">if</span> (route[<span class="number">0</span>].exec(pathname)) &#123;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 处理404请求 handle404(req, res);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><p>尽管完成了正则匹配，可以实现相似URL的匹配，但是:username到底匹配了啥，还没有解决。为此我们还需要进一步将匹配到的内容抽取出来，希望在业务中能如下这样调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">use(<span class="string">'/profile/:username'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> username = req.params.username;</div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的目标是将抽取的内容设置到req.params处。那么第一步就是将键值抽取出来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> pathRegexp = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> keys = [];</div><div class="line">  path = path.concat(strict ? <span class="string">''</span> : <span class="string">'/?'</span>)</div><div class="line">    .replace(<span class="regexp">/\/\(/g</span>, <span class="string">'(?:/'</span>).replace(<span class="regexp">/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g</span>,</div><div class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">_, slash, format, key, capture,</span></span></div><div class="line">        optional, star) &#123; <span class="comment">// 将匹配到的键值保存起来</span></div><div class="line">        keys.push(key);</div><div class="line">        slash = slash || <span class="string">''</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span> + (optional ? <span class="string">''</span> : slash)\ + <span class="string">'(?:'</span> + (optional ? slash : <span class="string">''</span>)\ + (format || <span class="string">''</span>) + (capture || (format &amp;&amp; <span class="string">'([^/.]+?)'</span> || <span class="string">'([^/]+?)'</span>)) +</div><div class="line">          <span class="string">')'</span> + (optional || <span class="string">''</span>)\ + (star ? <span class="string">'(/*)?'</span> : <span class="string">''</span>);</div><div class="line">      &#125;)</div><div class="line">    .replace(<span class="regexp">/([\/.])/g</span>, <span class="string">'\\$1'</span>).replace(<span class="regexp">/\*/g</span>, <span class="string">'(.*)'</span>);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">keys</span>: keys,</div><div class="line">    <span class="attr">regexp</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + path + <span class="string">'$'</span>)</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将根据抽取的键值和实际的URL得到键值匹配到的实际值，并设置到req.params处，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;</div><div class="line">    routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i]; <span class="comment">// 正则匹配</span></div><div class="line">    <span class="keyword">var</span> reg = route[<span class="number">0</span>].regexp;</div><div class="line">    <span class="keyword">var</span> keys = route[<span class="number">0</span>].keys;</div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 var params = &#123;&#125;;</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class="line">        <span class="keyword">var</span> value = matched[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">          params[keys[i]] = value;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      req.params = params;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="comment">// 处理404请求</span></div><div class="line">  handle404(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，我们除了从查询字符串（req.query）或提交数据（req.body）中取到值外，还能从路径的映射里取到值。</p>
<p>自然映射手工映射的优点在于路径可以很灵活，但是如果项目较大，路由映射的数量也会很多。从前端路径到具体的控制器文件，需要进行查阅才能定位到实际代码的位置，为此有人提出，尽是路由不如无路由。实际上并非没有路由，而是路由按一种约定的方式自然而然地实现了路由，而无须去维护路由映射。</p>
<p>上文的路径解析部分对这种自然映射的实现有稍许介绍，简单而言，它将如下路径进行了划分处理：<br>/controller/action/param1/param2/param3以/user/setting/12/1987为例，它会按约定去找controllers目录下的user文件，将其require出来后，调用这个文件模块的setting()方法，而其余的值作为参数直接传递给这个方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  <span class="keyword">var</span> paths = pathname.split(<span class="string">'/'</span>);</div><div class="line">  <span class="keyword">var</span> controller = paths[<span class="number">1</span>] || <span class="string">'index'</span>;</div><div class="line">  <span class="keyword">var</span> action = paths[<span class="number">2</span>] || <span class="string">'index'</span>;</div><div class="line">  <span class="keyword">var</span> args = paths.slice(<span class="number">3</span>);</div><div class="line">  <span class="keyword">var</span> <span class="built_in">module</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// require的缓存机制使得只有第一次是阻塞的 module =</span></div><div class="line">    <span class="built_in">require</span>(<span class="string">'./controllers/'</span> + controller);</div><div class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">    handle500(req, res);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> method = <span class="built_in">module</span>[action]</div><div class="line">  <span class="keyword">if</span> (method) &#123;</div><div class="line">    method.apply(<span class="literal">null</span>, [req, res].concat(args));</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle500(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于这种自然映射的方式没有指明参数的名称，所以无法采用req.params的方式提取，但是直接通过参数获取更简洁，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">exports.setting = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, month, year</span>) </span>&#123; </div><div class="line">  <span class="comment">// 如果路径为/user/setting/12/1987，那么month为12，year为1987</span></div><div class="line"><span class="comment">// TODO </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>事实上手工映射也能将值作为参数进行传递，而不是通过req.params。但是这个观点见仁见智，这里不做比较和讨论。自然映射这种路由方式在PHP的MVC框架CodeIgniter中应用十分广泛，设计十分简洁，在Node中实现它也十分容易。与手工映射相比，如果URL变动，它的文件也需要发生变动，手工映射只需要改动路由映射即可。</p>
<p><strong>8.3.3 RESTful</strong></p>
<p>RESTful</p>
<p>MVC模式大行其道了很多年，直到RESTful的流行，大家才意识到URL也可以设计得很规范，请求方法也能作为逻辑分发的单元。</p>
<p><code>REST</code>的全称是<code>Representational State Transfer</code>，中文含义为<code>表现层状态转化</code>。符合REST规范的设计，我们称为RESTful设计。它的设计哲学主要将服务器端提供的内容实体看作一个资源，并表现在URL上。<br>比如一个用户的地址如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/users/jacksontian</div></pre></td></tr></table></figure>
<p>这个地址代表了一个资源，对这个资源的操作，主要体现在HTTP请求方法上，不是体现在URL上。过去我们对用户的增删改查或许是如下这样设计URL的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /user/add?username=jacksontian </div><div class="line">GET /user/remove?username=jacksontian</div><div class="line">POST /user/update?username=jacksontian </div><div class="line">GET /user/get?username=jacksontian</div></pre></td></tr></table></figure>
<p>操作行为主要体现在行为上，主要使用的请求方法是POST和GET。在RESTful设计中，它是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /user/jacksontian</div><div class="line">DELETE /user/jacksontian</div><div class="line">PUT /user/jacksontian </div><div class="line">GET /user/jacksontian</div></pre></td></tr></table></figure>
<p>它将DELETE和PUT请求方法引入设计中，参与资源的操作和更改资源的状态。对于这个资源的具体表现形态，也不再如过去一样表现在URL的文件后缀上。过去设计资源的格式与后缀有很大的关联，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /user/jacksontian.json </div><div class="line">GET /user/jacksontian.xml</div></pre></td></tr></table></figure>
<p>在RESTful设计中，资源的具体格式由请求报头中的Accept字段和服务器端的支持情况来决定。如果客户端同时接受JSON和XML格式的响应，那么它的Accept字段值是如下这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Accept: application/json,application/xml</div></pre></td></tr></table></figure>
<p>靠谱的服务器端应该要顾及这个字段，然后根据自己能响应的格式做出响应。在响应报文中，通过Content-Type字段告知客户端是什么格式，如下所示：Content-Type: application/json具体格式，我们称之为具体的表现。所以REST的设计就是，通过URL设计资源、请求方法定义资源的操作，通过Accept决定资源的表现形式。</p>
<p>RESTful与MVC设计并不冲突，而且是更好的改进。相比MVC，RESTful只是将HTTP请求方法也加入了路由的过程，以及在URL路径上体现得更资源化。</p>
<p>请求方法<br>为了让Node能够支持RESTful需求，我们改进了我们的设计。如果use是对所有请求方法的处理，那么在RESTful的场景下，我们需要区分请求方法设计。示例如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> routes = &#123;</div><div class="line">  <span class="string">'all'</span>: []</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> app = &#123;&#125;;</div><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">  routes.all.push([pathRegexp(path), action]);</div><div class="line">&#125;;</div><div class="line">[<span class="string">'get'</span>, <span class="string">'put'</span>, <span class="string">'delete'</span>, <span class="string">'post'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</div><div class="line">  routes[method] = &#123;&#125;;</div><div class="line">  app[method] = <span class="function"><span class="keyword">function</span> (<span class="params">path, action</span>) </span>&#123;</div><div class="line">    routes[method].push([pathRegexp(path), action]);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码添加了get()、put()、delete()、post()4个方法后，我们希望通过如下的方式完成路由映射：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 增加用户 </span></div><div class="line">app.post(<span class="string">'/user/:username'</span>, addUser);</div><div class="line"><span class="comment">// 删除用户 </span></div><div class="line">app.delete(<span class="string">'/user/:username'</span>, removeUser);</div><div class="line"><span class="comment">// 修改用户 </span></div><div class="line">app.put(<span class="string">'/user/:username'</span>, updateUser);</div><div class="line"><span class="comment">// 查询用户 </span></div><div class="line">app.get(<span class="string">'/user/:username'</span>, getUser);</div></pre></td></tr></table></figure>
<p>这样的路由能够识别请求方法，并将业务进行分发。为了让分发部分更简洁，我们先将匹配的部分抽取为match()方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route[0].regexp;</span></div><div class="line">    <span class="keyword">var</span> keys = route[<span class="number">0</span>].keys;</div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123; <span class="comment">// 抽取具体值</span></div><div class="line">      <span class="keyword">var</span> params = &#123;&#125;;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class="line">        <span class="keyword">var</span> value = matched[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (value) &#123;</div><div class="line">          params[keys[i]] = value;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      req.params = params;</div><div class="line">      <span class="keyword">var</span> action = route[<span class="number">1</span>];</div><div class="line">      action(req, res);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后改进我们的分发部分，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname; <span class="comment">// 将请求方法变为小写</span></div><div class="line">  <span class="keyword">var</span> method = req.method.toLowerCase();</div><div class="line">  <span class="keyword">if</span> (routes.hasOwnPerperty(method)) &#123;</div><div class="line">    <span class="comment">// 根据请求方法分发 if (match(pathname, routes[method])) &#123;</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果路径没有匹配成功，尝试让all()来处理 if</span></div><div class="line">    (match(pathname, routes.all)) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 直接让all()来处理 if</span></div><div class="line">  (match(pathname, routes.all)) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">&#125; <span class="comment">// 处理404请求</span></div><div class="line">handle404(req, res);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此，我们完成了实现RESTful支持的必要条件。这里的实现过程采用了手工映射的方法完成，事实上通过自然映射也能完成RESTful的支持，但是根据<code>Controller/Action</code>的约定必须要转化为<code>Resource/Method</code> 的约定，此处已经引出实现思路，不再详述。目前RESTful应用已经开始广泛起来，随着业务逻辑前端化、客户端的多样化，RESTful模式以其轻量的设计，得到广大开发者的青睐。对于多数的应用而言，只需要构建一套RESTful服务接口，就能适应移动端、PC端的各种客户端应用。</p>
<h3 id="8-4-中间件"><a href="#8-4-中间件" class="headerlink" title="8.4 中间件"></a>8.4 中间件</h3><p>对于Web应用而言，我们希望不用接触到这么多细节性的处理，为此我们引入中间件（middleware）来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。</p>
<p>在最早的中间件的定义中，它是一种在操作系统上为应用软件提供服务的计算机软件。</p>
<p>它既不是操作系统的一部分，也不是应用软件的一部分，它处于操作系统与应用软件之间，让应用软件更好、更方便地使用底层服务。如今中间件的含义借指了这种封装底层细节，为上层提供更方便服务的意义，并非限定在操作系统层面。这里要提到的中间件，就是为我们封装上文提及的所有HTTP请求细节处理的中间件，开发者可以脱离这部分细节，专注在业务上。</p>
<p>中间件的行为比较类似Java中过滤器（filter）的工作原理，就是在进入具体的业务处理之前，先让过滤器处理。它的工作模型如图8-4所示。如同图8-4所示，从HTTP请求到具体业务逻辑之间，其实有很多的细节要处理。Node的http模块提供了应用层协议网络的封装，对具体业务并没有支持，在业务逻辑之下，必须有开发框架对业务提供支持。这里我们通过中间件的形式搭建开发框架，这个开发框架用来组织各个中间件。对于Web应用的各种基础功能，我们通过中间件来完成，每个中间件处理掉相对简单的逻辑，最终汇成强大的基础框架</p>
<p>由于中间件就是前述的那些基本功能，所以它的上下文也就是请求对象和响应对象：req和res。有一点区别的是，由于Node异步的原因，我们需要提供一种机制，在当前中间件处理完成后，通知下一个中间件执行。在第4章中其实已经对中间件做了介绍，这里我们还是采用Connect的设计，通过尾触发的方式实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> handle = &#123; <span class="comment">// 第一个参数作为路径</span></div><div class="line">    path: pathRegexp(path), <span class="comment">// 其他的都是处理单元</span></div><div class="line">    stack: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">  &#125;;</div><div class="line">  routes.all.push(handle);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改进后的use()方法将中间件都存进了stack数组中保存，等待匹配后触发执行。由于结构发生改变，那么我们的匹配部分也需要进行修改，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route.path.regexp;</span></div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 // 代码省略</span></div><div class="line">      <span class="comment">// 将中间件数组交给handle()方法处理</span></div><div class="line">      handle(req, res, route.stack);</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一旦匹配成功，中间件具体如何调动都交给了handle()方法处理，该方法封装后，递归性地执行数组中的中间件，每个中间件执行完成后，按照约定调用传入next()方法以触发下一个中间件执行（或者直接响应），直到最后的业务逻</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, stack</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 从stack数组中取出中间件并执行</span></div><div class="line">    <span class="keyword">var</span> middleware = stack.shift();</div><div class="line">    <span class="keyword">if</span> (middleware) &#123;</div><div class="line">      <span class="comment">// 传入next()函数自身，使中间件能够执行结束后递归</span></div><div class="line">      middleware(req, res, next);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行</span></div><div class="line">  next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里带来的疑问是，像querystring、cookie、session这样基础的功能中间件是否需要为每个路由都进行设置呢？如果都设置将会演变成如下的路由配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/user/:username'</span>, querystring, cookie, session, getUser);</div><div class="line">app.put(<span class="string">'/user/:username'</span>, querystring, cookie, session, updateUser);</div><div class="line"><span class="comment">//</span></div></pre></td></tr></table></figure>
<p>更多路由为每个路由都配置中间件并不是一个好的设计，既然中间件和业务逻辑是等价的，那么我们是否可以将路由和中间件进行结合？设计是否可以更人性？既能照顾普适的需求，又能照顾特殊的需求？答案是Yes，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(querystring);</div><div class="line">app.use(cookie); app.use(session);</div><div class="line">app.get(<span class="string">'/user/:username'</span>, getUser); app.put(<span class="string">'/user/:username'</span>, authorize,updateUser);</div></pre></td></tr></table></figure>
<p>为了满足更灵活的设计，这里持续改进我们的use()方法以适应参数的变化，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> handle;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</div><div class="line">    handle = &#123;</div><div class="line">      <span class="comment">// 第一个参数作为路径 path: pathRegexp(path),</span></div><div class="line">      <span class="comment">// 其他的都是处理单元 stack:</span></div><div class="line">      <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    handle = &#123; <span class="comment">// 第一个参数作为路径</span></div><div class="line">      path: pathRegexp(<span class="string">'/'</span>), <span class="comment">// 其他的都是处理单元</span></div><div class="line">      stack: <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  routes.all.push(handle);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>除了改进use()方法外，还要持续改进我们的匹配过程，与前面一旦一次匹配后就不再执行后续匹配不同，还会继续后续逻辑，这里我们将所有匹配到中间件的都暂时保存起来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> match = <span class="function"><span class="keyword">function</span> (<span class="params">pathname, routes</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> stacks = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> route = routes[i];</div><div class="line">    <span class="comment">// 正则匹配 var reg = route.path.regexp;</span></div><div class="line">    <span class="keyword">var</span> matched = reg.exec(pathname);</div><div class="line">    <span class="keyword">if</span> (matched) &#123;</div><div class="line">      <span class="comment">// 抽取具体值 // 代码省略</span></div><div class="line">      <span class="comment">// 将中间件都保存起来 stacks = stacks.concat(route.stack);</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> stacks;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>改进完use()方法后，还要持续改进分发的过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname; <span class="comment">// 将请求方法变为小写</span></div><div class="line">  <span class="keyword">var</span> method = req.method.toLowerCase(); <span class="comment">// 获取all()方法里的中间件</span></div><div class="line">  <span class="keyword">var</span> stacks = match(pathname, routes.all);</div><div class="line">  <span class="keyword">if</span> (routes.hasOwnPerperty(method)) &#123;</div><div class="line">    <span class="comment">// 根据请求方法分发，获取相关的中间件 stacks.concat(match(pathname,</span></div><div class="line">    routes[method]));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stacks.length) &#123;</div><div class="line">  handle(req, res, stacks);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理404请求</span></div><div class="line">  handle404(req, res);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上所述，通过中间件和路由的协作，我们不知不觉之间已经将复杂的事情简化下来，Web应用开发者可以只关注业务开发就能胜任整个开发工作。</p>
<h3 id="8-4-1-异常处理"><a href="#8-4-1-异常处理" class="headerlink" title="8.4.1 异常处理"></a>8.4.1 异常处理</h3><p>异常处理<br>但是等等，如果某个中间件出现错误该怎么办？我们需要为自己构建的Web应用的稳定性和健壮性负责。于是我们为next()方法添加err参数，并捕获中间件直接抛出的同步异常，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, stack</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> handle500(err, req, res, stack);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 从stack数组中取出中间件并执行 var middleware = stack.shift();</span></div><div class="line">    <span class="keyword">if</span> (middleware) &#123; <span class="comment">// 传入next()函数自身，使中间件能够执行结束后递归</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        middleware(req, res, next);</div><div class="line">      &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">        next(err);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行 next();</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> session = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = req.cookies.sessionid;</div><div class="line">  store.get(id, <span class="function"><span class="keyword">function</span> (<span class="params">err, session</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="comment">// 将异常通过next()传递</span></div><div class="line">      <span class="keyword">return</span> next(err);</div><div class="line">    &#125;</div><div class="line">    req.session = session;</div><div class="line">    next();</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Next()方法接到异常对象后，会将其交给handle500()进行处理。为了将中间件的思想延续下去，我们认为进行异常处理的中间件也是能进行数组式处理的。由于要同时传递异常，所以用于处理异常的中间件的设计与普通中间件略有差别，它的参数有4个，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> middleware = <span class="function"><span class="keyword">function</span> (<span class="params">err, req,res, next</span>) </span>&#123;</div><div class="line"><span class="comment">// TODO next();</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们通过use()可以将所有异常处理的中间件注册起来，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123; </div><div class="line">  <span class="comment">// TODO</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为了区分普通中间件和异常处理中间件，handle500()方法将会对中间件按参数进行进行选取，然后递归执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> handle500 = <span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, stack</span>) </span>&#123; <span class="comment">// 选取异常处理中间件</span></div><div class="line">  stack = stack.filter(<span class="function"><span class="keyword">function</span> (<span class="params">middleware</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> middleware.length === <span class="number">4</span>;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 从stack数组中取出中间件并执行</span></div><div class="line">    <span class="keyword">var</span> middleware = stack.shift();</div><div class="line">    <span class="keyword">if</span> (middleware) &#123;</div><div class="line">      <span class="comment">// 传递异常对象 middleware(err, req, res, next);</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 启动执行</span></div><div class="line">  next();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="8-4-2-中间件与性能"><a href="#8-4-2-中间件与性能" class="headerlink" title="8.4.2 中间件与性能"></a>8.4.2 中间件与性能</h3><h3 id="中间件与性能"><a href="#中间件与性能" class="headerlink" title="中间件与性能"></a>中间件与性能</h3><p>前文我们添加了强大的中间件组织能力，如果注意到一个现象的话，那就是我们的业务逻辑往往是在最后才执行。为了让业务逻辑提早执行，尽早响应给终端用户，中间件的编写和使用是需要一番考究的。下面是两个主要的能提升的点。编写高效的中间件。<br>合理利用路由，避免不必要的中间件执行。</p>
<h3 id="编写高效的中间件"><a href="#编写高效的中间件" class="headerlink" title="编写高效的中间件"></a>编写高效的中间件</h3><p>编写高效的中间件其实就是提升单个处理单元的处理速度，以尽早调用next()执行后续逻辑。需要知道的事情是，一旦中间件被匹配，那么每个请求都会使该中间件执行一次，哪怕它只浪费1毫秒的执行时间，都会让我们的QPS显著下降。常见的优化方法有几种。</p>
<p>使用高效的方法。必要时通过<code>jsperf.com</code>测试基准性能。<br>缓存需要重复计算的结果（需要控制缓存用量，原因在第5章阐述过）。避免不必要的计算。比如HTTP报文体的解析，对于GET方法完全不需要。</p>
<p>合理使用路由<br>在拥有一堆高效的中间件后，并不意味着每个中间件我们都使用，合理的路由使得不必要的中间件不参与请求处理的过程。这里以一个示例来说明该问题。假设我们这里有一个静态文件的中间件，它会对请求进行判断，如果磁盘上存在对应文件，就响应对应的静态文件，否则就交由下游中间件处理，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> staticFile = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">  fs.readFile(path.join(ROOT, pathname), <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> next();</div><div class="line">    &#125;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(file);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如果我们以如下的方式注册路由：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(staticFile);</div></pre></td></tr></table></figure></p>
<p>那么意味着对/路径下的所有URL请求都会进行判断。又由于它中间涉及到了磁盘I/O，如果成功匹配，它的效率还行，但是如果不成功匹配，每次的磁盘I/O都是对性能的浪费，使QPS直线下降。</p>
<p>对于这种情况，我们需要做的是提升匹配成功率，那么就不能使用默认的/路径来进行匹配了，因为它的误伤率太高。给它添加一个更好的路由路径是个不错的选择，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.use(<span class="string">'/public'</span>, staticFile);</div></pre></td></tr></table></figure>
<p>这样只有/public路径会匹配上，其余路径根本不会涉及该中间件。</p>
<h3 id="8-4-3-小结"><a href="#8-4-3-小结" class="headerlink" title="8.4.3 小结"></a>8.4.3 小结</h3><p>中间件使得前文的基础功能，从凌乱的发散状态收敛成很规整的组织方式。对于单个中间件而言，它足够简单，职责单一。与像面条一样杂糅在一起的逻辑判断相比，它具备更好的可测试性。中间件机制使得Web应用具备良好的可扩展性和可组合性，可以轻易地进行数据增删。从某种角度来讲它就是Unix哲学的一个实现，专注简单，小而美，然后通过组合使用，发挥出强大的能</p>
<p>中间件是Connect的经典模式，通过本节的叙述，我们已经可以看到整个Connect是如何搭建轮廓的。本节试图解释Web开发过程的前置思路，省略了许多细节，尽管与实际的Connect代码不尽相同，希望借着这些思路，每位开发者都能独立写出适应自己业务需求的框架。</p>
<h2 id="8-5-页面渲染"><a href="#8-5-页面渲染" class="headerlink" title="8.5 页面渲染"></a>8.5 页面渲染</h2><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><p>通过中间件机制组织基础功能完成我们的请求预处理后，不管是通过MVC还是通过RESTful路由，开发者或者是调用了数据库，或者是进行了文件操作，或者是处理了内存，这时我们终于来到了响应客户端的部分了。这里的“页面渲染”是个狭义的标题，我们其实响应的可能是一个HTML网页，也可能是CSS、JS文件，或者是其他多媒体文件。这里我们要承接上文谈论的HTTP响应实现的技术细节，主要包含内容响应和页面渲染两个部分。</p>
<p>对于过去流行的ASP、PHP、JSP等动态网页技术，页面渲染是一种内置的功能。但对于Node来说，它并没有这样的内置功能，在本节的介绍中，你会看到正是因为标准功能的缺失，我们可以更贴近底层，发展出更多更好的渲染技术，社区的创造力使得Node在HTTP响应上呈现出更加丰富多彩的状态。</p>
<h3 id="8-5-1-内容响应"><a href="#8-5-1-内容响应" class="headerlink" title="8.5.1 内容响应"></a>8.5.1 内容响应</h3><h3 id="内容响应"><a href="#内容响应" class="headerlink" title="内容响应"></a>内容响应</h3><p>在第7章我们介绍了http模块封装了对请求报文和响应报文的操作，在这里我们则展开说明应用层该如何使用响应的封装。服务器端响应的报文，最终都要被终端处理。这个终端可能是命令行终端，也可能是代码终端，也可能是浏览器。服务器端的响应从一定程度上决定或指示了客户端该如何处理响应的内容。内容响应的过程中，响应报头中的Content-*字段十分重要。在下面的示例响应报文中，服务端告知客户端内容是以gzip编码的，其内容长度为21 170个字节，内容类型为JavaScript，字符集为UTF-8：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Encoding: gzip </div><div class="line">Content-Length: 21170</div><div class="line">Content-Type: text/javascript; </div><div class="line">charset=utf-8</div></pre></td></tr></table></figure>
<p>客户端在接收到这个报文后，正确的处理过程是通过gzip来解码报文体中的内容，用长度校验报文体内容是否正确，然后再以字符集UTF-8将解码后的脚本插入到文档节点中。</p>
<h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p>如果想要客户端用正确的方式来处理响应内容，了解MIME必不可少。可以先猜想一下下面两段代码在客户端会有什么样的差异：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">res.end(<span class="string">'&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">res.end(<span class="string">'&lt;html&gt;&lt;body&gt;Hello World&lt;/body&gt;&lt;/html&gt;\n'</span>);</div></pre></td></tr></table></figure>
<p>在网页中，前者显示的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello</div><div class="line">World<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>，</div></pre></td></tr></table></figure>
<p>而后者只能看到Hello World，如图8-5所示。</p>
<p>没错，引起上述差异的原因就在于它们的<code>Content-Type</code>字段的值是不同的。浏览器对内容采用了不同的处理方式，前者为纯文本，后者为HTML，并渲染了DOM树。浏览器正是通过不同的<code>Content-Type</code>的值来决定采用不同的渲染方式，这个值我们简称为MIME值。</p>
<p>MIME的全称是<code>Multipurpose Internet Mail Extensions</code>，从名字可以看出，它最早用于电子邮件，后来也应用到浏览器中。不同的文件类型具有不同的MIME值，如JSON文件的值为<code>application/json</code>、XML文件的值为<code>application/xml</code>、PDF文件的值为<code>application/pdf</code>。</p>
<p>为了方便获知文件的MIME值，社区有专有的mime模块可以用判段文件类型。它的调用十分简</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</div><div class="line">mime.lookup(<span class="string">'/path/to/file.txt'</span>); <span class="comment">// =&gt; 'text/plain'</span></div><div class="line">mime.lookup(<span class="string">'file.txt'</span>); <span class="comment">// =&gt; 'text/plain' </span></div><div class="line">mime.lookup(<span class="string">'.TXT'</span>); <span class="comment">// =&gt; 'text/plain'</span></div><div class="line">mime.lookup(<span class="string">'htm'</span>); <span class="comment">// =&gt; 'text/html'</span></div></pre></td></tr></table></figure>
<p>除了MIME值外，Content-Type的值中还可以包含一些参数，如字符集。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type: text/javascript; charset=utf-8</div></pre></td></tr></table></figure>
<h3 id="8-5-2-视图渲染"><a href="#8-5-2-视图渲染" class="headerlink" title="8.5.2 视图渲染"></a>8.5.2 视图渲染</h3><p><strong>视图渲染</strong></p>
<p>Web应用的内容响应形式十分丰富，可以是静态文件内容，也可以是其他附件文件，也可以是跳转等。这里我们回到主流的普通的HTML内容的响应上，总称视图渲染。Web应用最终呈现在界面上的内容，都是通过一系列的视图渲染呈现出来的。在动态页面技术中，最终的视图是由模板和数据共同生成出来的。模板是带有特殊标签的HTML片段，通过与数据的渲染，将数据填充到这些特殊标签中，最后生成普通的带数据的HTML片段。</p>
<h3 id="8-5-3-模板"><a href="#8-5-3-模板" class="headerlink" title="8.5.3 模板"></a>8.5.3 模板</h3><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>最早的服务器端动态页面开发，是在CGI程序或servlet中输出HTML片段，通过网络流输出到客户端，客户端将其渲染到用户界面上。</p>
<p>这种逻辑代码与HTML输出的代码混杂在一起的开发方式，导致一个小小的UI改动都要大动干戈，甚至需要重新编译。为了改良这种情况，使HTML与逻辑代码分离开来，催生出一些服务器端动态网页技术，如ASP、PHP、JSP。</p>
<p>它们将动态语言部分通过特殊的标签（ASP和JSP以<code>&lt;% %&gt;</code>作为标志，PHP则以<code>&lt;? ?&gt;</code>作为标志）包含起来，通过HTML和模板标签混排，将开发者从输出HTML的工作中解脱出来。这样的方法虽然一定程度上减轻了开发维护的难度，但是页面里还是充斥着大量的逻辑代码。这催生了MVC在动态网页技术中的发展，MVC将逻辑、显示、数据分离开来的方式，大大提高了项目的可维护性。其中模板技术就在这样的发展中逐渐成熟起来的.</p>
<p>尽管模板技术看起来在MVC时期才广泛使用，但不可否认的是如ASP、PHP、JSP，它们其实就是最早的模板技术。模板技术虽然多种多样，但它的实质就是将模板文件和数据通过模板引擎生成最终的HTML代码。形成模板技术的也就如下4个要素:</p>
<ul>
<li>模板语言。</li>
<li>包含模板语言的模板文件。</li>
<li>拥有动态数据的数据对象。</li>
<li>模板引擎。</li>
</ul>
<p>对于ASP、PHP、JSP而言，模板属于服务器端动态页面的内置功能，模板语言就是它们的宿主语言（VBScript、JScript、PHP、Java），模板文件就是以<code>.php</code>、<code>.asp</code>、<code>.jsp</code> 为后缀的文件，模板引擎就是Web容器。<br>这个时期的模板极度依赖上下文，甚至要处理整个HTTP的请求对象。随后模板语言的发展使得模板可以脱离上下文环境，只有数据对象就可以执行。如PHP中的<code>PHPLIB Template</code>和<code>FastTemplate</code>、<code>Java</code>的<code>XSTL</code>，以及<code>Velocity</code>、<code>JDynamiTe</code>、<code>Tapestry</code>等模板。</p>
<p><strong>这类模板的缺点在于它的实现与宿主语言有很大的关联性，由于各种语言采用的模板语言不同，包含各种特殊标记，导致移植性较差。早期的企业一旦选定编程语言就不会轻易地转换环境，所以较少有开发者去开发新的模板语言和模板引擎来适应不同的编程语言。如今异构系统越来越多，模板能够应用到多门编程语言中的这种需求也开始呈现出来.</strong> </p>
<p>破局者是Mustache，它宣称自己是<code>弱逻辑的模板</code>（<code>logic-less templates</code>），定义了以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;&#123;&#125;&#125;</div></pre></td></tr></table></figure>
<p>为标志的一套模板语言，并给出了十多门编程语言的模板引擎实现，使得采用它作为模板具备很好的可移植性。但随着Node在社区的发展，思路很快被打开，模板语言可以随意创造，模板引擎也可以随意实现。Node社区目前与模板引擎相关模块的列表差不多要滚3个屏幕才能看完。并且由于Node与前端都采用相同的执行语言JavaScript，所以一套模板语言也无须为它编写两套不同的模板引擎就能轻松地跨前后端共用。</p>
<p>模板和数据与最终结果相比，这里有一个静态、动态的划分过程，相同的模板和不同的数据可以得到不同的结果，不同的模板与相同的数据也能得到不同的结果。模板技术使得网页中的动态内容和静态内容变得不互相依赖，数据开发者与模板开发者只要约定好数据结构</p>
<p>但模板技术并不是什么神秘的技术，它干的实际上是拼接字符串这样很底层的活，只是各种模板有着各自的优缺点和技巧。说模板是拼接字符串并不为过，我们要的就是模板加数据，通过模板引擎的执行就能得到最终的HTML字符串这样结果。</p>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>为了演示模板引擎的技术，我们将通过render()方法实现一个简单的模板引擎。这个模板引擎会将Hello &lt;%= username%&gt;转换为”Hello “ + obj.username。该过程进行以下几个步骤。语法分解。提取出普通字符串和表达式，这个过程通常用正则表达式匹配出来，<code>&lt;%=%&gt;</code>的正则表达式为<code>/&lt;%=([\s\S]+?)%&gt;/g</code> 。</p>
<p>处理表达式。将标签表达式转换成普通的语言表达式。</p>
<p>生成待执行的语句。</p>
<p>与数据一起执行，生成最终字符串。</p>
<p>知晓了流程，模板函数就可以轻松愉快地开工了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123; <span class="comment">// 模板技术呢，就是替换特殊标签的技术</span></div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + obj."</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line">  <span class="keyword">var</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div><div class="line">  <span class="keyword">return</span> complied(data);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tpl = <span class="string">'Hello &lt;%=username%&gt;.'</span>;</div><div class="line"><span class="built_in">console</span>.log(render(tpl, &#123;</div><div class="line">  <span class="attr">username</span>: <span class="string">'Jackson Tian'</span></div><div class="line">&#125;)); <span class="comment">// =&gt; Hello Jackson Tian.</span></div></pre></td></tr></table></figure>
<h3 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h3><p>上述代码的实现过程中，可以看到有部分内容前文没有提及，它的内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line"><span class="keyword">var</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div></pre></td></tr></table></figure>
<p>为了能够最终与数据一起执行生成字符串，我们需要将原始的模板字符串转换成一个函数对象。比如Hello &lt;%=username%&gt;这句模板字符串，最终会生成如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = <span class="string">'Hello '</span> + obj.username + <span class="string">'.'</span>;</div><div class="line">  <span class="keyword">return</span> tpl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个过程称为模板编译，生成的中间函数只与模板字符串相关，与具体的数据无关。如果每次都生成这个中间函数，就会浪费CPU。为了提升模板渲染的性能速度，我们通常会采用模板预编译的方式。是故，上面的代码可以拆解为两个方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + obj."</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"var tpl = '"</span> + tpl + <span class="string">"'\nreturn tpl;"</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj, escape'</span>, tpl);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">complied, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> complied(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过预编译缓存模板编译后的结果，实际应用中就可以实现一次编译，多次执行，而原始的方式每次执行过程中都要进行一次编译和执行。</p>
<p><strong>with的应用</strong></p>
<p>上面实现的模板引擎非常弱，只能替换变量，&lt;%=”Jackson Tian”%&gt;就无法支持了。为了让它更灵活，我们需要改进它的实现，使字符串能继续表达为字符串，变量能够自动寻找属于它的对象。于是with关键字引入到我们的实现中。with关键字是JavaScript中饱受Douglas Crockford指责的设计，细节在本书附录C中有详细描述。但在这里，with关键字可以得到很方便的应用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// 模板技术呢，就是替换特殊标签的技术 </span></div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"' + "</span> + code + <span class="string">"+ '"</span>;</div><div class="line">  &#125;);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"'"</span>;</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj) &#123;'</span> + tpl + <span class="string">'&#125;\nreturn tpl;'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>普通字符串就直接输出，变量code的值则是obj[code]。关于new Function()，这里通过它创建了一个函数对象，它的语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Function</span> ([arg1[, arg2[, ... argN]],] functionBody)<span class="built_in">Function</span>()</div></pre></td></tr></table></figure>
<p>构造函数接受多个参数，最后一个参数作为函数体的内容，其余参数都会用来作为新生成的函数的参数列表。</p>
<h3 id="模板安全"><a href="#模板安全" class="headerlink" title="模板安全"></a>模板安全</h3><p>前文提到过XSS漏洞，它的产生大多跟模板相关，如果上文中的username的值为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"I am XSS."</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么模板渲染输出的字符串将会是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello &lt;script&gt;alert(&quot;I am XSS.&quot;)&lt;/script&gt;.</div></pre></td></tr></table></figure>
<p>这会在页面上执行这个脚本，如果恰好这里的username是在URL的查询字符上输入的，这就构成了XSS漏洞。为了提高安全性，大多数模板都提供了转义的功能。转义就是将能形成HTML标签的字符转换成安全的字符，这些字符主要有<code>&amp;、&lt;、&gt;、&quot;、&#39;</code> 。转义函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">String</span>(html).replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">'&amp;amp;'</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</div><div class="line">    .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#039;'</span>); <span class="comment">// IE下不支持&amp;apos;（单引号）转义</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不确定要输出HTML标签的字符最好都转义，为了让转义和非转义表现得更方便，&lt;%=%&gt;和&lt;%-%&gt;分别表示为转义和非转义的情况，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span> (<span class="params">str, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>) <span class="comment">// 将换行符替换</span></div><div class="line">    .replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 转义</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"' + escape("</span> + code + <span class="string">") + '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">      <span class="comment">// 正常输出 return "' + " + code + "+ '";</span></div><div class="line">    &#125;);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"'"</span>;</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj) &#123;'</span> + tpl + <span class="string">'&#125;\nreturn tpl;'</span>; <span class="comment">// 加上escape()函数</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, <span class="string">'escape'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>模板引擎通过正则分别匹配-和=并区别对待，最后不要忘记传入escape()函数。最终上面的危险代码会转换为安全的输出，如下所示：Hello &lt;script&gt;alert(&quot;I am XSS.&quot;)&lt;/script&gt;.<br>因此，在模板技术的使用中，时刻不要忘记转义，尤其是与输入有关的变量一定要转义。</p>
<p>模板逻辑尽管模板技术已经将业务逻辑与视图部分分离开来，但是视图上还是会存在一些逻辑来控制页面的最终渲染。为了让上述模板变得强大一点，我们为它添加逻辑代码，使得模板可以像ASP、PHP那样控制页面渲染。</p>
<p>譬如下面的代码，结果HTML与输入数据相关：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;% if (user) &#123; %&gt; &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;</div><div class="line">&lt;% &#125; else &#123; %&gt; &lt;h2&gt;匿名用户&lt;/h2&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>它要编译成的函数应该是如下这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">obj, escape</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = <span class="string">""</span>;</div><div class="line">  <span class="keyword">with</span>(obj) &#123;</div><div class="line">    <span class="keyword">if</span> (user) &#123;</div><div class="line">      tpl += <span class="string">"&lt;h2&gt;"</span> + <span class="built_in">escape</span>(user.name) + <span class="string">"&lt;/h2&gt;"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      tpl += <span class="string">"&lt;h2&gt;匿名用户&lt;/h2&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> tpl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模板引擎拼接字符串的原理还是通过正则表达式进行匹配替换，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> complie = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>) <span class="comment">// 将换行符替换</span></div><div class="line">    .replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 转义</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"' + escape("</span> + code + <span class="string">") + '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%=([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">      <span class="comment">// 正常输出 return "' + " + code + "+ '";</span></div><div class="line">    &#125;).replace(<span class="regexp">/&lt;%([\s\S]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123; <span class="comment">// 可执行代码</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"';\n"</span> + code + <span class="string">"\ntpl += '"</span>;</div><div class="line">    &#125;).replace(<span class="regexp">/\'\n/g</span>, <span class="string">'\''</span>)</div><div class="line">    .replace(<span class="regexp">/\n\'/gm</span>, <span class="string">'\''</span>);</div><div class="line">  tpl = <span class="string">"tpl = '"</span> + tpl + <span class="string">"';"</span>; <span class="comment">// 转换空行</span></div><div class="line">  tpl = tpl.replace(<span class="regexp">/''/g</span>, <span class="string">'\'\\n\''</span>);</div><div class="line">  tpl = <span class="string">'var tpl = "";\nwith (obj || &#123;&#125;) &#123;\n'</span> + tpl + <span class="string">'\n&#125;\nreturn tpl;'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'obj'</span>, <span class="string">'escape'</span>, tpl);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>完成上面的实现后，试试成果，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [</div><div class="line">  <span class="string">'&lt;% if (user) &#123; %&gt;'</span>, <span class="string">'&lt;h2&gt;&lt;%=user.name%&gt;&lt;/h2&gt;'</span>,</div><div class="line">  <span class="string">'&lt;% &#125; else &#123; %&gt;'</span>, <span class="string">'&lt;h2&gt;匿名用户&lt;/h2&gt;'</span>,</div><div class="line">  <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div><div class="line">render(complie(tpl), &#123;</div><div class="line">  <span class="attr">user</span>: &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Jackson Tian'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>得到的输出内容如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Jackson Tian<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来在不传递user时试试，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">render(complie(tpl), &#123;&#125;);</div></pre></td></tr></table></figure>
<p>结果是遗憾地得到异常信息，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="literal">undefined</span>:<span class="number">5</span></div><div class="line"><span class="keyword">if</span> (user) &#123; ^</div><div class="line"><span class="built_in">ReferenceError</span>: user is not defined</div></pre></td></tr></table></figure>
<p>为了程序的健壮性，需要将模板写得健壮一点，对于不确定是否存在的属性，应该为它加上引用，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [<span class="string">'&lt;% if (obj.user) &#123; %&gt;'</span>,</div><div class="line">  <span class="string">'&lt;h2&gt;&lt;%=user.name%&gt;&lt;/h2&gt;'</span>, <span class="string">'&lt;% &#125; else &#123; %&gt;'</span>,</div><div class="line">  <span class="string">'&lt;h2&gt;匿名用户&lt;/h2&gt;'</span>, <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div></pre></td></tr></table></figure>
<p>EJS中，它的变量不是obj，而是locals，这里的值与模板引擎中的with语句有关。重新执行上面的示例，得到的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>匿名用户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此外，实现了执行表达式的模板引擎还能进行循环，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = [</div><div class="line">  <span class="string">'&lt;% for (var i = 0; i &lt; items.length; i++) &#123; %&gt;'</span>, <span class="string">'&lt;%var item = items[i];%&gt;'</span>,</div><div class="line">  <span class="string">'&lt;p&gt;&lt;%= i+1 %&gt;、&lt;%=item.name%&gt;&lt;/p&gt;'</span>, <span class="string">'&lt;% &#125; %&gt;'</span></div><div class="line">].join(<span class="string">'\n'</span>);</div><div class="line">render(complie(tpl), &#123;</div><div class="line">  <span class="attr">items</span>: [&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Jackson'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'朴灵'</span></div><div class="line">  &#125;]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>得到的输出如下所示：<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1、Jackson<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2、朴灵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如此，我们实现的模板引擎已经能够处理输出和逻辑了，视图的渲染逻辑不成问题。</p>
<h3 id="集成文件系统"><a href="#集成文件系统" class="headerlink" title="集成文件系统"></a>集成文件系统</h3><p>前文我们实现的complie()和render()函数已经能够实现将输入的模板字符串进行编译和替换的功能。如果与前文的HTTP响应对象组合起来处理的话，我们响应一个客户端的请求大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  fs.readFile(<span class="string">'file/path'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, text</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">      &#125;);</div><div class="line">      res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> html = render(complie(text), data);</div><div class="line">    res.end(html);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样的响应体验并不友好，其缺点有如下几点。每次请求需要反复读磁盘上的模板文件。<br>每次请求需要编译。调用烦琐。<br>如果你记性不差的话，应该知道大多数的MVC框架在做渲染时都只有一个简单的render()方法，所以我们也需要一个更简洁、性能更好的render()函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> VIEW_FOLDER = <span class="string">'/path/to/wwwroot/views'</span>;</div><div class="line">res.render = <span class="function"><span class="keyword">function</span> (<span class="params">viewname, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!cache[viewname]) &#123;</div><div class="line">    <span class="keyword">var</span> text;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      text = fs.readFileSync(path.join(VIEW_FOLDER, viewname), <span class="string">'utf8'</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">      &#125;);</div><div class="line">      res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    cache[viewname] = complie(text);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> complied = cache[viewname];</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> html = complied(data);</div><div class="line">  res.end(html);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个res.render()实现中，虽然有同步读取文件的情况，但是由于采用了缓存，只会在第一次读取的时候造成整个进程的阻塞，一旦缓存生效，将不会反复读取模板文件。其次，缓存之前已经进行了编译，也不会每次读取都编译。</p>
<p>封装完渲染函数之后，我们的调用就很轻松了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/path'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'viewname'</span>, &#123;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>与文件系统集成之后，再引入缓存，可以很好地解决性能问题，接口也大大得到简化。由于模板文件内容都不太大，也不属于动态改动的，所以使用进程的内存来缓存编译结果，并不会引起太大的垃圾回收问题。</p>
<h3 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h3><p>有时候模板文件太大，太过复杂，会增加维护上的难度，而且有些模板是可以重用的，这催生了子模板（Partial View）的产生。子模板可以嵌套在别的模板中，多个模板可以嵌入同一个子模板中。维护多个子模板比维护完整而复杂的大模板的成本要低很多，很多复杂问题可以降解为多个小而简单的问题</p>
<h3 id="布局视图"><a href="#布局视图" class="headerlink" title="布局视图"></a>布局视图</h3><p>子模板主要是为了重用模板和降低模板的复杂度。子模板的另一种使用方式就是布局视图（layout），布局视图又称母版页，它与子模板的原理相同，但是场景稍有区别。一般而言模板指定了子模板，那它的子模板就无法进行替换了，子模板被嵌入到多个父模板中属于正常需求，但是如果在多个父模板中只是嵌入的子视图不同，模板内容却完全一样，也会出现重复。比如下面两个简单的父模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 模板1</div><div class="line">&lt;ul&gt; &lt;% users.forEach(function(user)&#123; %&gt;</div><div class="line">&lt;% include user/show %&gt; &lt;% &#125;) %&gt;</div><div class="line">&lt;/ul&gt; // 模板2</div><div class="line">&lt;ul&gt; &lt;% users.forEach(function(user)&#123; %&gt;</div><div class="line">&lt;% include profile %&gt; &lt;% &#125;) %&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些重复的内容主要用来布局，为了能将这些布局模板重用起来，模板技术必须支持布局视图。支持布局视图之后，布局模板就只有一份，渲染视图时，指定好布局视图就可以了，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render(<span class="string">'viewname'</span>, &#123;</div><div class="line">  <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">  <span class="attr">users</span>: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>对于布局模板文件，我们设计为将&lt;%- body %&gt;部分替换为我们的子模板，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">%</span> <span class="attr">users.forEach</span>(<span class="attr">function</span>(<span class="attr">user</span>)&#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">body</span> %&gt;</span> <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>替换代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> renderLayout = <span class="function"><span class="keyword">function</span> (<span class="params">str, viewname</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;%-\s*body\s*%&gt;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, code</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!cache[viewname]) &#123;</div><div class="line">      cache[viewname] = fs.readFileSync(fs.join(VIEW_FOLDER, viewname), <span class="string">'utf8'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cache[viewname];</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>最终集成进res.render()函数，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render = <span class="function"><span class="keyword">function</span> (<span class="params">viewname, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> layout = data.layout;</div><div class="line">  <span class="keyword">if</span> (layout) &#123;</div><div class="line">    <span class="keyword">if</span> (!cache[layout]) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        cache[layout] = fs.readFileSync(path.join(VIEW_FOLDER, layout), <span class="string">'utf8'</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">        &#125;);</div><div class="line">        res.end(<span class="string">'布局文件错误'</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> layoutContent = cache[layout] || <span class="string">'&lt;%-body%&gt;'</span>;</div><div class="line">  <span class="keyword">var</span> replaced;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    replaced = renderLayout(layoutContent, viewname);</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    res.writeHead(<span class="number">500</span>, &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">    &#125;);</div><div class="line">    res.end(<span class="string">'模板文件错误'</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 将模板和布局文件名做key缓存 var key = viewname + ':' + (layout || '');</span></div><div class="line">  <span class="keyword">if</span> (!cache[key]) &#123; <span class="comment">// 编译模板</span></div><div class="line">    cache[key] = cache(replaced);</div><div class="line">  &#125;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">var</span> html = cache[key](data);</div><div class="line">  res.end(html);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如此，我们可以轻松地实现重用布局文件，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">res.render(<span class="string">'user'</span>, &#123;</div><div class="line">  <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">  <span class="attr">users</span>: []</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>模板引擎的优化步骤，主要有如下几种。</p>
<ul>
<li>缓存模板文件。</li>
<li>缓存模板文件编译后的函数。</li>
</ul>
<p>完成上述两个步骤之后，渲染的性能与生成的函数直接相关，这个函数与模板字符串的复杂度有直接关系。如果在模板中编写了执行表达式，执行表达式的性能将直接影响模板的性能。优化执行表达式就是对模板性能的优化，所以加入一条优化步骤：<strong>优化模板中的执行表达式</strong></p>
<p>除了这几个常见的方案外，模板引擎的实现也与性能相关。本节的实现中采用了new Function()，事实上还可以使用eval()；对于字符串处理，本节中用的是字符串直接相加，有的模板引擎采用数组存储的方式，最后将所有字符串相连。对于变量的查找，本节采用的是with形成作用域的方式实现了查找，有的模板引擎采用了本节第一种方式，即指定变量名的方式（obj.username）查找，指定变量而不用with可以减少切换上下文。这些细节都是影响模板速度的因素。由于现有模板引擎数量巨多，此处不再做比较。</p>
<p>模板技术的出现，将业务开发与HTML输出的工作分离开来，它的设计原理就是单一职责原理。这与MVC中的数据、逻辑、视图分离如出一辙，更与前端HTML、CSS、JavaScript分离的设计理念一致，让视觉、结构、逻辑分离开来。随着Node的出现，模板能够在前后端共用实在是太寻常不过的事情，甚至都不用去重复实现引擎。本节介绍了模板的基本原理，如今各种各样的模板具备不同的特性和性能。最知名的有EJS、Jade等，它们在模板语言的设计上各不相同，EJS是ASP、PHP、JSP风格的模板标签，Jade则类似Python、Ruby的风格。</p>
<h3 id="8-5-4-Bigpipe"><a href="#8-5-4-Bigpipe" class="headerlink" title="8.5.4 Bigpipe"></a>8.5.4 Bigpipe</h3><p>Bagpipe的翻译为风笛，是用于调用限流的</p>
<p>Bigpipe是产生于Facebook公司的前端加载技术，它的提出主要是为了解决重数据页面的加载速度问题，在2010年的Velocity会议上，当时来自Facebook的<strong>蒋长浩</strong>先生分享了该议题，随后引起了国内业界巨大的反响。</p>
<p>这里以一个简单的例子说明下前文提到的MVC和模板技术潜在的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/profile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  db.getData(<span class="string">'sql1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, users</span>) </span>&#123;</div><div class="line">    db.getData(<span class="string">'sql2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, articles</span>) </span>&#123;</div><div class="line">      res.render(<span class="string">'user'</span>, &#123;</div><div class="line">        <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">        <span class="attr">users</span>: users,</div><div class="line">        <span class="attr">articles</span>: articles</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个例子中，我们渲染profile页面需要获取users和articles数据，然后通过布局文件layout和模板文件user，最终发出页面到浏览器端。排除掉模板文件和布局文件可能同步的影响，将无依赖的数据获取通过EventProxy解开，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/profile'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ep = <span class="keyword">new</span> EventProxy();</div><div class="line">  ep.all(<span class="string">'users'</span>, <span class="string">'articles'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">users, articles</span>) </span>&#123;</div><div class="line">    res.render(<span class="string">'user'</span>, &#123;</div><div class="line">      <span class="attr">layout</span>: <span class="string">'layout.html'</span>,</div><div class="line">      <span class="attr">users</span>: users,</div><div class="line">      <span class="attr">articles</span>: articles</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  ep.fail(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.render(<span class="string">'err'</span>, &#123;</div><div class="line">      <span class="attr">message</span>: err.message</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  db.getData(<span class="string">'sql1'</span>, ep.done(<span class="string">'users'</span>));</div><div class="line">  db.getData(<span class="string">'sql2'</span>, ep.done(<span class="string">'articles'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此还存在的问题是什么？</p>
<p>问题在于我们的页面，最终的HTML要在所有的数据获取完成后才输出到浏览器端。Node通过异步已经将多个数据源的获取并行起来了，最终的页面输出速度取决于两个数据请求中响应时间慢的那个。在数据响应之前，用户看到的是空白页面，这是十分不友好的用户体验</p>
<p>Bigpipe的解决思路则是将页面分割成多个部分（pagelet），先向用户输出没有数据的布局（框架），将每个部分逐步输出到前端，再最终渲染填充框架，完成整个网页的渲染。这个过程中需要前端JavaScript的参与，它负责将后续输出的数据渲染到页面上。</p>
<p>Bigpipe是一个需要前后端配合实现的优化技术，这个技术有几个重要的点。页面布局框架（无数据的）。<br>后端持续性的数据输出。前端渲染。</p>
<p>Bigpipe的渲染流程示意图如图8-8所示。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入浅出Node-js&quot;&gt;&lt;a href=&quot;#深入浅出Node-js&quot; class=&quot;headerlink&quot; title=&quot;深入浅出Node.js&quot;&gt;&lt;/a&gt;深入浅出Node.js&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;朴灵&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-
    
    </summary>
    
      <category term="Node" scheme="http://www.wanglinzhizhi.me/categories/Node/"/>
    
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/tags/JS/"/>
    
      <category term="Node" scheme="http://www.wanglinzhizhi.me/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>易车专题视频插入方法</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/%E4%B8%93%E9%A2%98%E6%8F%92%E5%85%A5%E6%98%93%E8%BD%A6%E8%A7%86%E9%A2%91%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/专题插入易车视频那点事/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="易车专题视频插入方法"><a href="#易车专题视频插入方法" class="headerlink" title="易车专题视频插入方法"></a>易车专题视频插入方法</h3><p>视频官网对于视频脚本做了修改，主要改动针对移动端</p>
<blockquote>
<p>1 加入缩略图 (poster)</p>
<p>2 可以配置移动端视频地址以适应移动端视频播放 (mobileFileUrl)</p>
</blockquote>
<p>前端开发部针对以上改动更新了专题中插入视频的方法</p>
<p>示例 ：<a href="http://admin.bitauto.com/editortest/zhangzhe/standard/video-test.html" target="_blank" rel="external">http://admin.bitauto.com/editortest/zhangzhe/standard/video-test.html</a></p>
<blockquote>
<p>PS：更新基于上一版，使用方法基本一致</p>
</blockquote>
<p>详情说明：</p>
<p>1 引入线上视频脚本(也可下载到本地)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://www.bitauto.com/zhuanti/adtopic/js/video20151009.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>2 主要js (如无需要，无需改动)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*--在页面中插入视频--*/</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="string">"localUrl"</span>: <span class="string">" "</span>,</div><div class="line">    <span class="string">"width"</span>: <span class="string">"100%"</span>, </div><div class="line">    <span class="string">"height"</span>: <span class="string">"100%"</span>, </div><div class="line">    <span class="string">"id"</span>: <span class="string">"vplayer"</span>, </div><div class="line">    <span class="string">"playerUrl"</span>: <span class="string">"http://img1.bitautoimg.com/video/player/yiche1507021.swf"</span>,</div><div class="line">    <span class="string">"videoId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"playerType"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"autoPlay"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"partnerVideoId"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"poster"</span>:<span class="string">""</span>,</div><div class="line">    <span class="string">"mobileFileUrl"</span>: <span class="string">""</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addVideo</span>(<span class="params">videoBox,i</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vid = videoBox.eq(i).data(<span class="string">"vid"</span>);</div><div class="line">    <span class="keyword">var</span> posterPic = videoBox.eq(i).data(<span class="string">"poster"</span>);</div><div class="line">    <span class="keyword">var</span> mobi = videoBox.eq(i).data(<span class="string">"mobi"</span>);</div><div class="line">    options.poster = posterPic;</div><div class="line">    options.localUrl = <span class="string">"http://v.bitauto.com/vbase/LocalPlayer/GetPlayVideo?videoid="</span>+vid ;</div><div class="line">    options.videoId = vid;</div><div class="line">    options.mobileFileUrl = mobi;</div><div class="line">    <span class="keyword">var</span> player= BitautoVideo.GetPlayer(options);</div><div class="line">    <span class="keyword">return</span> player;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">playVideo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> videoBox = $(<span class="string">".vid-box"</span>)</div><div class="line">    videoBox.each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).append(addVideo(videoBox,i))</div><div class="line">    &#125;)</div><div class="line">&#125; </div><div class="line">playVideo()</div></pre></td></tr></table></figure>
<blockquote>
<p>PS：此代码在暂停和播放完毕时会有易车推荐视频模块，对于有需求的客户可以去掉,方法为将 playerUrl 值替换为 : <a href="http://img1.bitautoimg.com/video/player/yiche1507021.swf?showPauseUi=0&amp;showEndUi=0" target="_blank" rel="external">http://img1.bitautoimg.com/video/player/yiche1507021.swf?showPauseUi=0&amp;showEndUi=0</a></p>
</blockquote>
<p>3 每个视频的DOM结构约定为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vid-box"</span> <span class="attr">data-vid</span>=<span class="string">"442103"</span> <span class="attr">data-poster</span>=<span class="string">"http://img1.bitautoimg.com/newsimg-480-w0/Video/2016/12/18/20161218214335680.jpg"</span> <span class="attr">data-mobi</span>=<span class="string">"/2014/2016/12/18/fc94939fbef8f65a-sd.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>vid-box ：视频容器class  (视频宽高默认为100%，所以视频表现大小为vid-box的大小)</p>
<p>data-vid ：视频ID</p>
<p>data-poster ：移动端缩略图地址 (pc视频可不写此属性)</p>
<p>data-mobi ：移动端视频地址 (pc视频可不写此属性)</p>
<p>4 一些特殊情况</p>
<blockquote>
<p>以上是主要方法，但是在实际应用中，我们经常遇到选项卡视频的场景；<br>由于易车视频播放器没有暂停/播放的js接口，在播放过程中切换选项卡并不能暂停视频；<br>所以…思路是，在切换到对应的tab插时入对应的视频，同时删除上一个正在播放的视频节点，</p>
</blockquote>
<p>在tab中做如下判断处理(下为示例，可根据实际情况改动)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//tab切换中的视频</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tab</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> videoBox = obj.find(<span class="string">".vid-box"</span>)</div><div class="line">    videoBox.eq(<span class="number">0</span>).addClass(<span class="string">"playing"</span>)</div><div class="line">    obj.find(<span class="string">".hd a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> playing = $(<span class="string">".playing"</span>)</div><div class="line">        <span class="keyword">var</span> idx = $(<span class="keyword">this</span>).index();</div><div class="line">        $(<span class="string">".playing"</span>).removeClass(<span class="string">"playing"</span>).children().remove()</div><div class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"on"</span>).siblings(<span class="string">"a"</span>).removeClass(<span class="string">"on"</span>);</div><div class="line">        <span class="keyword">if</span>(videoBox.eq(idx).children().length&gt;<span class="number">0</span>)&#123;</div><div class="line">            videoBox.eq(idx).addClass(<span class="string">"playing"</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            videoBox.eq(idx).addClass(<span class="string">"playing"</span>).append(addVideo(videoBox,idx));</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">tab($(<span class="string">".tab-video"</span>))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;易车专题视频插入方法&quot;&gt;&lt;a href=&quot;#易车专题视频插入方法&quot; class=&quot;headerlink&quot; title=&quot;易车专题视频插入方法&quot;&gt;&lt;/a&gt;易车专题视频插入方法&lt;/h3&gt;&lt;p&gt;视频官网对于视频脚本做了修改，主要改动针对移动端&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
    
      <category term="易车视频" scheme="http://www.wanglinzhizhi.me/tags/%E6%98%93%E8%BD%A6%E8%A7%86%E9%A2%91/"/>
    
      <category term="专题" scheme="http://www.wanglinzhizhi.me/tags/%E4%B8%93%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Web前端: Ajax Notes</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Ajax%20Notes/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Ajax Notes/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<hr>

<h1 id="Ajax-Notes"><a href="#Ajax-Notes" class="headerlink" title="Ajax Notes"></a>Ajax Notes</h1><p>HTML和CSS 来实现页面，表达信息</p>
<p>运用XMLHttpRequest和web服务器进行数据的异步交换</p>
<p>用javascript 操作DOM,实现动态局部刷新</p>
<hr>

<h2 id="XMLHttpRequest-对象创建"><a href="#XMLHttpRequest-对象创建" class="headerlink" title="XMLHttpRequest 对象创建"></a>XMLHttpRequest 对象创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var request=new XMLHttpRequest();</div></pre></td></tr></table></figure>
<hr>

<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>无状态协议</p>
<p>Get请求:</p>
<ul>
<li>一般用于获取信息(一般用于查询信息)</li>
</ul>
<ul>
<li>使用URL传递参数</li>
</ul>
<ul>
<li>对所发送信息的数量也有限制,一般在2000个字符以内.</li>
</ul>
<p>Notes：GET请求是 幂等</p>
<p>POST请求(相对安全):</p>
<ul>
<li>一般用于修改服务器上 的资源</li>
</ul>
<ul>
<li>对所发送信息的数量无限制</li>
</ul>
<p>HTTP响应:</p>
<ol>
<li>数字和文字,状态码</li>
<li>响应头.和请求头一样包含许多有用的信息,服务器类型,日期时间,内容类型和长度等</li>
<li>响应体</li>
</ol>
<p>XMLHttpRequest发送请求</p>
<ul>
<li>open(method,url,async)</li>
</ul>
<ul>
<li>sent(string)</li>
</ul>
<p><strong>demo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">request.open(&quot;POST&quot;,&quot;create.php&quot;,true);</div><div class="line">request.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">request.send(&quot;name=wanglinzhizhi&amp;sex=male&quot;);</div></pre></td></tr></table></figure>
<p>Notes:request.setRequestHeader 这个必须要加,渲染方式</p>
<hr>

<h2 id="JSON的解析"><a href="#JSON的解析" class="headerlink" title="JSON的解析"></a>JSON的解析</h2><p>方法一 eval()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:30&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:35&#125;]&#125;&apos;;</div><div class="line">var jsonobj=eval(&apos;(&apos;+jsondata+&apos;)&apos;);</div><div class="line">alert(jsonobj.staff[0].name);</div></pre></td></tr></table></figure>
<p>方法二(JSON.parse)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var jsondata=&apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七&quot;,&quot;age&quot;:70&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:30&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:35&#125;]&#125;&apos;;</div><div class="line">var jsonobj=JSON.parse(jsondata);</div><div class="line">alert(jsonobj.staff[0].name);</div></pre></td></tr></table></figure>
<p>推荐使用第二种方法</p>
<p>Note: <strong>无论何时使用eval时是非常危险的.</strong></p>
<p>JSON校验</p>
<p><a href="http://jsonlint.com/" target="_blank" rel="external">http://jsonlint.com/</a></p>
<p>Notes:CND加速的jquery库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>// 使用了CDN加速,调用很快.</p>
<hr>

<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>javascript出于安全方面的考虑，不允许跨域调用其他页面的对象。</p>
<p>什么是跨域呢？简单地理解就是因为javascript同源策略的限制，a.com域名下的js无法操作b.com或是c.a.com域名下的对象。</p>
<p>解决跨域问题的方法</p>
<ol>
<li><strong>代理</strong><br>通过在同域名下的web服务器端创建一个代理：<br>北京服务器(域名:www.beijing.com)<br>上海服务器(域名：www.shanghai.com)<br>比如在北京的web服务器的后台(www.beijing.com/proxy-shanghaiservice.php)来调用上海服务器(www.shanghai.com/services.php)的服务，然后再把访问结果返回给前端，这样前端调用北京同域名的服务就和调用上海的服务效果相同了。<br>​</li>
<li><p><strong>JSONP(只支持GET请求)：</strong></p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script src=&quot;http://www.bbb.com/jsonp.js&quot;&gt;&lt;/script&gt;</div><div class="line">在www.aaa.com页面中</div><div class="line">&lt;script&gt;</div><div class="line">function jsonp(json)&#123;</div><div class="line">alert(json[&quot;name&quot;]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">在www.bbb.com页面中:</div><div class="line">jsonp(&#123;&quot;name&quot;:&quot;洪七公&quot;,&apos;age&apos;:24&#125;);</div><div class="line">jsonp只能对get请求起作用,不能对post请求起作用(不支持post请求)</div></pre></td></tr></table></figure>
</code></pre></li>
</ol>
<p>JSONP可用于解决主流浏览器的跨域数据访问的问题。<br>在www.aaa.com页面中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">truefunction jsonp(json)&#123;</div><div class="line">     alert(json[&quot;name&quot;]);</div><div class="line"> 	&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;http;//www.bbb.com/jsonp.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>在www.bbb.com页面中：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">jsonp(&#123;&apos;name&apos;:&apos;xx&apos;,&apos;age&apos;:24&#125;)</div></pre></td></tr></table></figure>
<p>这样就可以实现在www.aaa.com客户端访问获取www.bbb.com所在服务器中的文件或数据,从而实现跨域</p>
<p><strong>3.XHR2</strong></p>
<p>HTML5 提供的XMLHttpRequest Level2已经实现了跨域访问以及其他一些新功能:</p>
<p>对于解决跨域问题,只需要对<strong>服务端</strong>做较小的改变, 客户端不需要做改变<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">header(&quot;Content-Type:application/json;charset=utf-8&quot;);</div><div class="line"></div><div class="line">header(&quot;Access-Control-Allow-Origin:*&quot;);</div><div class="line"></div><div class="line">header(&quot;Access-Control-Allow-Methods:POST,GET&quot;);</div></pre></td></tr></table></figure></p>
<p>Notes:</p>
<ol>
<li>HTML5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能</li>
<li>IE10以下的版本都不支持</li>
<li>在服务器端</li>
</ol>
<p><strong>总结:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">跨域处理，三种方法：</div><div class="line">1、处理跨域方法一 代理</div><div class="line"></div><div class="line">2、处理跨域方式二——</div><div class="line"></div><div class="line">3、处理跨域的方法三——XHR2：</div><div class="line"></div><div class="line">header(&apos;Access-Control-Allow-Origin:*&apos;);</div><div class="line">header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);</div></pre></td></tr></table></figure>
<hr>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>JavaScript原生版实现demo,这里只给出了ajax需要部分的代码,后端的 json已经前端的样式等内容都未写出来(因为太多了…)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">true<span class="built_in">document</span>.getElementById(<span class="string">"search"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">true<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">truerequest.open(<span class="string">"GET"</span>, <span class="string">"serverjson.php?number="</span> + 	<span class="built_in">document</span>.getElementById(<span class="string">"keyword"</span>).value);</div><div class="line">truerequest.send();</div><div class="line"></div><div class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">true<span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</div><div class="line">truetrue<span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123;</div><div class="line">truetruetrue<span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</div><div class="line">truetruetrue<span class="keyword">if</span> (data.success) &#123;</div><div class="line">truetruetruetrue<span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = data.msg;</div><div class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</div><div class="line">truetruetruetrue<span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</div><div class="line">truetruetrue&#125;</div><div class="line">truetrue&#125; <span class="keyword">else</span> &#123;</div><div class="line">truetruetruealert(<span class="string">"发生错误："</span> + request.status);</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">true&#125;</div><div class="line"></div><div class="line">true&#125;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"save"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">true<span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">truerequest.open(<span class="string">"POST"</span>, <span class="string">"serverjson.php"</span>);</div><div class="line">true<span class="keyword">var</span> data = <span class="string">"name="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffName"</span>).value</div><div class="line">true                  + <span class="string">"&amp;number="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffNumber"</span>).value</div><div class="line">true                  + <span class="string">"&amp;sex="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffSex"</span>).value</div><div class="line">true                  + <span class="string">"&amp;job="</span> + <span class="built_in">document</span>.getElementById(<span class="string">"staffJob"</span>).value;</div><div class="line">truerequest.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">truerequest.send(data);</div><div class="line">truerequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">truetrue<span class="keyword">if</span> (request.readyState===<span class="number">4</span>) &#123;</div><div class="line">truetruetrue<span class="keyword">if</span> (request.status===<span class="number">200</span>) &#123;</div><div class="line">truetruetruetrue<span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</div><div class="line">truetruetruetrue<span class="keyword">if</span> (data.success) &#123;</div><div class="line">truetruetruetruetrue<span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = data.msg;</div><div class="line">truetruetruetrue&#125; <span class="keyword">else</span> &#123;</div><div class="line">truetruetruetruetrue<span class="built_in">document</span>.getElementById(<span class="string">"createResult"</span>).innerHTML = <span class="string">"出现错误："</span> + data.msg;</div><div class="line">truetruetruetrue&#125;</div><div class="line">truetruetrue&#125; <span class="keyword">else</span> &#123;</div><div class="line">truetruetruetruealert(<span class="string">"发生错误："</span> + request.status);</div><div class="line">truetruetrue&#125;</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>jQuery版的实现</p>
<p>jQuery中封装了request.setRequestHeader(“Content-type”… 故不需要额外添加句代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">true&lt;script&gt;</div><div class="line">true$(document).ready(function()&#123;</div><div class="line">true$(&quot;#search&quot;).click(function()&#123;</div><div class="line">truetrue$.ajax(&#123;</div><div class="line">truetrue    type: &quot;GET&quot;, 	</div><div class="line">truetruetrueurl: &quot;http://127.0.0.1:8000/ajaxdemo/serverjsonp.php?number=&quot; + $(&quot;#keyword&quot;).val(),</div><div class="line">truetruetruedataType: &quot;jsonp&quot;,</div><div class="line">truetruetruejsonp: &quot;callback&quot;,</div><div class="line">truetruetruesuccess: function(data) &#123;</div><div class="line">truetruetruetrueif (data.success) &#123;</div><div class="line">truetruetruetruetrue$(&quot;#searchResult&quot;).html(data.msg);</div><div class="line">truetruetruetrue&#125; else &#123;</div><div class="line">truetruetruetruetrue$(&quot;#searchResult&quot;).html(&quot;出现错误：&quot; + data.msg);</div><div class="line">truetruetruetrue&#125;  </div><div class="line">truetruetrue&#125;,</div><div class="line">truetruetrueerror: function(jqXHR)&#123;     </div><div class="line">truetruetrue   alert(&quot;发生错误：&quot; + jqXHR.status);  </div><div class="line">truetruetrue&#125;,     </div><div class="line">truetrue&#125;);</div><div class="line">true&#125;);</div><div class="line"></div><div class="line">true$(&quot;#save&quot;).click(function()&#123;</div><div class="line">truetrue$.ajax(&#123;</div><div class="line">truetrue    type: &quot;POST&quot;, 	</div><div class="line">truetruetrueurl: &quot;http://127.0.0.1:8000/ajaxdemo/serverjsonp.php&quot;,</div><div class="line">truetruetruedata: &#123;</div><div class="line">truetruetruetruename: $(&quot;#staffName&quot;).val(),</div><div class="line">truetruetruetruenumber: $(&quot;#staffNumber&quot;).val(),</div><div class="line">truetruetruetruesex: $(&quot;#staffSex&quot;).val(),</div><div class="line">truetruetruetruejob: $(&quot;#staffJob&quot;).val()</div><div class="line">truetruetrue&#125;,</div><div class="line">truetruetruedataType: &quot;json&quot;,</div><div class="line">truetruetruesuccess: function(data)&#123;</div><div class="line">truetruetruetrueif (data.success) &#123;</div><div class="line">truetruetruetruetrue$(&quot;#createResult&quot;).html(data.msg);</div><div class="line">truetruetruetrue&#125; else &#123;</div><div class="line">truetruetruetruetrue$(&quot;#createResult&quot;).html(&quot;出现错误：&quot; + data.msg);</div><div class="line">truetruetruetrue&#125;  </div><div class="line">truetruetrue&#125;,</div><div class="line">truetruetrueerror: function(jqXHR)&#123;     </div><div class="line">truetruetrue   alert(&quot;发生错误：&quot; + jqXHR.status);  </div><div class="line">truetruetrue&#125;,     </div><div class="line">truetrue&#125;);</div><div class="line">true&#125;);</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;

&lt;h1 id=&quot;Ajax-Notes&quot;&gt;&lt;a href=&quot;#Ajax-Notes&quot; class=&quot;headerlink&quot; title=&quot;Ajax Notes&quot;&gt;&lt;/a&gt;Ajax Notes&lt;/h1&gt;&lt;p&gt;HTML和CSS 来实现页面，表达信息&lt;/p&gt;
&lt;p&gt;运用XML
    
    </summary>
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/categories/JS/"/>
    
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/tags/JS/"/>
    
      <category term="Ajax" scheme="http://www.wanglinzhizhi.me/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 AnimateEnd 事件</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/CSS3%20AnimateEnd%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/CSS3 AnimateEnd事件/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3-AnimateEnd-事件"><a href="#CSS3-AnimateEnd-事件" class="headerlink" title="CSS3 AnimateEnd 事件"></a>CSS3 AnimateEnd 事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> </span></div><div class="line"><span class="selector-id">#myD</span>&#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">25px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">550px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: orange;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* Chrome, Safari, Opera */</span></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> mymove &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> mymove &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0px</span>;&#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用addEventListener()方法给div元素添加"animationstart事件、animationiteration事件、animationend事件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myD"</span> <span class="attr">onclick</span>=<span class="string">"myFc()"</span>&gt;</span>点击这里开始播放动画<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"myD"</span>);</div><div class="line"><span class="comment">// 使用JavaScript播放动画</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    x.style.WebkitAnimation = <span class="string">"mymove 4s 2"</span>; <span class="comment">// 用于Chrome、 Safari、 Opera浏览器</span></div><div class="line">    x.style.animation = <span class="string">"mymove 4s 2"</span>;       <span class="comment">// 标准语法</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">// Chrome、 Safari、 Opera</span></div><div class="line">x.addEventListener(<span class="string">"webkitAnimationStart"</span>, myStartFunction);</div><div class="line">x.addEventListener(<span class="string">"webkitAnimationIteration"</span>, myRepeatFunction);</div><div class="line">x.addEventListener(<span class="string">"webkitAnimationEnd"</span>, myEndFunction);</div><div class="line"><span class="comment">// 标准语法</span></div><div class="line">x.addEventListener(<span class="string">"animationstart"</span>, myStartFunction);</div><div class="line">x.addEventListener(<span class="string">"animationiteration"</span>, myRepeatFunction);</div><div class="line">x.addEventListener(<span class="string">"animationend"</span>, myEndFunction);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myStartFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationstart事件 - 开始播放动画"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"pink"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRepeatFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationiteration事件 -动画重复播放了！"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"lightblue"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myEndFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">"触发了animationend event occured -动画播放完毕"</span>;</div><div class="line">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">"lightgray"</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3-AnimateEnd-事件&quot;&gt;&lt;a href=&quot;#CSS3-AnimateEnd-事件&quot; class=&quot;headerlink&quot; title=&quot;CSS3 AnimateEnd 事件&quot;&gt;&lt;/a&gt;CSS3 AnimateEnd 事件&lt;/h2&gt;&lt;figure c
    
    </summary>
    
      <category term="web" scheme="http://www.wanglinzhizhi.me/categories/web/"/>
    
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/tags/JS/"/>
    
      <category term="移动web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
      <category term="动画" scheme="http://www.wanglinzhizhi.me/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画简介</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/CSS%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B%20%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/CSS动画简介 阮一峰/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS动画简介"><a href="#CSS动画简介" class="headerlink" title="CSS动画简介"></a>CSS动画简介</h2><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰</a></p>
<p>日期： <a href="http://www.ruanyifeng.com/blog/2014/02/" target="_blank" rel="external">2014年2月14日</a></p>
<p>现在，我很少写介绍CSS的文章，因为感觉网站开发的关键还是在服务器端。</p>
<p>但是，CSS动画除外，它实在太有用了。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021402.png" alt="img"></p>
<p>本文介绍CSS动画的两大组成部分：transition和animation。我不打算给出每一条属性的详尽介绍，那样可以写一本书。这篇文章只是一个简介，帮助初学者了解全貌，同时又是一个快速指南，当你想不起某一个用法的时候，能够快速地找到提示。</p>
<p>我的主要参考资料是，2013年10月，<a href="http://lea.verou.me/" target="_blank" rel="external">Lea Verou</a>在JSConf.Asia上面的演讲<a href="http://2013.jsconf.asia/blog/2013/10/31/jsconfasia-2013-lea-verou-css-in-the-4th-dimension-not-your-daddys-css-animations" target="_blank" rel="external">《CSS in the 4th Dimension》</a>。那是一个非常棒的演讲，有<a href="https://www.youtube.com/watch?v=NTJUFQmHbvc" target="_blank" rel="external">视频</a>和<a href="http://lea.verou.me/css-4d/" target="_blank" rel="external">幻灯片</a>，强烈推荐。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第一部分：CSS-Transition"><a href="#第一部分：CSS-Transition" class="headerlink" title="第一部分：CSS Transition"></a>第一部分：CSS Transition</h2><h3 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h3><p><strong>在CSS 3引入Transition（过渡）这个概念之前，CSS是没有时间轴的。也就是说，所有的状态变化，都是即时完成。</strong></p>
<p>上面是一个演示，当鼠标放置于缩略图之上，缩略图会迅速变大。注意，缩略图的变大是瞬间实现的。下面是代码，相当简单。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>transition的作用在于，指定状态变化所需要的时间。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，图片放大的过程需要1秒，效果如下。</p>
<p>我们还可以指定transition适用的属性，比如只适用于height。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，只有height的变化需要1秒实现，其他变化（主要是width）依然瞬间实现，效果如下。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-2-transition-delay"><a href="#1-2-transition-delay" class="headerlink" title="1.2 transition-delay"></a>1.2 transition-delay</h3><p>在同一行transition语句中，可以分别指定多个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，这样一来，height和width的变化是同时进行的，跟不指定它们没有差别，效果如下。</p>
<p>我们希望，让height先发生变化，等结束以后，再让width发生变化。实现这一点很容易，就是为width指定一个delay参数。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height, <span class="number">1s</span> <span class="number">1s</span> width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码指定，width在1秒之后，再开始变化，也就是延迟（delay）1秒，效果如下。</p>
<p>delay的真正意义在于，它指定了动画发生的顺序，使得多个不同的transition可以连在一起，形成复杂效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-3-transition-timing-function"><a href="#1-3-transition-timing-function" class="headerlink" title="1.3 transition-timing-function"></a>1.3 transition-timing-function</h3><p>transition的状态变化速度（又称timing function），默认不是匀速的，而是逐渐放慢，这叫做ease。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了ease以外，其他模式还包括</p>
<blockquote>
<p>（1）linear：匀速</p>
<p>（2）ease-in：加速</p>
<p>（3）ease-out：减速</p>
<p>（4）cubic-bezier函数：自定义速度模式</p>
</blockquote>
<p>最后那个cubic-bezier，可以使用<a href="http://cubic-bezier.com/" target="_blank" rel="external">工具网站</a>来定制。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> height <span class="built_in">cubic-bezier</span>(.83,.97,.05,1.44);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码会产生一个最后阶段放大过度、然后回缩的效果。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-4-transition的各项属性"><a href="#1-4-transition的各项属性" class="headerlink" title="1.4 transition的各项属性"></a>1.4 transition的各项属性</h3><p>transition的完整写法如下。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> <span class="number">1s</span> height ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这其实是一个简写形式，可以单独定义成各个属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">transition-property</span>: height;</div><div class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">transition-timing-function</span>: ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-5-transition的使用注意"><a href="#1-5-transition的使用注意" class="headerlink" title="1.5 transition的使用注意"></a>1.5 transition的使用注意</h3><p>（1）目前，各大浏览器（包括IE 10）都已经支持无前缀的transition，所以transition已经可以很安全地不加浏览器前缀。</p>
<p>（2）不是所有的CSS属性都支持transition，完整的列表查看<a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">这里</a>，以及具体的<a href="http://leaverou.github.io/animatable/" target="_blank" rel="external">效果</a>。</p>
<p>（3）<strong>transition需要明确知道，开始状态和结束状态的具体数值，才能计算出中间状态。比如，height从0px变化到100px，transition可以算出中间状态。但是，transition没法算出0px到auto的中间状态，也就是说，如果开始或结束的设置是height: auto，那么就不会产生动画效果。类似的情况还有，display: none到block，background: url(foo.jpg)到url(bar.jpg)等等。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="1-6-transition的局限"><a href="#1-6-transition的局限" class="headerlink" title="1.6 transition的局限"></a>1.6 transition的局限</h3><p>transition的优点在于简单易用，但是它有几个很大的局限。</p>
<p>（1）<strong>transition需要事件触发，所以没法在网页加载时自动发生。</strong></p>
<p>（2）<strong>transition是一次性的，不能重复发生，除非一再触发。</strong></p>
<p>（3）<strong>transition只能定义开始状态和结束状态，不能定义中间状态，也就是说只有两个状态。</strong></p>
<p>（4）<strong>一条transition规则，只能定义一个属性的变化，不能涉及多个属性。</strong></p>
<p>CSS Animation就是为了解决这些问题而提出的。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="第二部分：CSS-Animation"><a href="#第二部分：CSS-Animation" class="headerlink" title="第二部分：CSS Animation"></a>第二部分：CSS Animation</h2><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>首先，CSS Animation需要指定动画一个周期持续的时间，以及动画效果的名称。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。效果如下。</p>
<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以指定动画具体播放的次数，比如3次。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有一个<a href="http://lea.verou.me/css-4d/#heart-demo" target="_blank" rel="external">心脏跳动</a>的例子，可供参考。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-2-animation-fill-mode"><a href="#2-2-animation-fill-mode" class="headerlink" title="2.2 animation-fill-mode"></a>2.2 animation-fill-mode</h3><p><strong>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow forwards;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>forwards表示让动画停留在结束状态</strong>，效果如下。</p>
<p>animation-fill-mode还可以使用下列值。</p>
<blockquote>
<p>（1）none：默认值，回到动画没开始时的状态。</p>
<p>（2）backwards：让动画回到第一帧的状态。</p>
<p>（3）both: 根据animation-direction（见后）轮流应用forwards和backwards规则。</p>
</blockquote>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-3-animation-direction"><a href="#2-3-animation-direction" class="headerlink" title="2.3 animation-direction"></a>2.3 animation-direction</h3><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>
<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background-color</span>: yellow; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: blue; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认情况是，animation-direction等于normal。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow <span class="number">3</span> normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>
<p><img src="http://image.beekka.com/blog/201402/bg2014021401.png" alt="img"></p>
<p>简单说，<strong>animation-direction指定了动画播放的方向，最常用的值是normal和reverse。浏览器对其他值的支持情况不佳，应该慎用。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-4-animation的各项属性"><a href="#2-4-animation的各项属性" class="headerlink" title="2.4 animation的各项属性"></a>2.4 animation的各项属性</h3><p>同transition一样，animation也是一个简写形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> <span class="number">1s</span> rainbow linear <span class="number">3</span> forwards normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个简写形式，可以分解成各个单独的属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-name</span>: rainbow;</div><div class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</div><div class="line">  <span class="attribute">animation-timing-function</span>: linear;</div><div class="line">  <span class="attribute">animation-delay</span>: <span class="number">1s</span>;</div><div class="line">    <span class="attribute">animation-fill-mode</span>:forwards;</div><div class="line">  <span class="attribute">animation-direction</span>: normal;</div><div class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-5-keyframes的写法"><a href="#2-5-keyframes的写法" class="headerlink" title="2.5 keyframes的写法"></a>2.5 keyframes的写法</h3><p>keyframes关键字用来定义动画的各个状态，它的写法相当自由。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>0%可以用from代表，100%可以用to代表</strong>，因此上面的代码等同于下面的形式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">background</span>: <span class="number">#c00</span> &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如果省略某个状态，浏览器会自动推算中间状态</strong>，所以下面都是合法的写法。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">background</span>: yellowgreen &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至，可以把多个状态写在一行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> pound &#123;</div><div class="line">  <span class="selector-tag">from</span>，<span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: none; &#125;</div><div class="line">  50% &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。<code>steps</code> 函数可以实现<strong>分步过渡</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow infinite <span class="built_in">steps</span>(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有一个非常神奇的<a href="http://dabblet.com/gist/1745856" target="_blank" rel="external">例子</a>，可以看到steps函数的用处。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-6-animation-play-state"><a href="#2-6-animation-play-state" class="headerlink" title="2.6 animation-play-state"></a>2.6 animation-play-state</h3><p>有时，<strong>动画播放过程中，会突然停止</strong>。这时，<strong>默认行为是跳回到动画的开始状态。</strong></p>
<p>上面动画中，如果鼠标移走，色块立刻回到动画开始状态。</p>
<p><strong>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">animation</span>: spin <span class="number">1s</span> linear infinite;</div><div class="line">    <span class="attribute">animation-play-state</span>: paused;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">animation-play-state</span>: running;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码指定，没有鼠标没有悬停时，动画状态是暂停；一旦悬停，动画状态改为继续播放。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h3 id="2-7-浏览器前缀"><a href="#2-7-浏览器前缀" class="headerlink" title="2.7 浏览器前缀"></a>2.7 浏览器前缀</h3><p>目前，IE 10和Firefox（&gt;= 16）支持没有前缀的animation，而chrome不支持，所以必须使用webkit前缀。</p>
<p>也就是说，实际运用中，代码必须写成下面的样子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>: <span class="number">1s</span> rainbow;</div><div class="line">  <span class="attribute">animation</span>: <span class="number">1s</span> rainbow;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> rainbow &#123;</div><div class="line">  0% &#123; <span class="attribute">background</span>: <span class="number">#c00</span>; &#125;</div><div class="line">  50% &#123; <span class="attribute">background</span>: orange; &#125;</div><div class="line">  100% &#123; <span class="attribute">background</span>: yellowgreen; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p>-end-</p>
<p>原文地址: <a href="http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/02/css_transition_and_animation.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS动画简介&quot;&gt;&lt;a href=&quot;#CSS动画简介&quot; class=&quot;headerlink&quot; title=&quot;CSS动画简介&quot;&gt;&lt;/a&gt;CSS动画简介&lt;/h2&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_
    
    </summary>
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.wanglinzhizhi.me/tags/CSS3/"/>
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/tags/CSS/"/>
    
      <category term="CSS3动画" scheme="http://www.wanglinzhizhi.me/tags/CSS3%E5%8A%A8%E7%94%BB/"/>
    
      <category term="阮一峰" scheme="http://www.wanglinzhizhi.me/tags/%E9%98%AE%E4%B8%80%E5%B3%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git 的提交</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Git%20%E6%8F%90%E4%BA%A4%E5%8E%9F%E5%88%99/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Git 提交原则/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-的提交"><a href="#Git-的提交" class="headerlink" title="Git 的提交"></a>Git 的提交</h2><h3 id="提交原则"><a href="#提交原则" class="headerlink" title="提交原则"></a>提交原则</h3><p><strong>频繁提交代码 -&gt; 事务性提交.</strong> </p>
<ul>
<li><strong>提交代码的频率与合并带来的工作量成反比</strong></li>
<li><strong>尽早提交代码有利于别人把你的代码集成进去,加快项目的进展</strong> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-的提交&quot;&gt;&lt;a href=&quot;#Git-的提交&quot; class=&quot;headerlink&quot; title=&quot;Git 的提交&quot;&gt;&lt;/a&gt;Git 的提交&lt;/h2&gt;&lt;h3 id=&quot;提交原则&quot;&gt;&lt;a href=&quot;#提交原则&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Git" scheme="http://www.wanglinzhizhi.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.wanglinzhizhi.me/tags/Git/"/>
    
      <category term="Git 使用" scheme="http://www.wanglinzhizhi.me/tags/Git-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS、CSS以及img对DOMContentLoaded事件的影响</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/DOMContent/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/DOMContent/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS、CSS以及img对DOMContentLoaded事件的影响"><a href="#JS、CSS以及img对DOMContentLoaded事件的影响" class="headerlink" title="JS、CSS以及img对DOMContentLoaded事件的影响"></a>JS、CSS以及img对DOMContentLoaded事件的影响</h2><p>In <a href="http://www.alloyteam.com/webdevelop/web-%e5%89%8d%e7%ab%af%e4%bc%98%e5%8c%96/" target="_blank" rel="external">Web 前端优化</a>,<a href="http://www.alloyteam.com/webdevelop/" target="_blank" rel="external">Web开发</a> </p>
<p>on 2014年03月03日 by <a href="http://www.alloyteam.com/author/kerry95/" target="_blank" rel="external">TAT.kerry95</a> view: 17,634<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/#comments" target="_blank" rel="external">12</a></p>
<p>最近在做性能有关的数据上报，发现了两个非常有意思的东西：Chrome开发者工具的Timeline分析面板，以及DOMContentLoaded事件。一个是强大的令人发指的性能分析工具，一个是重要的性能指标，于是就用Timeline对DOMContentLoaded事件进行了一番研究。</p>
<h2 id="前端的纯技术就是对规范的认知"><a href="#前端的纯技术就是对规范的认知" class="headerlink" title="前端的纯技术就是对规范的认知"></a>前端的纯技术就是对规范的认知</h2><p>什么是DOMContentLoaded事件？</p>
<p>首先想到的是查看<a href="http://www.w3.org/TR/html5/syntax.html#the-end" target="_blank" rel="external">W3C的HTML5规范</a>，DOMContentLoaded事件在什么时候触发：</p>
<blockquote>
<p>Once the user agent stops parsing the document, the user agent must run the following steps:<br>\1. Set the current document readiness to “interactive” and the insertion point to undefined.<br>Pop all the nodes off the stack of open elements.<br>\2. If the list of scripts that will execute when the document has finished parsing is not empty, run these substeps:<br>2.1 Spin the event loop until the first script in the list of scripts that will execute when the document has finished parsing has its “ready to be parser-executed” flag set and the parser’s Document has no style sheet that is blocking scripts.<br>2.2 Execute the first script in the list of scripts that will execute when the document has finished parsing.<br>2.3 Remove the first script element from the list of scripts that will execute when the document has finished parsing (i.e. shift out the first entry in the list).<br>2.4 If the list of scripts that will execute when the document has finished parsing is still not empty, repeat these substeps again from substep 1.<br>\3. Queue a task to fire a simple event that bubbles named <strong>DOMContentLoaded</strong> at the Document.</p>
</blockquote>
<p>规范总是那么的晦涩，但至少有一点是可以明确了的，就是在JS（不包括动态插入的JS）执行完之后，才会触发DOMContentLoaded事件。</p>
<p>接下来看看<a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded" target="_blank" rel="external">MDN上有关DOMContentLoaded事件的文档</a>：</p>
<blockquote>
<p>The DOMContentLoaded event is fired when the document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading<br>Note: Stylesheet loads block script execution, so if you have a <code>after a</code>, the page will not finish parsing – and DOMContentLoaded will not fire – until the stylesheet is loaded.</p>
</blockquote>
<p>这么看来，至少可以得出这么一个理论：DOMContentLoaded事件本身不会等待CSS文件、图片、iframe加载完成。<br>它的触发时机是：加载完页面，解析完所有标签（不包括执行CSS和JS），并如规范中所说的设置<code>interactive</code> 和执行每个静态的script标签中的JS，然后触发。<br>而JS的执行，需要等待位于它前面的CSS加载（如果是外联的话）、执行完成，因为JS可能会依赖位于它前面的CSS计算出来的样式。</p>
<h2 id="实践是检验真理的唯一标准"><a href="#实践是检验真理的唯一标准" class="headerlink" title="实践是检验真理的唯一标准"></a>实践是检验真理的唯一标准</h2><h3 id="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"><a href="#实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成" class="headerlink" title="实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成"></a>实验1：DOMContentLoaded事件不直接等待CSS文件、图片的加载完成</h3><p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/71fca778-a249-11e3-8824-2aae4440c857.png" alt="71fca778-a249-11e3-8824-2aae4440c857"></a><br>图一</p>
<p>如果页面中没有script标签，DOMContentLoaded事件并没有等待CSS文件、图片加载完成。</p>
<p>Chrome开发者工具的Timeline面板可以帮我们记录下浏览器的一举一动。图一中红色小方框中的蓝线，表示DOMContentLoaded事件，它右边的红线和绿线分别表示load事件和First paint，鼠标hover在这些线露出灰色方框下面的一小部分时就会出现带有说明文字的tips（这交互够反人类的对吧！）。</p>
<h3 id="实验2：DOMContentLoaded事件需要等待JS执行完才触发"><a href="#实验2：DOMContentLoaded事件需要等待JS执行完才触发" class="headerlink" title="实验2：DOMContentLoaded事件需要等待JS执行完才触发"></a>实验2：DOMContentLoaded事件需要等待JS执行完才触发</h3><p>index.html:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script before link in head'</span>);</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.timeStamp(<span class="string">'DOMContentLoaded event'</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/main.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script after link in head'</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.timeStamp(<span class="string">'External script after link in body'</span>);</div></pre></td></tr></table></figure>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/dcf399e8-a252-11e3-92c1-c3dbad820909.png" alt="dcf399e8-a252-11e3-92c1-c3dbad820909"></a></p>
<p>图二</p>
<p>如果页面中静态的写有script标签，DOMContentLoaded事件需要等待JS执行完才触发。<br>而script标签中的JS需要等待位于其前面的CSS的加载完成。</p>
<p><code>console.timeStamp()</code> 可以向Timeline中添加一条记录，并对应上方的一条黄线。</p>
<p>从图二中可以看出，在CSS之前的JS立刻得到了执行，而在CSS之后的JS，需要等待CSS加载完后才执行，比较明显的是main.js早就加载完了，但还是要等main.css加载完才能执行。而DOMContentLoaded事件，则是在JS执行完后才触发。滑动Timeline面板中表示展示区域的滑块，如图三，放大后即可看到表示DOMContentLoaded事件的蓝线（之前跟黄线和绿线靠的太近了），当然，通过<code>console.timeStamp()</code> 向TimeLine中添加的记录也可证明其触发时间。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/910b5c2c-a253-11e3-995d-e19fb254cf4e.png" alt="910b5c2c-a253-11e3-995d-e19fb254cf4e"></a><br>图三</p>
<p>现代浏览器会并发的预加载CSS, JS，也就是一开始就并发的请求这些资源，但是，执行CSS和JS的顺序还是按原来的依赖顺序（JS的执行要等待位于其前面的CSS和JS加载、执行完）。先加载完成的资源，如果其依赖还没加载、执行完，就只能等着。</p>
<h3 id="实验3：img何时开始解码、绘制？"><a href="#实验3：img何时开始解码、绘制？" class="headerlink" title="实验3：img何时开始解码、绘制？"></a>实验3：img何时开始解码、绘制？</h3><p>从图三中我们可以发现一个有趣的地方：img的请求老早就发出了，但延迟了一段时间才开始解码。如图二、图三中的红框所示，截图中只框出了一部分表示解码的记录，而实际上这些表示解码的记录一直持续到img加载结束，如图四所示，img是一边加载一边解码的：</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/2014/03/7384a57a-a256-11e3-9c4a-b857956eaeed.png" alt="7384a57a-a256-11e3-9c4a-b857956eaeed"></a><br>图四</p>
<p>抱着“猜想——验证”的想法，我猜想这是因为img这个资源是否需要展现出来，需要等 <strong>所有的JS和CSS的执行完</strong> 才知道，因为main.js可能会执行某些DOM操作，比如删除这个img元素，或者修改其src属性，而CSS可能会将其 <code>display: none</code> 。</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084830tW2.jpg" alt="image"></a></p>
<p>图五</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084831TR6.jpg" alt="image"></a></p>
<p>图六</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084832Sa1.jpg" alt="image"></a><br>图七</p>
<p>图五中没有JS和CSS，img的数据一接收到就马上开始解码了。<br>图六中没有JS，但img要等到CSS加载完才开始解码。<br>图七的代码跟图六的代码唯一的区别是CSS把img给 <code>display: none;</code> ，这使得img虽然请求了，但根本没有进行解码。<br>这说明，img是否需要解码、绘图（paint）出来，确实需要等CSS加载、执行完才能知道。也就是说，CSS会阻塞img的展现！那么JS呢？</p>
<p><a href="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" target="_blank" rel="external"><img src="http://cdn.alloyteam.com/wp-content/uploads/auto_save_image/2014/03/084833Gpg.jpg" alt="image"></a><br>图八</p>
<p>图八对应的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="built_in">console</span>.timeStamp(<span class="string">'Inline script in head'</span>);</div><div class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.timeStamp(<span class="string">'DOMContentLoaded event'</span>);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/chrome-girl.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>非常令人惊讶，在有JS而没有CSS的页面中，img居然能够在收到数据后就立刻开始解码、绘图（paint)，也就是说，JS并没有阻塞img的展现！这跟我们以前理解的JS会阻塞img资源的传统观念不太一样，看来Chrome对img的加载和展现做了新的优化。</p>
<p>##</p>
<p>我们常用的jQuery的 <code>$(document).ready()</code> 方法，就是对DOMContentLoaded事件的监听（当然，其内部还会通过模拟DOMContentLoaded事件和监听onload事件来提供降级方案）。通常推荐在DOMContentLoaded事件触发的时候为DOM元素注册事件。所以尽快的让DOMContentLoaded事件触发，就意味着能够尽快让页面可交互：</p>
<ol>
<li>减小CSS文件体积，把单个CSS文件分成几个文件以并行加载，减少CSS对JS的阻塞时间</li>
<li>次要的JS文件，通过动态插入script标签来加载（动态插入的script标签不阻塞DOMContentLoaded事件的触发）</li>
<li>CSS中使用的精灵图，可以利用对img的预加载，放在html中跟CSS文件一起加载</li>
</ol>
<p>在做实验的过程中，感觉Chrome开发者工具的Timeline面板非常强大，浏览器的一举一动都记录下来。以前我们前端开发要想理解、探索浏览器的内部行为，或者摸着石头过河的做黑盒测试，或者事倍功半的研究浏览器源码，唯一高效点的做法就是学习别人的研究经验，看老外的文章，但浏览器的发展日新月异（比如这次实验发现的JS不阻塞img的展现），别人的经验始终不是最新、最适合的，关键是要结合自己的业务、需求场景，有针对性的做分析和优化。</p>
<p>##</p>
<p>PS.</p>
<p>以上测试环境为windows/chrome，并用Fiddler模拟慢速网络</p>
<p>原创文章转载请注明：</p>
<p>转载自AlloyTeam：<a href="http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/" target="_blank" rel="external">http://www.alloyteam.com/2014/03/effect-js-css-and-img-event-of-domcontentloaded/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS、CSS以及img对DOMContentLoaded事件的影响&quot;&gt;&lt;a href=&quot;#JS、CSS以及img对DOMContentLoaded事件的影响&quot; class=&quot;headerlink&quot; title=&quot;JS、CSS以及img对DOMContentLoad
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="DOMContentLoaded" scheme="http://www.wanglinzhizhi.me/tags/DOMContentLoaded/"/>
    
      <category term="浏览器内核" scheme="http://www.wanglinzhizhi.me/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Git使用简明</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Git%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Git使用简明/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git使用简明"><a href="#Git使用简明" class="headerlink" title="Git使用简明"></a>Git使用简明</h2><p>by wanglinzhizhi</p>
<p><br><br><br><br><br><br></p>
<h1 id="Git的简明教程"><a href="#Git的简明教程" class="headerlink" title="Git的简明教程"></a>Git的简明教程</h1><p>我试着写一下git的简单使用说明,如有错误的地方,欢迎斧正.</p>
<p>:)</p>
<p><br><br></p>
<h2 id="首先-下载并安装git-废话"><a href="#首先-下载并安装git-废话" class="headerlink" title="首先,下载并安装git.(废话)"></a>首先,下载并安装git.(废话)</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="external">git 下载地址</a></p>
<p><br><br><br><br></p>
<h2 id="生成公钥秘钥-并绑定到gogs-代码管理中心上"><a href="#生成公钥秘钥-并绑定到gogs-代码管理中心上" class="headerlink" title="生成公钥秘钥,并绑定到gogs 代码管理中心上."></a>生成公钥秘钥,并绑定到<code>gogs</code> 代码管理中心上.</h2><p>在初次使用git的时候需要做的一件事,之后使用过程中不需要这么做了.</p>
<p><br><br></p>
<p>可以把这个过程认为是一个认证过程.我以我的理解讲解一下.详细的可以参考</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">https://help.github.com/articles/generating-an-ssh-key/</div></pre></td></tr></table></figure>
<p> 简单的说,2个步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. 生成秘钥.公钥</div><div class="line">truessh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line">trueEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</div><div class="line">trueEnter passphrase (empty for no passphrase): [Type a passphrase]</div><div class="line">trueEnter same passphrase again: [Type passphrase again]</div><div class="line"></div><div class="line">2. 绑定到 代码托管中心服务器中 .在个人页面 -&gt; 用户设置 -&gt;管理SSH密钥-&gt; 增加密钥</div><div class="line">   将生成的id_rsa.pub(这个文件所在的目录是C:/users/XXX/.ssh/id_sra.pub) 拷贝到 密钥内容部分.</div><div class="line"></div><div class="line"></div><div class="line">至此,绑定完成.</div></pre></td></tr></table></figure>
<p>在以后的使用中,你的每一次提交,每一次clone,每一次push,每一pull,都是这个账号的, 如果你注册了两个git账号,想push操作的话,可以吗? 如果不修改 <code>.gitconfig</code> 文件中的配置, 很有可能因权限问题报错. 在使用中,这一点常常被我们所忽略.</p>
<p><br><br></p>
<p>这是一个服务器log的截图</p>
<p><img src="/images/git/e.png" alt="服务器日志文件截图"></p>
<p><br><br></p>
<h2 id="建立远端仓库和本地仓库的关联-并将本地仓库同步到远端"><a href="#建立远端仓库和本地仓库的关联-并将本地仓库同步到远端" class="headerlink" title="建立远端仓库和本地仓库的关联,并将本地仓库同步到远端."></a>建立远端仓库和本地仓库的关联,并将本地仓库同步到远端.</h2><p>git是一个分布式的系统. 在<code>远端</code>(咱们用的也就是那个测试服务器上)和<code>本地端</code>都有仓库(所谓仓库,也就是你的项目存放的地方). 我们怎么把自己的代码提交到远端的服务器上呢.</p>
<p><br><br><br></p>
<p>主要命令有以下四条.</p>
<p><strong>首先</strong>,我们通过浏览器在服务器上建立一个仓库.(<strong>最好不要把readme勾选</strong> ). 在你想放该文件的文件夹下面,右键-&gt;打开git bash.  执行以下命令</p>
<p>标准做法如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://172.20.17.20:3001/wanglinzhizhi/XXXX.git</div></pre></td></tr></table></figure>
<p>就是<strong>建立关联的过程</strong> .</p>
<p><br><br></p>
<p><strong>然后</strong>,当你写好代码(文档,更新内容)后,为说明方面,我们假设完成的文件叫<code>index.html</code>, 放到这个仓库(文件夹下面) , 然后执行命令.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add index.html</div></pre></td></tr></table></figure>
<p><strong>再然后</strong> , 执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git commit -m &apos;这是我的一次测试性的更新说明,我更新了index.html文件.对结构进行了优化.&apos;</div></pre></td></tr></table></figure>
<p><strong>Notes</strong>: 执行完<code>git add XX</code> 和 <code>git commit &#39;blablabla&#39;</code> 之后 至此本地仓库的commit以及版本已经建立完成. 下一步,我们是将本地的仓库 push到服务器中.让代码保存在服务器中.</p>
<p><strong>最后</strong>  ,依然在<code>git bash</code>中执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure>
<p>然后输入你的gogs的邮箱和密码. 直到显示 <code>...done</code> 表示提交完成. 至此,我们完成了将本地仓库push到远端仓库. 可以再浏览器中再次打开你刚才<code>创建</code> ,并且<code>clone</code> ,并且<code>push</code>的仓库了.</p>
<p>:)</p>
<p><strong>Notes</strong>　： 在使用中非常重要也非常基本的一个命令是, <code>git status</code> .通过这个命令, 我们可以知道当前的状况.在什么情况下使用呢?  恩, 在不知道当前什么状况的情况下使用.</p>
<p>还有一个比较常用的命令, <code>git XXX -h</code>  .  这里的XXX(比如 push, pull,log 等)git命令,  在不知道git XXX命</p>
<p>令怎么使用的时候, 可以 直接在后面加一个<code>-h</code> ,显示出帮助文件. 像这样(<code>git push -h</code>,  <code>git pull -h</code>)</p>
<p>个人感觉,这几天的使用经验来说,git是一个很友好的工具, 因为在你输入错误 的情况下,它能够很智能的提示.</p>
<p><br><br></p>
<p>总结一下,</p>
<p>远端和本地端的绑定需执行一行代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://172.20.17.20:3001/wanglinzhizhi/XXXX.git</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p>每次git 提交到服务器有三个步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add (你想add的文件.)</div><div class="line">git commit -m &apos;xxxx&apos;</div><div class="line">git push</div></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p><strong>NOTES:</strong></p>
<p>另一种不是标准做法的方法,<code>clone</code> 这是一种比较偷懒的方法, 严格意义上说是错误的,因为仅仅对于那些你是<code>master</code> 权限的人才可以这样操作. 因为这么clone之后(或者直接pull) 弄了之后,就建立了关联.</p>
<p><strong>Note: 注意git操作时对应的文件夹(血泪教训(T_T)</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h2 id="一个接近实际中的项目上传实例"><a href="#一个接近实际中的项目上传实例" class="headerlink" title="一个接近实际中的项目上传实例"></a>一个接近实际中的项目上传实例</h2><p><br><br></p>
<p>我本地有个t6multivan_m(1)M的项目. 我现在要将其传到远端git服务器怎么做呢? 这里是真是用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin XXX</div><div class="line">git push -u origin master(Mac)</div><div class="line"></div><div class="line">  git push --set-upstream origin master(windows)</div></pre></td></tr></table></figure>
<p>的地方.</p>
<p>具体如下:</p>
<p>首先进入到对应项目文件夹 ,然后空白处右键鼠标-&gt;git bash</p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p><br><br></p>
<p>我们在本地仓库中先提交项目.操作过程是上面的提交过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// git status</div><div class="line">git add -A</div><div class="line"></div><div class="line">//git status</div><div class="line">git commit -m &apos;这是一个接近真实环境的项目上传操作&apos;</div></pre></td></tr></table></figure>
<p>到这里,本地的仓库已经完成,现在我们将其push到远端服务器上的仓库中.</p>
<ol>
<li><p>为了上传到远端的服务器中,我需要先用浏览器,在远端仓库中创建一个仓库.(<strong>建议写成同名的</strong>)</p>
<p>然后将远端的仓库和本地的仓库关联起来.</p>
<p>在本地git bash中执行以下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin http://192.168.15.75:3141/wanglinzhizhi/t6multivanM.git</div></pre></td></tr></table></figure>
<p>这条命令使本地端和远端建立关联.</p>
</li>
<li><p>最后一步,</p>
<p>Mac上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>Windows上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push --set-upstream origin master</div></pre></td></tr></table></figure>
</li>
</ol>
<p><br><br><br><br></p>
<p>步骤截图如下:</p>
<ul>
<li><img src="/images/git/a.png" alt="init and add -A"></li>
</ul>
<ul>
<li><img src="/images/git/b.png" alt="commit"></li>
<li><img src="/images/git/c.png" alt="commit"></li>
</ul>
<ul>
<li><img src="/images/git/d.png" alt="remote add origin push"></li>
</ul>
<p>当第一次建立了仓库之后,以后每次使用的时候最常用的两个命令<code>git pull</code> , <code>git push</code> .</p>
<p>我们还会经常使用到的一个命令 <code>git log</code>  或者 <code>git log --graph</code>. 执行这个命令可以帮助我们查看 历史提交记录.</p>
<p><br><br></p>
<p>我觉得一些良好的习惯对于项目管理是有作用的.</p>
<ul>
<li>每天临走之前,git push 一下今天的代码, 第二天来了继续工作之前,git pull 一下,把远端的最新的代码, 同步到本地.</li>
<li>每次完成 了重大的部分或者一个单独的单元的时候, git push 一下.</li>
</ul>
<p>需要注意的是,始终保持远端的仓库是最新的就可以了.  上述的几个命令已经够我们玩转单击版的Git了. 下一节我们将讲解branch 和 merge操作.</p>
<p>另一个比较好的习惯是 **建立一个Git 仓库(Git-repos). 所有的项目都放在这里仓库下面.每个项目只需要一个文件夹,不再需要建立N个zip压缩包,等我们push到服务器之后,谁想下压缩包自己去服务器上去取就够了.</p>
<p><br><br><br><br></p>
<h2 id="Caching-your-GitHub-password-in-Git"><a href="#Caching-your-GitHub-password-in-Git" class="headerlink" title="Caching your GitHub password in Git"></a><a href="https://help.github.com/articles/caching-your-github-password-in-git/#platform-all" target="_blank" rel="external">Caching your GitHub password in Git</a></h2><p>If you’re <a href="https://help.github.com/articles/which-remote-url-should-i-use" target="_blank" rel="external">cloning GitHub repositories using HTTPS</a>, you can use a <em>credential helper</em> to tell Git to remember your GitHub username and password every time it talks to GitHub.</p>
<p>If you clone GitHub repositories using SSH, then you authenticate using SSH keys instead of a username and password. For help setting up an SSH connection, see <a href="https://help.github.com/articles/generating-an-ssh-key" target="_blank" rel="external">Generating an SSH Key</a>.</p>
<p><strong>Tip:</strong> You need Git <strong>1.7.10</strong> or newer to use the credential helper.</p>
<p>The credential helper is included with GitHub Desktop. The app also provides a Git shell so you won’t ever need to install and configure Git manually. For more information, see “<a href="https://help.github.com/desktop/guides/getting-started/" target="_blank" rel="external">Getting Started with GitHub Desktop</a>.”</p>
<p>If you prefer working with the command line, you can also install a native Git shell, such as <a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for Windows</a>. With Git for Windows, running the following in the command line will store your credentials:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global credential.helper wincred</div></pre></td></tr></table></figure>
<p>这是从GitHub 上粘过来的 一段 . 作用是 自动保存密码,不用每次push的时候都输入一遍账号密码,神烦.只需要 在git bash中输入 上面的一行代码, 然后再 输入一次账号密码,以后就再也不需要输入了.(^_ ^)</p>
<p><br><br></p>
<p><br><br><br><br></p>
<p>参考资料:</p>
<p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">起步 - 初次运行 Git 前的配置</a></p>
<p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93" target="_blank" rel="external">git 官方中文版文档</a></p>
<p><a href="https://git-scm.com/book/zh/v1/" target="_blank" rel="external">git pro 中文版</a></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p>银河系,晚安 :)</p>
<p><br><br><br><br><br><br><br></p>
<p>update 2016.09.18</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p> 有两种简单方法的git使用方法,比较推荐,虽然确实有很多git客户端,但是比较推崇的,个人觉得vscode ,和github for desktop 客户端. 因为颜值高.如下图:</p>
<p><strong>vs code</strong></p>
<p><img src="/images/git/vsc.png" alt=""></p>
<p><strong>github</strong></p>
<p><em>**</em><img src="/images/git/github.png" alt=""></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="branch-and-merge-分支与合并操作"><a href="#branch-and-merge-分支与合并操作" class="headerlink" title="- branch and merge (分支与合并操作)"></a>- branch and merge (分支与合并操作)</h2><p><strong>branch 顾名思义就是 建立分支的意思.</strong></p>
<p><br><br></p>
<p>在使用branch的功能的时候,我们主要会用到的命令有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<p><code>git branch</code> 命令的功能是将分支的名字以列表的形式显示出来.同时可以确定当前所在的分支(* 号表示我们现在所在的分支) .</p>
<p><br></p>
<p>下面2条命令如下: 作用是在当前的基础上,创建一个新的分支.并把分支命名为AnewBranchDemo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch AnewBranchDemo</div><div class="line">git checkout AnewBranchDemo</div></pre></td></tr></table></figure>
<p>第一句的意思是创建<code>AnewBranchDemo</code> 这个分支,第二句的 意思是 是当前分支为 <code>AnewBranchDemo</code> 这个分支上.(由此我们可以知道,如果我们想切换回<code>master</code> 分支,我们需要做的就是执行<code>git checkout master</code> 即可.)</p>
<p><br><br></p>
<p>这两条命令可以简化为1条命令,如下.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b AnewBranchDemo</div></pre></td></tr></table></figure>
<p>但是个人建议最开始使用的时候还是用上面2条命令比较好. 语义上更加容易理解.</p>
<p><br><br><br></p>
<p><strong>分支是一种很好的东西.</strong> 当我们在实现某个功能的时候, 我们需要大面积修改源代码.但是有不想破坏已经修改好的 部分,,如果这里的修改改坏了,改动得太多,连自己都忘了那些地方改了的,那些没改,想回溯就将是已将痛苦不堪的事情了…….</p>
<p><br><br></p>
<p>当然 有一种原始的做法是备份一个文件夹放在旁边我们就把备份的文件夹覆盖该坏掉的文件. 这是可以的. 只是麻烦.</p>
<p><br><br></p>
<p>我们运用分支的 话,那么我们只需<code>git branch feature-Test</code> . 然后放心的在<code>feature-Test</code> 做实验,如果这里的实验成功了,我们<code>merge</code>回到<code>master</code> 中即可. 如果另一种情况,我们改的太多,连自己都不知道那些改了哪些没改的话, 我们可以干脆的放弃掉这个分支. 重新给予<code>master</code> 创建分支 <code>git branch feature-TestB</code> . 干净利落.</p>
<p><br><br></p>
<p>:)</p>
<p><br><br><br></p>
<p><strong>branch 顾名思义就是 建立分支的作用</strong>   ,<strong>相对分支的是 merge , 合并的作用</strong></p>
<p><br><br></p>
<p>主干分支 , <code>master</code> 使我们分支<code>branch</code>的起点, 也是我们 合并分支的终点.</p>
<p><br><br></p>
<p>主干分支一般是作为正式版存在的,我们所有的修改,所有的测试都是在分支上进行,直到我们确定 分支上没有问题之后,我们再将其合并到主干分支上.</p>
<p><br><br></p>
<h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1><p>合并操作中,我们主要用到的命令如下:</p>
<p><br><br><br><br></p>
<p><strong>首先</strong>,  我们要确定我们要把谁合并到谁上. 假设我们完成了feature-Test 的功能. 我们希望把feature-Test合并到 master中. 那么我们首先需要切换到master上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div></pre></td></tr></table></figure>
<p><strong>然后</strong> 合并<code>featrue-Test</code>分支 执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git merge --no-ff featrue-Test</div></pre></td></tr></table></figure>
<p>Notes: <strong>–no-ff 参数的目的是为了在历史记录中明确的记录下本次合并</strong>.</p>
<p><br><br></p>
<p><strong>done.</strong></p>
<p>创建分支,并且 合并分支就完成了.</p>
<p><br><br></p>
<p>总结一下分支和合并过程.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//创建分支</div><div class="line">git branch feature-Test // 创建新的分支feature-Test</div><div class="line">git checkout feature-Test //从master上切换到 feature-Test</div><div class="line"></div><div class="line">//合并分支</div><div class="line">git checkout master //切换到主干分支</div><div class="line">git merge --no-ff featrure-true // 合并到主分支.</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<p>现在你可以去看看master中是不是多了你刚才写在feature-Test的那段代码.(废话…)</p>
<p><br><br></p>
<p>在这个过程中,我们可以有事儿没事儿像之前使用<code>git status</code> 一样,多多使用<code>git branch</code> 和 <code>git log --graph</code> .  当提交的次数多了,会非常壮观.</p>
<p><br></p>
<p>:)</p>
<p><br><br><br><br></p>
<p>最后,别忘了合并会主干之后,<code>git push</code>到远端 服务器. 用一种拉风的说法,这叫 <code>云备胎(备份)</code> .</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">至此,到了这一步,</div><div class="line">如果想把版本弄错,或者想改错版本, 提交错版本 将是一件非常困难并且复杂的事情.</div><div class="line"></div><div class="line">:)</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<p> <strong>代码管理中,如果发生了错误的commit ,或者错误的merge 怎么办呢?</strong></p>
<p>答: <strong>回滚</strong></p>
<p>我们使用命令<code>git log</code> 或者<code>git log --graph</code>的时候,会看到</p>
<p>commit 后面的一大串字符串. 其实这串字符串是git为我们生成的版本号.</p>
<p>我们的每一次commit , git 都会为我们创建一个新的版本. 所以每一次commit之后都会有一个对应的长长的一大串字符串. 如下图</p>
<p><img src="/images/git/f.png" alt=""></p>
<p>对于错误的commit 我们需要做的就是<strong>回滚</strong>到对应的<strong>上一个正确的版本</strong></p>
<p>需执行的代码.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard c23efd0806f0a117122fdc118f43f6a33905895e</div></pre></td></tr></table></figure>
<p>执行上述 reset 回滚操作,我们就回到了对应的版本的代码.</p>
<p>一键还原.</p>
<p><br><br><br></p>
<p>问题来了,那么对于,merge操作导致 的错误呢? 一样的,也是使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard XXXXcommit对应的版本号XXX</div></pre></td></tr></table></figure>
<p>git其实还有一些非常常用的功能,</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<p>等</p>
<p>另外一方面,我这里主要在讲解git命令行的使用, 我这里没有提到或者很少提到浏览器中打开的效果.其实浏览器中的效果是十分惊艳的. 截图如下.</p>
<p><img src="/images/git/g.png" alt=""></p>
<p><br><br><br><br></p>
<p><img src="/images/git/h.png" alt=""></p>
<p><img src="/images/git/j.png" alt=""></p>
<p>这是可视化的git diff 绿色是新添加的代码, 红色是删除的代码。</p>
<p><br><br><br><br></p>
<p><img src="/images/git/k.png" alt=""></p>
<p><img src="/images/git/l.png" alt=""></p>
<p>待发行的版本, 需要看的话,可以直接从这里下载源码.</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h2 id="团队合作的git操作-GitFlow"><a href="#团队合作的git操作-GitFlow" class="headerlink" title="- 团队合作的git操作 GitFlow"></a>- 团队合作的git操作 GitFlow</h2><h3 id="gt"><a href="#gt" class="headerlink" title="&gt;_"></a>&gt;_</h3><h3 id="详见GitFlow-工作流"><a href="#详见GitFlow-工作流" class="headerlink" title="详见GitFlow 工作流"></a>详见GitFlow 工作流</h3><p><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h1><p><strong>done</strong></p>
<p><br><br></p>
<ul>
<li>开启了登录验证</li>
<li>开启了Notification</li>
<li>开启TSL加密</li>
</ul>
<p>:)</p>
<p><br><br></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="nginx-反代"><a href="#nginx-反代" class="headerlink" title="nginx 反代"></a>nginx 反代</h1><p><strong>building…..</strong></p>
<p>我懒,不想弄^_ ^</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p>晚安 银河系</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git使用简明&quot;&gt;&lt;a href=&quot;#Git使用简明&quot; class=&quot;headerlink&quot; title=&quot;Git使用简明&quot;&gt;&lt;/a&gt;Git使用简明&lt;/h2&gt;&lt;p&gt;by wanglinzhizhi&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="Git" scheme="http://www.wanglinzhizhi.me/tags/Git/"/>
    
      <category term="Gitflow" scheme="http://www.wanglinzhizhi.me/tags/Gitflow/"/>
    
      <category term="wanglinzhizhi" scheme="http://www.wanglinzhizhi.me/tags/wanglinzhizhi/"/>
    
  </entry>
  
  <entry>
    <title>Google Material UI 动画的贝叶斯曲线</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Google%20Material%20UI%20%E5%8A%A8%E7%94%BB%E7%9A%84%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%9B%B2%E7%BA%BF/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Google Material UI 动画的贝叶斯曲线/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-Material-UI-动画的贝叶斯曲线"><a href="#Google-Material-UI-动画的贝叶斯曲线" class="headerlink" title="Google Material UI 动画的贝叶斯曲线"></a>Google Material UI 动画的贝叶斯曲线</h2><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>: <span class="selector-class">.2s</span> <span class="selector-tag">XXX</span>  <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.4</span>,0,<span class="selector-class">.2</span>,1);</div></pre></td></tr></table></figure>
<p>XXX是自定义的 动画.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-Material-UI-动画的贝叶斯曲线&quot;&gt;&lt;a href=&quot;#Google-Material-UI-动画的贝叶斯曲线&quot; class=&quot;headerlink&quot; title=&quot;Google Material UI 动画的贝叶斯曲线&quot;&gt;&lt;/a&gt;Googl
    
    </summary>
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://www.wanglinzhizhi.me/tags/CSS/"/>
    
      <category term="贝叶斯运动曲线" scheme="http://www.wanglinzhizhi.me/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E8%BF%90%E5%8A%A8%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>深入理解学习Git工作流</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/GitFlow/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/GitFlow/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解学习Git工作流（git-workflow"><a href="#深入理解学习Git工作流（git-workflow" class="headerlink" title="深入理解学习Git工作流（git-workflow-"></a><a href="https://segmentfault.com/t/%E5%B7%A5%E4%BD%9C%E6%B5%81/blogs" target="_blank" rel="external">深入理解学习Git工作流（git-workflow-</a></h1><p><a href="https://segmentfault.com/u/xirong" target="_blank" rel="external"><strong>xirong</strong></a> 2015年06月18日发布</p>
<ul>
<li>推荐 <strong>28</strong> 推荐</li>
<li>已收藏 <strong>223</strong> 收藏，<strong>13.9k</strong> 浏览</li>
</ul>
<p>个人在学习git工作流的过程中，从原有的 SVN 模式很难完全理解git的协作模式，直到有一天我看到了下面的文章，好多遗留在心中的困惑迎刃而解，于是我将这部分资料进行整理放到了github上，欢迎star查看最新更新内容， <a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="external">https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md</a></p>
<ul>
<li>我们以使用SVN的工作流来使用git有什么不妥？</li>
<li>git 方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？</li>
<li>经典的master-发布、develop-主开发、hotfix-不过修复如何避免代码不经过验证上线？</li>
<li>如何在github上面与他人一起协作，star-fork-pull request是怎样的流程？</li>
</ul>
<p>我个人很感激这篇文章，所以进行了整理，希望能帮到更多的人。整篇文章由 <a href="https://github.com/xirong" target="_blank" rel="external">xirong</a> 整理自 <a href="https://github.com/oldratlee" target="_blank" rel="external">oldratlee</a> 的github，方便统一的学习回顾，在此感谢下面两位的贡献。</p>
<p>原文链接：<a href="https://www.atlassian.com/git/workflows" target="_blank" rel="external">Git Workflows and Tutorials</a></p>
<p>简体中文：由 <a href="https://github.com/oldratlee" target="_blank" rel="external">oldratlee</a> 翻译在 github 上 <a href="https://github.com/oldratlee/translations/tree/master/git-workflows-and-tutorials" target="_blank" rel="external">git-workflows-and-tutorials</a></p>
<p><br><br><br><br><br></p>
<h1 id="一、译序"><a href="#一、译序" class="headerlink" title="一、译序"></a>一、译序</h1><p>工作流其实不是一个初级主题，背后的本质问题其实是有效的项目流程管理和高效的开发协同约定，不仅是<code>Git</code>或<code>SVN</code>等<a href="http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external"><code>VCS</code></a>或<a href="http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86" target="_blank" rel="external"><code>SCM</code></a>工具的使用。</p>
<p>这篇指南以大家在<code>SVN</code>中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的<code>Pull Request</code>功能，体系地讲解了各种工作流的应用。</p>
<p>行文中实践原则和操作示例并重，对于<code>Git</code>的资深玩家可以梳理思考提升，而新接触的同学，也可以跟着step-by-step操作来操练学习并在实际工作中上手使用。</p>
<p>关于<code>Git</code>工作流主题，网上体系的中文资料不多，主要是零散的操作说明，希望这篇文章能让你更深入理解并在工作中灵活有效地使用起来。</p>
<p><strong>PS</strong>：</p>
<p>文中<code>Pull Request</code>的介绍用的是<code>Bitbucket</code>代码托管服务，由于和<code>GitHub</code>基本一样，如果你用的是<code>GitHub</code>（我自己也主要使用<code>GitHub</code>托管代码），不影响理解和操作。</p>
<p><strong>PPS</strong>：</p>
<p>本指南循序渐进地讲解工作流，如果<code>Git</code>用的不多，可以从前面的讲的工作流开始操练。操作过程去感受指南的讲解：解决什么问题、如何解决问题，这样理解就深了，也方便活用。</p>
<p><code>Gitflow</code>工作流是经典模型，体现了工作流的经验和精髓。随着项目过程复杂化，会感受到这个工作流中深思熟虑和威力！</p>
<p><code>Forking</code>工作流是协作的（<code>GitHub</code>风格）可以先看看<code>Github</code>的Help：<a href="https://help.github.com/articles/fork-a-repo/" target="_blank" rel="external">Fork A Repo</a>和<a href="https://help.github.com/articles/using-pull-requests/" target="_blank" rel="external">Using pull requests</a> 。照着操作，给一个<code>Github</code>项目贡献你的提交，有操作经验再看指南容易意会。指南中给了<a href="https://github.com/oldratlee/translations/blob/master/git-workflows-and-tutorials/workflow-forking.md#%E5%BC%80%E5%8F%91%E8%80%85fork%E6%AD%A3%E5%BC%8F%E4%BB%93%E5%BA%93" target="_blank" rel="external">自己实现<code>Fork</code>的方法</a>：<code>Fork</code>就是服务端的克隆。在指南的操练中使用代码托管服务（如<code>GitHub</code>、<code>Bitbucket</code>），可以点一下按钮就让开发者完成仓库的<code>fork</code>操作。</p>
<p>:see_no_evil: <a href="http://weibo.com/oldratlee" target="_blank" rel="external">自己</a>理解粗浅，翻译中不足和不对之处，欢迎建议（<a href="https://github.com/oldratlee/translations/issues" target="_blank" rel="external">提交Issue</a>）和指正（<a href="https://github.com/oldratlee/translations/fork" target="_blank" rel="external">Fork后提交代码</a>）！</p>
<p><br><br><br><br><br><br></p>
<h1 id="二、Git工作流指南"><a href="#二、Git工作流指南" class="headerlink" title="二、Git工作流指南"></a>二、<code>Git</code>工作流指南</h1><p>:point_right: 工作流有各式各样的用法，但也正因此使得在实际工作中如何上手使用变得很头大。这篇指南通过总览公司团队中最常用的几种<code>Git</code>工作流让大家可以上手使用。</p>
<p>在阅读的过程中请记住，本文中的几种工作流是作为方案指导而不是条例规定。在展示了各种工作流可能的用法后，你可以从不同的工作流中挑选或揉合出一个满足你自己需求的工作流。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git_workflow.png&amp;objectId=1190000002918123&amp;token=cac153a6001ea7c6e95edf20a43a45d6" alt=""></p>
<p><br><br><br><br><br></p>
<h2 id="2-1-集中式工作流"><a href="#2-1-集中式工作流" class="headerlink" title="2.1 集中式工作流"></a>2.1 集中式工作流</h2><p>如果你的开发团队成员已经很熟悉<code>Subversion</code>，集中式工作流让你无需去适应一个全新流程就可以体验<code>Git</code>带来的收益。这个工作流也可以作为向更<code>Git</code>风格工作流迁移的友好过渡。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn.png&amp;objectId=1190000002918123&amp;token=18dea553725e6476043e5f15aaa01357" alt=""></p>
<p>转到分布式版本控制系统看起来像个令人生畏的任务，但不改变已用的工作流你也可以用上<code>Git</code>带来的收益。团队可以用和<code>Subversion</code>完全不变的方式来开发项目。</p>
<p>但使用<code>Git</code>加强开发的工作流，<code>Git</code>有相比<code>SVN</code>的几个优势。<br>首先，每个开发可以有属于自己的整个工程的本地拷贝。隔离的环境让各个开发者的工作和项目的其他部分修改独立开来 ——</p>
<p>即自由地提交到自己的本地仓库，先完全忽略上游的开发，直到方便的时候再把修改反馈上去。</p>
<p>其次，<code>Git</code>提供了强壮的分支和合并模型。不像<code>SVN</code>，<code>Git</code>的分支设计成可以做为一种用来在仓库之间集成代码和分享修改的『失败安全』的机制。</p>
<p><br><br><br><br></p>
<h3 id="2-1-1-工作方式"><a href="#2-1-1-工作方式" class="headerlink" title="2.1.1 工作方式"></a>2.1.1 工作方式</h3><p>像<code>Subversion</code>一样，集中式工作流以中央仓库作为项目所有修改的单点实体。相比<code>SVN</code>缺省的开发分支<code>trunk</code>，<code>Git</code>叫做<code>master</code>，所有修改提交到这个分支上。本工作流只用到<code>master</code>这一个分支。</p>
<p>开发者开始先克隆中央仓库。在自己的项目拷贝中像<code>SVN</code>一样的编辑文件和提交修改；但修改是存在本地的，和中央仓库是完全隔离的。开发者可以把和上游的同步延后到一个方便时间点。</p>
<p>要发布修改到正式项目中，开发者要把本地<code>master</code>分支的修改『推』到中央仓库中。这相当于<code>svn commit</code>操作，但<code>push</code>操作会把所有还不在中央仓库的本地提交都推上去。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-push-local.png&amp;objectId=1190000002918123&amp;token=cb6d4428bd989a9db24ea68b29588a67" alt=""></p>
<p><br><br><br><br><br></p>
<h3 id="2-1-2-冲突解决"><a href="#2-1-2-冲突解决" class="headerlink" title="2.1.2 冲突解决"></a>2.1.2 冲突解决</h3><p>中央仓库代表了正式项目，所以提交历史应该被尊重且是稳定不变的。如果开发者本地的提交历史和中央仓库有分歧，<code>Git</code>会拒绝<code>push</code>提交否则会覆盖已经在中央库的正式提交。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-managingconflicts.png&amp;objectId=1190000002918123&amp;token=11e5c3cc6f6a74ffd97f1fb369580006" alt=""></p>
<p>在开发者提交自己功能修改到中央库前，需要先<code>fetch</code>在中央库的新增提交，<code>rebase</code>自己提交到中央库提交历史之上。</p>
<p>这样做的意思是在说，『我要把自己的修改加到别人已经完成的修改上。』最终的结果是一个完美的线性历史，就像以前的<code>SVN</code>的工作流中一样。</p>
<p>如果本地修改和上游提交有冲突，<code>Git</code>会暂停<code>rebase</code>过程，给你手动解决冲突的机会。<code>Git</code>解决合并冲突，用和生成提交一样的<a href="https://www.atlassian.com/git/tutorial/git-basics#!status" target="_blank" rel="external"><code>git status</code></a>和<a href="https://www.atlassian.com/git/tutorial/git-basics#!add" target="_blank" rel="external"><code>git add</code></a>命令，很一致方便。还有一点，如果解决冲突时遇到麻烦，<code>Git</code>可以很简单中止整个<code>rebase</code>操作，重来一次（或者让别人来帮助解决）。</p>
<p><br><br><br><br><br></p>
<h3 id="2-1-3-示例"><a href="#2-1-3-示例" class="headerlink" title="2.1.3 示例"></a>2.1.3 示例</h3><p>让我们一起逐步分解来看看一个常见的小团队如何用这个工作流来协作的。有两个开发者小明和小红，看他们是如何开发自己的功能并提交到中央仓库上的。</p>
<h4 id="有人先初始化好中央仓库"><a href="#有人先初始化好中央仓库" class="headerlink" title="有人先初始化好中央仓库"></a>有人先初始化好中央仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-initialize.png&amp;objectId=1190000002918123&amp;token=87ea7a312eea3ac60744ef5997f686c7" alt=""></p>
<p>第一步，有人在服务器上创建好中央仓库。如果是新项目，你可以初始化一个空仓库；否则你要导入已有的<code>Git</code>或<code>SVN</code>仓库。</p>
<p>中央仓库应该是个裸仓库（<code>bare repository</code>），即没有工作目录（<code>working directory</code>）的仓库。可以用下面的命令创建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh user@host</div><div class="line">git init --bare /path/to/repo.git</div></pre></td></tr></table></figure>
<p>确保写上有效的<code>user</code>（<code>SSH</code>的用户名），<code>host</code>（服务器的域名或IP地址），<code>/path/to/repo.git</code>（你想存放仓库的位置）。</p>
<p>注意，为了表示是一个裸仓库，按照约定加上<code>.git</code>扩展名到仓库名上。</p>
<h4 id="所有人克隆中央仓库"><a href="#所有人克隆中央仓库" class="headerlink" title="所有人克隆中央仓库"></a>所有人克隆中央仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-clone.png&amp;objectId=1190000002918123&amp;token=74230960454bff61cc38e28016dde2c4" alt=""></p>
<p>下一步，各个开发者创建整个项目的本地拷贝。通过<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external"><code>git clone</code></a>命令完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone ssh://user@host/path/to/repo.git</div></pre></td></tr></table></figure>
<p>基于你后续会持续和克隆的仓库做交互的假设，克隆仓库时<code>Git</code>会自动添加远程别名<code>origin</code>指回『父』仓库。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小明开发功能"><a href="#小明开发功能" class="headerlink" title="小明开发功能"></a>小明开发功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-1.png&amp;objectId=1190000002918123&amp;token=318dfc4b7192333b4d04457a8dd58de3" alt=""></p>
<p>在小明的本地仓库中，他使用标准的<code>Git</code>过程开发功能：编辑、暂存（<code>Stage</code>）和提交。</p>
<p>如果你不熟悉暂存区（<code>Staging Area</code>），这里说明一下：<strong>暂存区</strong>的用来准备一个提交，但可以不用把工作目录中所有的修改内容都包含进来。</p>
<p>这样你可以创建一个高度聚焦的提交，尽管你本地修改很多内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status # 查看本地仓库的修改状态</div><div class="line">git add # 暂存文件</div><div class="line">git commit # 提交文件</div></pre></td></tr></table></figure>
<p>请记住，因为这些命令生成的是本地提交，小明可以按自己需求反复操作多次，而不用担心中央仓库上有了什么操作。</p>
<p>对需要多个更简单更原子分块的大功能，这个做法是很有用的。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红开发功能"><a href="#小红开发功能" class="headerlink" title="小红开发功能"></a>小红开发功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-2.png&amp;objectId=1190000002918123&amp;token=28e354bf920e3b90fa6894ea290a1a00" alt=""></p>
<p>与此同时，小红在自己的本地仓库中用相同的编辑、暂存和提交过程开发功能。和小明一样，她也不关心中央仓库有没有新提交；<br>当然更不关心小明在他的本地仓库中的操作，因为所有本地仓库都是私有的。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小明发布功能"><a href="#小明发布功能" class="headerlink" title="小明发布功能"></a>小明发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-3.png&amp;objectId=1190000002918123&amp;token=093a21ecc0bdbebb13f61585151f72a7" alt=""></p>
<p>一旦小明完成了他的功能开发，会发布他的本地提交到中央仓库中，这样其它团队成员可以看到他的修改。他可以用下面的<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>git push</code>命令</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>注意，<code>origin</code>是在小明克隆仓库时<code>Git</code>创建的远程中央仓库别名。<code>master</code>参数告诉<code>Git</code>推送的分支。<br>由于中央仓库自从小明克隆以来还没有被更新过，所以<code>push</code>操作不会有冲突，成功完成。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="小红试着发布功能"><a href="#小红试着发布功能" class="headerlink" title="小红试着发布功能"></a>小红试着发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-4.png&amp;objectId=1190000002918123&amp;token=ece2216852baad8d0831038362b6e3f9" alt=""></p>
<p>一起来看看在小明发布修改后，小红<code>push</code>修改会怎么样？她使用完全一样的<code>push</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>但她的本地历史已经和中央仓库有分岐了，<code>Git</code>拒绝操作并给出下面很长的出错消息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: failed to push some refs to &apos;/path/to/repo.git&apos;</div><div class="line">hint: Updates were rejected because the tip of your current branch is behind</div><div class="line">hint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)</div><div class="line">hint: before pushing again.</div><div class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</div></pre></td></tr></table></figure>
<p>这避免了小红覆写正式的提交。她要先<code>pull</code>小明的更新到她的本地仓库合并上她的本地修改后，再重试。</p>
<p><br><br><br><br><br></p>
<h4 id="小红在小明的提交之上rebase"><a href="#小红在小明的提交之上rebase" class="headerlink" title="小红在小明的提交之上rebase"></a>小红在小明的提交之上<code>rebase</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-5.png&amp;objectId=1190000002918123&amp;token=6430522a0e2cec6438cabb09e09b6354" alt=""></p>
<p>小红用<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull</code></a>合并上游的修改到自己的仓库中。<br>这条命令类似<code>svn update</code>——拉取所有上游提交命令到小红的本地仓库，并尝试和她的本地修改合并：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull --rebase origin master</div></pre></td></tr></table></figure>
<p><code>--rebase</code>选项告诉<code>Git</code>把小红的提交移到同步了中央仓库修改后的<code>master</code>分支的顶部，如下图所示：</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-6.png&amp;objectId=1190000002918123&amp;token=9bd72f11e19f3c1a2c9491dbff73a334" alt=""></p>
<p>如果你忘加了这个选项，<code>pull</code>操作仍然可以完成，但每次<code>pull</code>操作要同步中央仓库中别人修改时，提交历史会以一个多余的<strong>『合并提交』</strong>结尾。</p>
<p>对于集中式工作流，最好是使用<code>rebase</code>而不是生成一个合并提交。</p>
<p><br><br><br><br><br></p>
<h4 id="小红解决合并冲突"><a href="#小红解决合并冲突" class="headerlink" title="小红解决合并冲突"></a>小红解决合并冲突</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-7.png&amp;objectId=1190000002918123&amp;token=85acfc687d7ede96bdf596021e147a2c" alt=""></p>
<p><code>rebase</code>操作过程是把本地提交一次一个地迁移到更新了的中央仓库<code>master</code>分支之上。<br>这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。</p>
<p>这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入<code>Bug</code>的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p>
<p>如果小红和小明的功能是相关的，不大可能在<code>rebase</code>过程中有冲突。如果有，<code>Git</code>在合并有冲突的提交处暂停<code>rebase</code>过程，输出下面的信息并带上相关的指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CONFLICT (content): Merge conflict in &lt;some-file&gt;</div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-8.png&amp;objectId=1190000002918123&amp;token=e9fff79b5189565698de39b45d42551d" alt=""></p>
<p><code>Git</code>很赞的一点是，任何人可以解决他自己的冲突。在这个例子中，小红可以简单的运行<a href="https://www.atlassian.com/git/tutorial/git-basics#!status" target="_blank" rel="external"><code>git status</code></a>命令来查看哪里有问题。</p>
<p>冲突文件列在<code>Unmerged paths</code>（未合并路径）一节中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Unmerged paths:</div><div class="line"># (use &quot;git reset HEAD &lt;some-file&gt;...&quot; to unstage)</div><div class="line"># (use &quot;git add/rm &lt;some-file&gt;...&quot; as appropriate to mark resolution)</div><div class="line">#</div><div class="line"># both modified: &lt;some-file&gt;</div></pre></td></tr></table></figure>
<p>接着小红编辑这些文件。修改完成后，用老套路暂存这些文件，并让<a href="https://www.atlassian.com/git/tutorial/rewriting-git-history#!rebase" target="_blank" rel="external"><code>git rebase</code></a>完成剩下的事：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add &lt;some-file&gt;</div><div class="line">git rebase --continue</div></pre></td></tr></table></figure>
<p>要做的就这些了。<code>Git</code>会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。</p>
<p>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull --rebase</code></a>命令前的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git rebase --abort</div></pre></td></tr></table></figure>
<p><br><br><br><br><br><br><br></p>
<h4 id="小红成功发布功能"><a href="#小红成功发布功能" class="headerlink" title="小红成功发布功能"></a>小红成功发布功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-svn-9.png&amp;objectId=1190000002918123&amp;token=9a2d1f5f27647dac4ad8d929832e93f6" alt=""></p>
<p>小红完成和中央仓库的同步后，就能成功发布她的修改了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>如你所见，仅使用几个<code>Git</code>命令我们就可以模拟出传统<code>Subversion</code>开发环境。对于要从<code>SVN</code>迁移过来的团队来说这太好了，但没有发挥出<code>Git</code>分布式本质的优势。</p>
<p>如果你的团队适应了集中式工作流，但想要更流畅的协作效果，绝对值得探索一下 <code>功能分支工作流</code> 的收益。<br>通过为一个功能分配一个专门的分支，能够做到一个新增功能集成到正式项目之前对新功能进行深入讨论。</p>
<p><br><br><br><br><br><br></p>
<h2 id="2-2-功能分支工作流"><a href="#2-2-功能分支工作流" class="headerlink" title="2.2 功能分支工作流"></a>2.2 功能分支工作流</h2><p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支来开发。这样可以在把新功能集成到正式项目前，用<code>Pull Requests</code>的方式讨论变更。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature_branch.png&amp;objectId=1190000002918123&amp;token=13adfff0197f20b88a1b3896610ebfb9" alt=""></p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-1.png&amp;objectId=1190000002918123&amp;token=7b6b5ef4d971842877613c04afd454f6" alt=""></p>
<p>一旦你玩转了<a href="undefined">集中式工作流</a>，在开发过程中可以很简单地加上功能分支，用来鼓励开发者之间协作和简化交流。</p>
<p>功能分支工作流背后的核心思路是所有的功能开发应该在一个专门的分支，而不是在<code>master</code>分支上。<br>这个隔离可以方便多个开发者在各自的功能上开发而不会弄乱主干代码。<br>另外，也保证了<code>master</code>分支的代码一定不会是有问题的，极大有利于集成环境。</p>
<p>功能开发隔离也让<a href="undefined"><code>pull requests</code>工作流</a>成功可能，<br><code>pull requests</code>工作流能为每个分支发起一个讨论，在分支合入正式项目之前，给其它开发者有表示赞同的机会。<br>另外，如果你在功能开发中有问题卡住了，可以开一个<code>pull requests</code>来向同学们征求建议。</p>
<p>这些做法的重点就是，<code>pull requests</code>让团队成员之间互相评论工作变成非常方便！</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-2-1-工作方式"><a href="#2-2-1-工作方式" class="headerlink" title="2.2.1 工作方式"></a>2.2.1 工作方式</h3><p>功能分支工作流仍然用中央仓库，并且<code>master</code>分支还是代表了正式项目的历史。</p>
<p>但不是直接提交本地历史到各自的本地<code>master</code>分支，开发者每次在开始新功能前先创建一个新分支。</p>
<p>功能分支应该有个有描述性的名字，比如<code>animated-menu-items</code>或<code>issue-#1061</code>，这样可以让分支有个清楚且高聚焦的用途。</p>
<p>在<code>master</code>分支和功能分支之间，<code>Git</code>是没有技术上的区别，所以开发者可以用和集中式工作流中完全一样的方式编辑、暂存和提交修改到功能分支上。</p>
<p>另外，功能分支也可以（且应该）<code>push</code>到中央仓库中。这样不修改正式代码就可以和其它开发者分享提交的功能。</p>
<p>由于<code>master</code>仅有的一个『特殊』分支，在中央仓库上存多个功能分支不会有任何问题。当然，这样做也可以很方便地备份各自的本地提交。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-2-2-Pull-Requests"><a href="#2-2-2-Pull-Requests" class="headerlink" title="2.2.2 Pull Requests"></a>2.2.2 <code>Pull Requests</code></h3><p>功能分支除了可以隔离功能的开发，也使得通过<a href="undefined"><code>Pull Requests</code></a>讨论变更成为可能。<br>一旦某个开发完成一个功能，不是立即合并到<code>master</code>，而是<code>push</code>到中央仓库的功能分支上并发起一个<code>Pull Request</code>请求去合并修改到<code>master</code>。</p>
<p>在修改成为主干代码前，这让其它的开发者有机会先去<code>Review</code>变更。</p>
<p><code>Code Review</code>是<code>Pull Requests</code>的一个重要的收益，但<code>Pull Requests</code>目的是讨论代码一个通用方式。<br>你可以把<code>Pull Requests</code>作为专门给某个分支的讨论。这意味着可以在更早的开发过程中就可以进行<code>Code Review</code>。</p>
<p>比如，一个开发者开发功能需要帮助时，要做的就是发起一个<code>Pull Request</code>，相关的人就会自动收到通知，在相关的提交旁边能看到需要帮助解决的问题。</p>
<p>一旦<code>Pull Request</code>被接受了，发布功能要做的就和集中式工作流就很像了。</p>
<p>首先，确定本地的<code>master</code>分支和上游的<code>master</code>分支是同步的。然后合并功能分支到本地<code>master</code>分支并<code>push</code>已经更新的本地<code>master</code>分支到中央仓库。</p>
<p>仓库管理的产品解决方案像<a href="http://bitbucket.org/" target="_blank" rel="external"><code>Bitbucket</code></a>或<a href="http://www.atlassian.com/stash" target="_blank" rel="external"><code>Stash</code></a>，可以良好地支持<code>Pull Requests</code>。可以看看<code>Stash</code>的<a href="https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash" target="_blank" rel="external"><code>Pull Requests</code>文档</a>。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-2-3-示例"><a href="#2-2-3-示例" class="headerlink" title="2.2.3 示例"></a>2.2.3 示例</h3><p>下面的示例演示了如何把<code>Pull Requests</code>作为<code>Code Review</code>的方式，但注意<code>Pull Requests</code>可以用于很多其它的目的。</p>
<p><br><br><br><br><br></p>
<h4 id="小红开始开发一个新功能"><a href="#小红开始开发一个新功能" class="headerlink" title="小红开始开发一个新功能"></a>小红开始开发一个新功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-2.png&amp;objectId=1190000002918123&amp;token=5fdc09357dca8116668ea17617ccefde" alt=""></p>
<p>在开始开发功能前，小红需要一个独立的分支。使用下面的命令<a href="https://www.atlassian.com/git/tutorial/git-branches#!checkout" target="_blank" rel="external">新建一个分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b marys-feature master</div></pre></td></tr></table></figure>
<p>这个命令检出一个基于<code>master</code>名为<code>marys-feature</code>的分支，<code>Git</code>的<code>-b</code>选项表示如果分支还不存在则新建分支。</p>
<p>这个新分支上，小红按老套路编辑、暂存和提交修改，按需要提交以实现功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status</div><div class="line">git add &lt;some-file&gt;</div><div class="line">git commit</div></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<h4 id="小红要去吃个午饭"><a href="#小红要去吃个午饭" class="headerlink" title="小红要去吃个午饭"></a>小红要去吃个午饭</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-3.png&amp;objectId=1190000002918123&amp;token=4f934833032d75e4930ec888537d22f4" alt=""></p>
<p>早上小红为新功能添加一些提交。<br>去吃午饭前，<code>push</code>功能分支到中央仓库是很好的做法，这样可以方便地备份，如果和其它开发协作，也让他们可以看到小红的提交。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin marys-feature</div></pre></td></tr></table></figure>
<p>这条命令<code>push</code> <code>marys-feature</code>分支到中央仓库（<code>origin</code>），<code>-u</code>选项设置本地分支去跟踪远程对应的分支。</p>
<p>设置好跟踪的分支后，小红就可以使用<code>git push</code>命令省去指定推送分支的参数。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-4.png&amp;objectId=1190000002918123&amp;token=a3906c9f4d1fbcfc7e8d1e63534702bf" alt=""></p>
<p>小红吃完午饭回来，完成整个功能的开发。<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">在合并到<code>master</code>之前</a>，<br>她发起一个<code>Pull Request</code>让团队的其它人知道功能已经完成。但首先，她要确认中央仓库中已经有她最近的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure>
<p>然后，在她的<code>Git</code> <code>GUI</code>客户端中发起<code>Pull Request</code>，请求合并<code>marys-feature</code>到<code>master</code>，团队成员会自动收到通知。</p>
<p><code>Pull Request</code>很酷的是可以在相关的提交旁边显示评注，所以你可以很对某个变更集提问。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小黑收到Pull-Request"><a href="#小黑收到Pull-Request" class="headerlink" title="小黑收到Pull Request"></a>小黑收到<code>Pull Request</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-5.png&amp;objectId=1190000002918123&amp;token=620d388c72d0f57f55d12dd71e08fd8d" alt=""></p>
<p>小黑收到了<code>Pull Request</code>后会查看<code>marys-feature</code>的修改。决定在合并到正式项目前是否要做些修改，且通过<code>Pull Request</code>和小红来回地讨论。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红再做修改"><a href="#小红再做修改" class="headerlink" title="小红再做修改"></a>小红再做修改</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-6.png&amp;objectId=1190000002918123&amp;token=d79bd474403568ec4f3db346586c2717" alt=""></p>
<p>要再做修改，小红用和功能第一个迭代完全一样的过程。编辑、暂存、提交并<code>push</code>更新到中央仓库。小红这些活动都会显示在<code>Pull Request</code>上，小黑可以断续做评注。</p>
<p>如果小黑有需要，也可以把<code>marys-feature</code>分支拉到本地，自己来修改，他加的提交也会一样显示在<code>Pull Request</code>上。</p>
<p><br><br><br><br><br><br></p>
<h4 id="小红发布她的功能"><a href="#小红发布她的功能" class="headerlink" title="小红发布她的功能"></a>小红发布她的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-feature-branch-7.png&amp;objectId=1190000002918123&amp;token=dd10ce3ea0b8e482c76cc46243af07f9" alt=""></p>
<p>一旦小黑可以的接受<code>Pull Request</code>，就可以合并功能到稳定项目代码中（可以由小黑或是小红来做这个操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div><div class="line">git pull</div><div class="line">git pull origin marys-feature</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>无论谁来做合并，首先要检出<code>master</code>分支并确认是它是最新的。然后执行<code>git pull origin marys-feature</code>合并<code>marys-feature</code>分支到和已经和远程一致的本地<code>master</code>分支。</p>
<p>你可以使用简单<code>git merge marys-feature</code>命令，但前面的命令可以保证总是最新的新功能分支。</p>
<p>无论谁来做合并，首先要检出<code>master</code>分支并确认是它是最新的。然后执行<code>git pull origin marys-feature</code>合并<code>marys-feature</code>分支到和已经和远程一致的本地<code>master</code>分支。<br>你可以使用简单<code>git merge marys-feature</code>命令，但前面的命令可以保证总是最新的新功能分支。<br>最后更新的<code>master</code>分支要重新<code>push</code>回到<code>origin</code>。</p>
<p>这个过程常常会生成一个合并提交。有些开发者喜欢有合并提交，因为它像一个新功能和原来代码基线的连通符。但如果你偏爱线性的提交历史，可以在执行合并时<code>rebase</code>新功能到<code>master</code>分支的顶部，这样生成一个快进（<code>fast-forward</code>）的合并。</p>
<p>一些<code>GUI</code>客户端可以只要点一下『接受』按钮执行好上面的命令来自动化<code>Pull Request</code>接受过程。<br>如果你的不能这样，至少在功能合并到<code>master</code>分支后能自动关闭<code>Pull Request</code>。</p>
<h4 id="与此同时，小明在做和小红一样的事"><a href="#与此同时，小明在做和小红一样的事" class="headerlink" title="与此同时，小明在做和小红一样的事"></a>与此同时，小明在做和小红一样的事</h4><p>当小红和小黑在<code>marys-feature</code>上工作并讨论她的<code>Pull Request</code>的时候，小明在自己的功能分支上做完全一样的事。</p>
<p>通过隔离功能到独立的分支上，每个人都可以自主的工作，当然必要的时候在开发者之间分享变更还是比较繁琐的。</p>
<p>到了这里，但愿你发现了<code>功能分支</code>可以很直接地在 <code>集中式工作流</code> 的仅有的<code>master</code>分支上完成多功能的开发。<br>另外，功能分支还使用了<code>Pull Request</code>，使得可以在你的版本控制<code>GUI</code>客户端中讨论某个提交。</p>
<p>功能分支工作流是开发项目异常灵活的方式。问题是，有时候太灵活了。对于大型团队，常常需要给不同分支分配一个更具体的角色。</p>
<p><code>Gitflow</code>工作流是管理功能开发、发布准备和维护的常用模式。</p>
<p><br><br><br><br><br><br></p>
<h2 id="2-3-Gitflow工作流"><a href="#2-3-Gitflow工作流" class="headerlink" title="2.3 Gitflow工作流"></a>2.3 <code>Gitflow</code>工作流</h2><p><code>Gitflow</code>工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-gitflow.png&amp;objectId=1190000002918123&amp;token=ee270ee95a574ec7c0b3161043b94ea0" alt=""></p>
<p>这节介绍的<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external"><code>Gitflow</code>工作流</a>借鉴自在<a href="http://nvie.com/" target="_blank" rel="external">nvie</a>的<em>Vincent Driessen</em>。</p>
<p><code>Gitflow</code>工作流定义了一个围绕<code>项目发布</code>的严格分支模型。虽然比<a href="undefined">功能分支工作流</a>复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p>
<p><code>Gitflow</code>工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。</p>
<p>除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。</p>
<p>当然你可以用上功能分支工作流所有的好处：<code>Pull Requests</code>、隔离实验性开发和更高效的协作。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-1-工作方式"><a href="#2-3-1-工作方式" class="headerlink" title="2.3.1 工作方式"></a>2.3.1 工作方式</h3><p><code>Gitflow</code>工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并<code>push</code>分支到要中央仓库中。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-2-历史分支"><a href="#2-3-2-历史分支" class="headerlink" title="2.3.2 历史分支"></a>2.3.2 历史分支</h3><p>相对使用仅有的一个<code>master</code>分支，<code>Gitflow</code>工作流使用2个分支来记录项目的历史。<code>master</code>分支存储了正式发布的历史，而<code>develop</code>分支作为功能的集成分支。</p>
<p>这样也方便<code>master</code>分支上的所有提交分配一个版本号。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-1historical.png&amp;objectId=1190000002918123&amp;token=0f431c7f8666865a1a457fc8b6a09546" alt=""></p>
<p>剩下要说明的问题围绕着这2个分支的区别展开。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-3-功能分支"><a href="#2-3-3-功能分支" class="headerlink" title="2.3.3 功能分支"></a>2.3.3 功能分支</h3><p>每个新功能位于一个自己的分支，这样可以<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code>到中央仓库以备份和协作</a>。</p>
<p>但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并回<code>develop</code>分支</a>。</p>
<p>每个新功能位于一个自己的分支，这样可以<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code>到中央仓库以备份和协作</a>。<br>但功能分支不是从<code>master</code>分支上拉出新分支，而是使用<code>develop</code>分支作为父分支。当新功能完成时，<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并回<code>develop</code>分支</a>。<br>新功能提交应该从不直接与<code>master</code>分支交互。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-2feature.png&amp;objectId=1190000002918123&amp;token=f9d5cd653f83e6d43376e02b5c8d4143" alt=""></p>
<p>注意，从各种含义和目的上来看，功能分支加上<code>develop</code>分支就是功能分支工作流的用法。但<code>Gitflow</code>工作流没有在这里止步。</p>
<p><br><br><br><br><br><br></p>
<h3 id="2-3-4-发布分支"><a href="#2-3-4-发布分支" class="headerlink" title="2.3.4 发布分支"></a>2.3.4 发布分支</h3><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-3release.png&amp;objectId=1190000002918123&amp;token=3b4ab43d3ac79525702f4334b5413557" alt=""></p>
<p>一旦<code>develop</code>分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从<code>develop</code>分支上<code>fork</code>一个发布分支。</p>
<p>新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上——<br>这个分支只应该做<code>Bug</code>修复、文档生成和其它面向发布任务。</p>
<p>一旦对外发布的工作都完成了，发布分支合并到<code>master</code>分支并分配一个版本号打好<code>Tag</code>。</p>
<p>另外，这些从新建发布分支以来的做的修改要合并回<code>develop</code>分支。</p>
<p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。</p>
<p>这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本4.0』，并且在仓库的目录结构中可以实际看到）。</p>
<p>常用的分支约定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">用于新建发布分支的分支: develop</div><div class="line">用于合并的分支: master</div><div class="line">分支命名: release-* 或 release/*</div></pre></td></tr></table></figure>
<h3 id="2-3-5-维护分支"><a href="#2-3-5-维护分支" class="headerlink" title="2.3.5 维护分支"></a>2.3.5 维护分支</h3><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-4maintenance.png&amp;objectId=1190000002918123&amp;token=0e0a4f43571b068d4b141e11b4bff4de" alt=""></p>
<p>维护分支或说是热修复（<code>hotfix</code>）分支用于生成快速给产品发布版本（<code>production releases</code>）打补丁，这是唯一可以直接从<code>master</code>分支<code>fork</code>出来的分支。</p>
<p>修复完成，修改应该马上合并回<code>master</code>分支和<code>develop</code>分支（当前的发布分支），<code>master</code>分支应该用新的版本号打好<code>Tag</code>。</p>
<p>为<code>Bug</code>修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。<br>你可以把维护分支想成是一个直接在<code>master</code>分支上处理的临时发布。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-3-6-示例"><a href="#2-3-6-示例" class="headerlink" title="2.3.6 示例"></a>2.3.6 示例</h3><p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。</p>
<h4 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-5createdev.png&amp;objectId=1190000002918123&amp;token=0d727e83af80cdc3b5061361c8c47141" alt=""></p>
<p>第一步为<code>master</code>分支配套一个<code>develop</code>分支。简单来做可以<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">本地创建一个空的<code>develop</code>分支</a>，<code>push</code>到服务器上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch develop</div><div class="line">git push -u origin develop</div></pre></td></tr></table></figure>
<p>以后这个分支将会包含了项目的全部历史，而<code>master</code>分支将只包含了部分历史。其它开发者这时应该<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external">克隆中央仓库</a>，建好<code>develop</code>分支的跟踪分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone ssh://user@host/path/to/repo.git</div><div class="line">git checkout -b develop origin/develop</div></pre></td></tr></table></figure>
<p>现在每个开发都有了这些历史分支的本地拷贝。</p>
<p><br><br><br></p>
<h4 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-6maryjohnbeginnew.png&amp;objectId=1190000002918123&amp;token=a9c571a2d28cb8b09e250efbb716b5e7" alt=""></p>
<p>这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于<code>master</code>分支，而是应该<a href="https://www.atlassian.com/git/tutorial/git-branches#!checkout" target="_blank" rel="external">基于<code>develop</code>分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b some-feature develop</div></pre></td></tr></table></figure>
<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status</div><div class="line">git add &lt;some-file&gt;</div><div class="line">git commit</div></pre></td></tr></table></figure>
<p><br><br><br><br></p>
<h4 id="小红完成功能开发-1"><a href="#小红完成功能开发-1" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-7maryfinishes.png&amp;objectId=1190000002918123&amp;token=6334dcdb5bbc763352524ff8ebce1272" alt=""></p>
<p>添加了提交后，小红觉得她的功能OK了。如果团队使用<code>Pull Requests</code>，这时候可以发起一个用于合并到<code>develop</code>分支。<br>否则她可以直接合并到她本地的<code>develop</code>分支后<code>push</code>到中央仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull origin develop</div><div class="line">git checkout develop</div><div class="line">git merge some-feature</div><div class="line">git push</div><div class="line">git branch -d some-feature</div></pre></td></tr></table></figure>
<p>第一条命令在合并功能前确保<code>develop</code>分支是最新的。注意，功能决不应该直接合并到<code>master</code>分支。<br>冲突解决方法和<a href="undefined">集中式工作流</a>一样。</p>
<p><br><br><br><br></p>
<h4 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-8maryprepsrelease.png&amp;objectId=1190000002918123&amp;token=3d2d488b25945d09bb417e489a552894" alt=""></p>
<p>这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。</p>
<p>像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b release-0.1 develop</div></pre></td></tr></table></figure>
<p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p>
<p>只要小红创建这个分支并<code>push</code>到中央仓库，这个发布就是功能冻结的。任何不在<code>develop</code>分支中的新功能都推到下个发布循环中。</p>
<p><br><br><br><br></p>
<h4 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-release-cycle-9maryfinishes.png&amp;objectId=1190000002918123&amp;token=7be55b4e28cefa367a5775ea46b357ca" alt=""></p>
<p>一旦准备好了对外发布，小红合并修改到<code>master</code>分支和<code>develop</code>分支上，删除发布分支。合并回<code>develop</code>分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。<br>另外，如果小红的团队要求<code>Code Review</code>，这是一个发起<code>Pull Request</code>的理想时机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge release-0.1</div><div class="line">git push</div><div class="line">git checkout develop</div><div class="line">git merge release-0.1</div><div class="line">git push</div><div class="line">git branch -d release-0.1</div></pre></td></tr></table></figure>
<p>发布分支是作为功能开发（<code>develop</code>分支）和对外发布（<code>master</code>分支）间的缓冲。只要有合并到<code>master</code>分支，就应该打好<code>Tag</code>以方便跟踪。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git tag -a 0.1 -m &quot;Initial public release&quot; master</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<p><code>Git</code>有提供各种勾子（<code>hook</code>），即仓库有事件发生时触发执行的脚本。<br>可以配置一个勾子，在你<code>push</code>中央仓库的<code>master</code>分支时，自动构建好对外发布。</p>
<p><br><br><br><br></p>
<h4 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现<code>Bug</code></h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflow-gitflow-enduserbug.png&amp;objectId=1190000002918123&amp;token=09a92134b7303b6506c624e17e7e767b" alt=""></p>
<p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个<code>Ticket</code>抱怨当前版本的一个<code>Bug</code>。<br>为了处理<code>Bug</code>，小红（或小明）从<code>master</code>分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回<code>master</code>分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b issue-#001 master</div><div class="line"># Fix the bug</div><div class="line">git checkout master</div><div class="line">git merge issue-#001</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>就像发布分支，维护分支中新加这些重要修改需要包含到<code>develop</code>分支中，所以小红要执行一个合并操作。然后就可以安全地<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">删除这个分支</a>了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge issue-#001</div><div class="line">git push</div><div class="line">git branch -d issue-#001</div></pre></td></tr></table></figure>
<p>到了这里，但愿你对<a href="undefined">集中式工作流</a>、<a href="undefined">功能分支工作流</a>和<code>Gitflow</code>工作流已经感觉很舒适了。<br>你应该也牢固的掌握了本地仓库的潜能，<code>push</code>/<code>pull</code>模式和<code>Git</code>健壮的分支和合并模型。</p>
<p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用<code>Git</code>不可违逆的条例。<br>所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让<code>Git</code>为你所用。</p>
<p><br><br><br><br><br></p>
<h2 id="2-4-Forking工作流"><a href="#2-4-Forking工作流" class="headerlink" title="2.4 Forking工作流"></a>2.4 <code>Forking</code>工作流</h2><p><code>Forking</code>工作流是分布式工作流，充分利用了<code>Git</code>在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（<code>developer</code>），并能接受不信任贡献者（<code>contributor</code>）的提交。</p>
<p><code>Forking</code>工作流和前面讨论的几种工作流有根本的不同，这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个<code>Git</code>仓库而不是1个：一个本地私有的，另一个服务端公开的。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking.png&amp;objectId=1190000002918123&amp;token=556ec96e04a6af9aa60d8ec1c999ba30" alt=""></p>
<p><code>Forking</code>工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能<code>push</code>代码到仅有的中央仓库中。</p>
<p>开发者<code>push</code>到自己的服务端仓库，而只有项目维护者才能<code>push</code>到正式仓库。</p>
<p>这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。</p>
<p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。</p>
<p>也让这个工作流成为开源项目的理想工作流。</p>
<h3 id="2-4-1-工作方式"><a href="#2-4-1-工作方式" class="headerlink" title="2.4.1 工作方式"></a>2.4.1 工作方式</h3><p>和其它的<code>Git</code>工作流一样，<code>Forking</code>工作流要先有一个公开的正式仓库存储在服务器上。</p>
<p>但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，而是<code>fork</code>正式项目在服务器上创建一个拷贝。</p>
<p>这个仓库拷贝作为他个人公开仓库 ——<br>其它开发者不允许<code>push</code>到这个仓库，但可以<code>pull</code>到修改（后面我们很快就会看这点很重要）。</p>
<p>在创建了自己服务端拷贝之后，和之前的工作流一样，开发者执行<a href="https://www.atlassian.com/git/tutorial/git-basics#!clone" target="_blank" rel="external"><code>git clone</code>命令</a>克隆仓库到本地机器上，作为私有的开发环境。</p>
<p>要提交本地修改时，<code>push</code>提交到自己公开仓库中 —— 而不是正式仓库中。<br>然后，给正式仓库发起一个<code>pull request</code>，让项目维护者知道有更新已经准备好可以集成了。<br>对于贡献的代码，<code>pull request</code>也可以很方便地作为一个讨论的地方。</p>
<p>为了集成功能到正式代码库，维护者<code>pull</code>贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，</p>
<p><a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">合并变更到自己本地的<code>master</code>分支</a>，<br>然后<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!push" target="_blank" rel="external"><code>push</code></a><code>master</code>分支到服务器的正式仓库中。</p>
<p>到此，贡献的提交成为了项目的一部分，其它的开发者应该执行<code>pull</code>操作与正式仓库同步自己本地仓库。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-4-2-正式仓库"><a href="#2-4-2-正式仓库" class="headerlink" title="2.4.2 正式仓库"></a>2.4.2 正式仓库</h3><p>在<code>Forking</code>工作流中，『官方』仓库的叫法只是一个约定，理解这点很重要。<br>从技术上来看，各个开发者仓库和正式仓库在<code>Git</code>看来没有任何区别。<br>事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。</p>
<p><br><br><br><br><br></p>
<h3 id="2-4-3-Forking工作流的分支使用方式"><a href="#2-4-3-Forking工作流的分支使用方式" class="headerlink" title="2.4.3 Forking工作流的分支使用方式"></a>2.4.3 <code>Forking</code>工作流的分支使用方式</h3><p>所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。<br>各个开发者应该用分支隔离各个功能，就像在<a href="undefined">功能分支工作流</a>和<a href="undefined"><code>Gitflow</code>工作流</a>一样。</p>
<p>唯一的区别是这些分支被共享了。在<code>Forking</code>工作流中这些分支会被<code>pull</code>到另一个开发者的本地仓库中，而在功能分支工作流和<code>Gitflow</code>工作流中是直接被<code>push</code>到正式仓库中。</p>
<p><br><br><br><br><br></p>
<h3 id="2-4-4-示例"><a href="#2-4-4-示例" class="headerlink" title="2.4.4 示例"></a>2.4.4 示例</h3><h4 id="项目维护者初始化正式仓库"><a href="#项目维护者初始化正式仓库" class="headerlink" title="项目维护者初始化正式仓库"></a>项目维护者初始化正式仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-1.png&amp;objectId=1190000002918123&amp;token=c77bc3f94131272bbd62318025782253" alt=""></p>
<p>和任何使用<code>Git</code>项目一样，第一步是创建在服务器上一个正式仓库，让所有团队成员都可以访问到。</p>
<p>通常这个仓库也会作为项目维护者的公开仓库。</p>
<p><a href="https://www.atlassian.com/git/tutorial/git-basics#!init" target="_blank" rel="external">公开仓库应该是裸仓库</a>，不管是不是正式代码库。</p>
<p>所以项目维护者会运行像下面的命令来搭建正式仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh user@host</div><div class="line">git init --bare /path/to/repo.git</div></pre></td></tr></table></figure>
<p><code>Bitbucket</code>和<code>Stash</code>提供了一个方便的<code>GUI</code>客户端以完成上面命令行做的事。<br>这个搭建中央仓库的过程和前面提到的工作流完全一样。<br>如果有现存的代码库，维护者也要<code>push</code>到这个仓库中。</p>
<p><br><br><br><br><br><br></p>
<h4 id="开发者fork正式仓库"><a href="#开发者fork正式仓库" class="headerlink" title="开发者fork正式仓库"></a>开发者<code>fork</code>正式仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-2.png&amp;objectId=1190000002918123&amp;token=eed10ddbe6eb3f0908588591db17d242" alt=""></p>
<p>其它所有的开发需要<code>fork</code>正式仓库。<br>可以用<code>git clone</code>命令<a href="https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git" target="_blank" rel="external">用<code>SSH</code>协议连通到服务器</a>，<br>拷贝仓库到服务器另一个位置 —— 是的，<code>fork</code>操作基本上就只是一个服务端的克隆。<br><code>Bitbucket</code>和<code>Stash</code>上可以点一下按钮就让开发者完成仓库的<code>fork</code>操作。</p>
<p>这一步完成后，每个开发都在服务端有一个自己的仓库。和正式仓库一样，这些仓库应该是裸仓库。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="开发者克隆自己fork出来的仓库"><a href="#开发者克隆自己fork出来的仓库" class="headerlink" title="开发者克隆自己fork出来的仓库"></a>开发者克隆自己<code>fork</code>出来的仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-3.png&amp;objectId=1190000002918123&amp;token=84d8a88dafdd7564a5e0eb6b7bf619fe" alt=""></p>
<p>下一步，各个开发者要克隆自己的公开仓库，用熟悉的<code>git clone</code>命令。</p>
<p>在这个示例中，假定用<code>Bitbucket</code>托管了仓库。记住，如果这样的话各个开发者需要有各自的<code>Bitbucket</code>账号，</p>
<p>使用下面命令克隆服务端自己的仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://user@bitbucket.org/user/repo.git</div></pre></td></tr></table></figure>
<p>相比前面介绍的工作流只用了一个<code>origin</code>远程别名指向中央仓库，<code>Forking</code>工作流需要2个远程别名 ——<br>一个指向正式仓库，另一个指向开发者自己的服务端仓库。别名的名字可以任意命名，常见的约定是使用<code>origin</code>作为远程克隆的仓库的别名<br>（这个别名会在运行<code>git clone</code>自动创建），<code>upstream</code>（上游）作为正式仓库的别名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add upstream https://bitbucket.org/maintainer/repo</div></pre></td></tr></table></figure>
<p>需要自己用上面的命令创建<code>upstream</code>别名。这样可以简单地保持本地仓库和正式仓库的同步更新。<br>注意，如果上游仓库需要认证（比如不是开源的），你需要提供用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add upstream https://user@bitbucket.org/maintainer/repo.git</div></pre></td></tr></table></figure>
<p>这时在克隆和<code>pull</code>正式仓库时，需要提供用户的密码。</p>
<h4 id="开发者开发自己的功能"><a href="#开发者开发自己的功能" class="headerlink" title="开发者开发自己的功能"></a>开发者开发自己的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-4.png&amp;objectId=1190000002918123&amp;token=c6966e41d7f459fd41e619b2d8dc7f78" alt=""></p>
<p>在刚克隆的本地仓库中，开发者可以像其它工作流一样的编辑代码、<a href="https://www.atlassian.com/git/tutorial/git-basics#!commit" target="_blank" rel="external">提交修改</a>和<a href="https://www.atlassian.com/git/tutorial/git-branches#!branch" target="_blank" rel="external">新建分支</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git checkout -b some-feature</div><div class="line"># Edit some code</div><div class="line">git commit -a -m &quot;Add first draft of some feature&quot;</div></pre></td></tr></table></figure>
<p>所有的修改都是私有的直到<code>push</code>到自己公开仓库中。如果正式项目已经往前走了，可以用<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!pull" target="_blank" rel="external"><code>git pull</code>命令</a>获得新的提交：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull upstream master</div></pre></td></tr></table></figure>
<p>由于开发者应该都在专门的功能分支上工作，<code>pull</code>操作结果会都是<a href="https://www.atlassian.com/git/tutorial/git-branches#!merge" target="_blank" rel="external">快进合并</a>。</p>
<p><br><br><br><br><br><br><br></p>
<h4 id="开发者发布自己的功能"><a href="#开发者发布自己的功能" class="headerlink" title="开发者发布自己的功能"></a>开发者发布自己的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-5.png&amp;objectId=1190000002918123&amp;token=85f5a0317c7e84e0af40e413fb35feb7" alt=""></p>
<p>一旦开发者准备好了分享新功能，需要做二件事。<br>首先，通过<code>push</code>他的贡献代码到自己的公开仓库中，让其它的开发者都可以访问到。<br>他的<code>origin</code>远程别名应该已经有了，所以要做的就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin feature-branch</div></pre></td></tr></table></figure>
<p>这里和之前的工作流的差异是，<code>origin</code>远程别名指向开发者自己的服务端仓库，而不是正式仓库。</p>
<p>第二件事，开发者要通知项目维护者，想要合并他的新功能到正式库中。<br><code>Bitbucket</code>和<code>Stash</code>提供了<a href="https://confluence.atlassian.com/display/STASH/Using+pull+requests+in+Stash" target="_blank" rel="external"><code>Pull Request</code></a>按钮，弹出表单让你指定哪个分支要合并到正式仓库。<br>一般你会想集成你的功能分支到上游远程仓库的<code>master</code>分支中。</p>
<p><br><br><br><br><br><br><br><br></p>
<h4 id="项目维护者集成开发者的功能"><a href="#项目维护者集成开发者的功能" class="headerlink" title="项目维护者集成开发者的功能"></a>项目维护者集成开发者的功能</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-6.png&amp;objectId=1190000002918123&amp;token=e404227ded2a9af588e5f19b0ce43471" alt=""></p>
<p>当项目维护者收到<code>pull request</code>，他要做的是决定是否集成它到正式代码库中。有二种方式来做：</p>
<ol>
<li>直接在<code>pull request</code>中查看代码</li>
<li><code>pull</code>代码到他自己的本地仓库，再手动合并</li>
</ol>
<p>第一种做法更简单，维护者可以在<code>GUI</code>中查看变更的差异，做评注和执行合并。<br>但如果出现了合并冲突，需要第二种做法来解决。这种情况下，维护者需要从开发者的服务端仓库中<a href="https://www.atlassian.com/git/tutorial/remote-repositories#!fetch" target="_blank" rel="external"><code>fetch</code></a>功能分支，<br>合并到他本地的<code>master</code>分支，解决冲突：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git fetch https://bitbucket.org/user/repo feature-branch</div><div class="line"># 查看变更</div><div class="line">git checkout master</div><div class="line">git merge FETCH_HEAD</div></pre></td></tr></table></figure>
<p>变更集成到本地的<code>master</code>分支后，维护者要<code>push</code>变更到服务器上的正式仓库，这样其它的开发者都能访问到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>注意，维护者的<code>origin</code>是指向他自己公开仓库的，即是项目的正式代码库。到此，开发者的贡献完全集成到了项目中。</p>
<p><br><br><br><br><br><br></p>
<h4 id="开发者和正式仓库做同步"><a href="#开发者和正式仓库做同步" class="headerlink" title="开发者和正式仓库做同步"></a>开发者和正式仓库做同步</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/git-workflows-forking-7.png&amp;objectId=1190000002918123&amp;token=3e4105286ad5d431c50846ffbeb5ff3a" alt=""></p>
<p>由于正式代码库往前走了，其它的开发需要和正式仓库做同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull upstream master</div></pre></td></tr></table></figure>
<p>如果你之前是使用<code>SVN</code>，<code>Forking</code>工作流可能看起来像是一个激进的范式切换（paradigm shift）。<br>但不要害怕，这个工作流实际上就是在<a href="undefined">功能分支工作流</a>之上引入另一个抽象层。<br>不是直接通过单个中央仓库来分享分支，而是把贡献代码发布到开发者自己的服务端仓库中。</p>
<p>示例中解释了，一个贡献如何从一个开发者流到正式的<code>master</code>分支中，但同样的方法可以把贡献集成到任一个仓库中。</p>
<p>比如，如果团队的几个人协作实现一个功能，可以在开发之间用相同的方法分享变更，完全不涉及正式仓库。</p>
<p>这使得<code>Forking</code>工作流对于松散组织的团队来说是个非常强大的工具。任一开发者可以方便地和另一开发者分享变更，任何分支都能有效地合并到正式代码库中。</p>
<p><br><br><br><br><br><br><br><br></p>
<h2 id="2-5-Pull-Requests"><a href="#2-5-Pull-Requests" class="headerlink" title="2.5 Pull Requests"></a>2.5 <code>Pull Requests</code></h2><p><code>Pull requests</code>是<code>Bitbucket</code>提供的让开发者更方便地进行协作的功能，提供了友好的<code>Web</code>界面可以在提议的修改合并到正式项目之前对修改进行讨论。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-bitbucket.png&amp;objectId=1190000002918123&amp;token=1e5b39390f3e7b7ecd997d85da47350f" alt=""></p>
<p>开发者向团队成员通知功能开发已经完成，<code>Pull Requests</code>是最简单的用法。<br>开发者完成功能开发后，通过<code>Bitbucket</code>账号发起一个<code>Pull Request</code>。<br>这样让涉及这个功能的所有人知道要去做<code>Code Review</code>和合并到<code>master</code>分支。</p>
<p>但是，<code>Pull Request</code>远不止一个简单的通知，而是为讨论提交的功能的一个专门论坛。<br>如果变更有任何问题，团队成员反馈在<code>Pull Request</code>中，甚至<code>push</code>新的提交微调功能。<br>所有的这些活动都直接跟踪在<code>Pull Request</code>中。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-overview.png&amp;objectId=1190000002918123&amp;token=a11eee54c054994945f6ca5aa279f566" alt=""></p>
<p>相比其它的协作模型，这种分享提交的形式有助于打造一个更流畅的工作流。<br><code>SVN</code>和<code>Git</code>都能通过一个简单的脚本收到通知邮件；但是，讨论变更时，开发者通常只能去回复邮件。<br>这样做会变得杂乱，尤其还要涉及后面的几个提交时。</p>
<p><code>Pull Requests</code>把所有相关功能整合到一个和<code>Bitbucket</code>仓库界面集成的用户友好<code>Web</code>界面中。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-5-1-解析Pull-Request"><a href="#2-5-1-解析Pull-Request" class="headerlink" title="2.5.1 解析Pull Request"></a>2.5.1 解析<code>Pull Request</code></h3><p>当要发起一个<code>Pull Request</code>，你所要做的就是请求（<code>Request</code>）另一个开发者（比如项目的维护者）<br>来<code>pull</code>你仓库中一个分支到他的仓库中。这意味着你要提供4个信息以发起<code>Pull Request</code>：<br>源仓库、源分支、目的仓库、目的分支。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-anatomy.png&amp;objectId=1190000002918123&amp;token=b19d6cc00e23a573f9092c185e1b2d38" alt=""></p>
<p>这几值多数<code>Bitbucket</code>都会设置上合适的缺省值。但取决你用的协作工作流，你的团队可能会要指定不同的值。<br>上图显示了一个<code>Pull Request</code>请求合并一个功能分支到正式的<code>master</code>分支上，但可以有多种不同的<code>Pull Request</code>用法。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-2-工作方式"><a href="#2-5-2-工作方式" class="headerlink" title="2.5.2 工作方式"></a>2.5.2 工作方式</h3><p><code>Pull Request</code>可以和<a href="undefined">功能分支工作流</a>、<a href="undefined"><code>Gitflow</code>工作流</a>或<a href="undefined"><code>Forking</code>工作流</a>一起使用。<br>但一个<code>Pull Request</code>要求要么分支不同要么仓库不同，所以不能用于<a href="undefined">集中式工作流</a>。<br>在不同的工作流中使用<code>Pull Request</code>会有一些不同，但基本的过程是这样的：</p>
<ol>
<li>开发者在本地仓库中新建一个专门的分支开发功能。</li>
<li>开发者<code>push</code>分支修改到公开的<code>Bitbucket</code>仓库中。</li>
<li>开发者通过<code>Bitbucket</code>发起一个<code>Pull Request</code>。</li>
<li>团队的其它成员<code>review</code> <code>code</code>，讨论并修改。</li>
<li>项目维护者合并功能到官方仓库中并关闭<code>Pull Request</code>。</li>
</ol>
<p>本文后面内容说明，<code>Pull Request</code>在不同协作工作流中如何应用。</p>
<p><br><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-3-在功能分支工作流中使用Pull-Request"><a href="#2-5-3-在功能分支工作流中使用Pull-Request" class="headerlink" title="2.5.3 在功能分支工作流中使用Pull Request"></a>2.5.3 在功能分支工作流中使用<code>Pull Request</code></h3><p>功能分支工作流用一个共享的<code>Bitbucket</code>仓库来管理协作，开发者在专门的分支上开发功能。<br>但不是立即合并到<code>master</code>分支上，而是在合并到主代码库之前开发者应该开一个<code>Pull Request</code>发起功能的讨论。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-feature-branch.png&amp;objectId=1190000002918123&amp;token=b870553274db5688d72b65c86d10d152" alt=""></p>
<p>功能分支工作流只有一个公开的仓库，所以<code>Pull Request</code>的目的仓库和源仓库总是同一个。<br>通常开发者会指定他的功能分支作为源分支，<code>master</code>分支作为目的分支。</p>
<p>收到<code>Pull Request</code>后，项目维护者要决定如何做。如果功能没问题，就简单地合并到<code>master</code>分支，关闭<code>Pull Request</code>。</p>
<p>但如果提交的变更有问题，他可以在<code>Pull Request</code>中反馈。之后新加的提交也会评论之后接着显示出来。</p>
<p>在功能还没有完全开发完的时候，也可能发起一个<code>Pull Request</code>。<br>比如开发者在实现某个需求时碰到了麻烦，他可以发一个包含正在进行中工作的<code>Pull Request</code>。<br>其它的开发者可以在<code>Pull Request</code>提供建议，或者甚至直接添加提交来解决问题。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-4-在Gitflow工作流中使用Pull-Request"><a href="#2-5-4-在Gitflow工作流中使用Pull-Request" class="headerlink" title="2.5.4 在Gitflow工作流中使用Pull Request"></a>2.5.4 在<code>Gitflow</code>工作流中使用<code>Pull Request</code></h3><p><code>Gitflow</code>工作流和功能分支工作流类似，但围绕项目发布定义一个严格的分支模型。<br>在<code>Gitflow</code>工作流中使用<code>Pull Request</code>让开发者在发布分支或是维护分支上工作时，<br>可以有个方便的地方对关于发布分支或是维护分支的问题进行交流。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/gitflow-workflow-pull-request.png&amp;objectId=1190000002918123&amp;token=a7ff02253674d5a5ae3f6aab4efae1fd" alt=""></p>
<p><code>Gitflow</code>工作流中<code>Pull Request</code>的使用过程和上一节中完全一致：<br>当一个功能、发布或是热修复分支需要<code>Review</code>时，开发者简单发起一个<code>Pull Request</code>，<br>团队的其它成员会通过<code>Bitbucket</code>收到通知。</p>
<p>新功能一般合并到<code>develop</code>分支，而发布和热修复则要同时合并到<code>develop</code>分支和<code>master</code>分支上。<br><code>Pull Request</code>可能用做所有合并的正式管理。</p>
<p><br><br><br><br><br><br><br><br></p>
<h3 id="2-5-5-在Forking工作流中使用Pull-Request"><a href="#2-5-5-在Forking工作流中使用Pull-Request" class="headerlink" title="2.5.5 在Forking工作流中使用Pull Request"></a>2.5.5 在<code>Forking</code>工作流中使用<code>Pull Request</code></h3><p>在<code>Forking</code>工作流中，开发者<code>push</code>完成的功能到他自己的仓库中，而不是共享仓库。<br>然后，他发起一个<code>Pull Request</code>，让项目维护者知道他的功能已经可以<code>Review</code>了。</p>
<p>在这个工作流，<code>Pull Request</code>的通知功能非常有用，<br>因为项目维护者不可能知道其它开发者在他们自己的仓库添加了提交。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-forking-workflow-1.png&amp;objectId=1190000002918123&amp;token=6082dacfd6345659739925c5b7f66658" alt=""></p>
<p>由于各个开发有自己的公开仓库，<code>Pull Request</code>的源仓库和目标仓库不是同一个。<br>源仓库是开发者的公开仓库，源分支是包含了修改的分支。<br>如果开发者要合并修改到正式代码库中，那么目标仓库是正式仓库，目标分支是<code>master</code>分支。</p>
<p><code>Pull Request</code>也可以用于正式项目之外的其它开发者之间的协作。<br>比如，如果一个开发者和一个团队成员一起开发一个功能，他们可以发起一个<code>Pull Request</code>，<br>用团队成员的<code>Bitbucket</code>仓库作为目标，而不是正式项目的仓库。<br>然后使用相同的功能分支作为源和目标分支。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-forking-workflow-2.png&amp;objectId=1190000002918123&amp;token=cc8bc697b102826f0fb79c078278c41a" alt=""></p>
<p>2个开发者之间可以在<code>Pull Request</code>中讨论和开发功能。<br>完成开发后，他们可以发起另一个<code>Pull Request</code>，请求合并功能到正式的<code>master</code>分支。<br>在<code>Forking</code>工作流中，这样的灵活性让<code>Pull Request</code>成为一个强有力的协作工具。</p>
<p><br><br><br><br><br><br><br></p>
<h3 id="2-5-6-示例"><a href="#2-5-6-示例" class="headerlink" title="2.5.6 示例"></a>2.5.6 示例</h3><p>下面的示例演示了<code>Pull Request</code>如何在在<code>Forking</code>工作流中使用。<br>也同样适用于小团队的开发协作和第三方开发者向开源项目的贡献。</p>
<p>在示例中，小红是个开发，小明是项目维护者。他们各自有一个公开的<code>Bitbucket</code>仓库，而小明的仓库包含了正式工程。</p>
<p><br><br><br><br><br></p>
<h4 id="小红fork正式项目"><a href="#小红fork正式项目" class="headerlink" title="小红fork正式项目"></a>小红<code>fork</code>正式项目</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-1.png&amp;objectId=1190000002918123&amp;token=b7627676e2c7b3a0eb8e5991c4c2b3af" alt=""></p>
<p>小红先要<code>fork</code>小明的<code>Bitbucket</code>仓库，开始项目的开发。她登陆<code>Bitbucket</code>，浏览到小明的仓库页面，<br>点<code>Fork</code>按钮。</p>
<p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-2.png&amp;objectId=1190000002918123&amp;token=53cd207c8a838c38328c00d50807aeae" alt=""></p>
<p>然后为<code>fork</code>出来的仓库填写名字和描述，这样小红就有了服务端的项目拷贝了。</p>
<p><br><br><br><br><br></p>
<h4 id="小红克隆她的Bitbucket仓库"><a href="#小红克隆她的Bitbucket仓库" class="headerlink" title="小红克隆她的Bitbucket仓库"></a>小红克隆她的<code>Bitbucket</code>仓库</h4><p><img src="https://segmentfault.com/image?src=http://static.ixirong.com/pic/gitflow/pull-request-3.png&amp;objectId=1190000002918123&amp;token=958414de4bfe3716ff3565934e78492f" alt=""></p>
<p>下一步，小红克隆自己刚才<code>fork</code>出来的<code>Bitbucket</code>仓库，以在本机上准备出工作拷贝</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入理解学习Git工作流（git-workflow&quot;&gt;&lt;a href=&quot;#深入理解学习Git工作流（git-workflow&quot; class=&quot;headerlink&quot; title=&quot;深入理解学习Git工作流（git-workflow-&quot;&gt;&lt;/a&gt;&lt;a href=&quot;h
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="Git" scheme="http://www.wanglinzhizhi.me/tags/Git/"/>
    
      <category term="Gitflow" scheme="http://www.wanglinzhizhi.me/tags/Gitflow/"/>
    
  </entry>
  
  <entry>
    <title>IE浏览器的检验</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%A3%80%E9%AA%8C/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/IE浏览器的检验/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IE浏览器的检验"><a href="#IE浏览器的检验" class="headerlink" title="IE浏览器的检验"></a>IE浏览器的检验</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">          $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">          <span class="keyword">var</span> isIE78910=<span class="regexp">/mise/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line">          <span class="keyword">var</span> isIE11=<span class="regexp">/trident/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line">          <span class="keyword">var</span> isIE=(isIE78910 || isIE11);</div><div class="line">  </div><div class="line">          <span class="keyword">if</span>(isIE)&#123;</div><div class="line">             <span class="comment">//todo</span></div><div class="line">          &#125;</div><div class="line">          &#125;)();</div><div class="line">      <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="IE8-以及以下的版本检测"><a href="#IE8-以及以下的版本检测" class="headerlink" title="IE8 以及以下的版本检测"></a>IE8 以及以下的版本检测</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> islowIE8=<span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> isIE=<span class="regexp">/mise/i</span>.test(navigator.userAgent.toLowerCase());</div><div class="line"><span class="keyword">if</span> (isIE) &#123;</div><div class="line">true<span class="keyword">var</span> ieVersion=<span class="regexp">/msie ([\d.]+)/</span>.navigator.userAgent.toLowerCase();</div><div class="line">trueieVersion = <span class="built_in">parseInt</span>(ieVersion);</div><div class="line">trueislowIE8= (ieVersion&gt;<span class="number">8</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (islowIE8)&#123; 	<span class="comment">//&lt;=ie8的情况</span></div><div class="line">true<span class="comment">//todo..</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;		 	<span class="comment">//其他情况</span></div><div class="line">true<span class="comment">//todo..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IE浏览器的检验&quot;&gt;&lt;a href=&quot;#IE浏览器的检验&quot; class=&quot;headerlink&quot; title=&quot;IE浏览器的检验&quot;&gt;&lt;/a&gt;IE浏览器的检验&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="web" scheme="http://www.wanglinzhizhi.me/categories/web/"/>
    
    
      <category term="web" scheme="http://www.wanglinzhizhi.me/tags/web/"/>
    
      <category term="浏览器" scheme="http://www.wanglinzhizhi.me/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="IE" scheme="http://www.wanglinzhizhi.me/tags/IE/"/>
    
      <category term="正则" scheme="http://www.wanglinzhizhi.me/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础算法</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/JS%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/JS基础算法/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-基础算法"><a href="#JavaScript-基础算法" class="headerlink" title="JavaScript 基础算法"></a>JavaScript 基础算法</h2><hr>

<h3 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h3><p>解析url</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryString</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">true<span class="keyword">if</span>( url.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span> )&#123;</div><div class="line">truetrue<span class="keyword">var</span> arr = url.split(<span class="string">'?'</span>);											<span class="comment">//split 将url分割为两项.以'http://baidu.com?a=b&amp;c=d;'为例,即["http://baidu.com", "a=b&amp;c=d;"]</span></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> queryString = arr[<span class="number">1</span>];											<span class="comment">//获取arr[1]即获取到参数部分,即为queryString</span></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> items = queryString.length ? queryString.split(<span class="string">'&amp;'</span>) : [];		<span class="comment">//以&amp;为分割,将queryString分割为name,value串数组存放在items中.</span></div><div class="line"></div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> queryObj = &#123;&#125;;</div><div class="line"></div><div class="line">truetrue<span class="keyword">var</span> itemArr,name,value;</div><div class="line">truetrue<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=items.length;i&lt;len;i++)&#123;</div><div class="line"></div><div class="line">truetruetrueitemArr = items[i].split(<span class="string">'='</span>);</div><div class="line">truetruetruename = <span class="built_in">decodeURIComponent</span>(itemArr[<span class="number">0</span>]);</div><div class="line">truetruetruevalue = <span class="built_in">decodeURIComponent</span>(itemArr[<span class="number">1</span>]);</div><div class="line"></div><div class="line">truetruetrue<span class="keyword">if</span>(name.length)&#123;												<span class="comment">//if是为了防止 name为空的情况</span></div><div class="line">truetruetruetruequeryObj[name] = value;										<span class="comment">//设置对象的属性</span></div><div class="line">truetruetrue&#125;</div><div class="line">truetrue&#125;</div><div class="line"></div><div class="line">truetrue<span class="keyword">return</span> queryObj;</div><div class="line"></div><div class="line">true&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://baidu.com?a=100&amp;c=1034'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(getQueryString(url)));</div><div class="line"></div><div class="line"><span class="comment">//其中有个需要注意的地方就是URL里面的querystring都是经过编码了的， 所以在取值的时候要先解码decodeURIComponent()</span></div></pre></td></tr></table></figure>
<hr>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>为Array原型中添加一个去重的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// way1</span></div><div class="line"><span class="built_in">Array</span>.prototype.uniqiue=<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  arr.sort();</div><div class="line">  <span class="keyword">var</span> i=<span class="number">1</span>,</div><div class="line">      j=<span class="number">0</span>;</div><div class="line">      length=arr.length;</div><div class="line">      arrTemp=[];</div><div class="line">      arrTemp=arrp[<span class="number">0</span>];</div><div class="line">    <span class="keyword">while</span>(i&lt;length)&#123;</div><div class="line">      <span class="keyword">if</span>(arrTemp[j]==arr[i])&#123;</div><div class="line">        i++;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        arrTemp[++j]=arr[i++];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> arrTemp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// way2</span></div><div class="line"><span class="built_in">Array</span>.prototype.uniqiue=<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> arrTemp=[];</div><div class="line">  <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span>(i&lt;arr.length)&#123;</div><div class="line">    buf=arr[i];</div><div class="line">    <span class="keyword">var</span> j=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(j&lt;arrTemp.length)&#123;</div><div class="line">      <span class="keyword">if</span> (arrTemp[j] == buf) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      j++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (j==arrTemp.length) &#123;</div><div class="line">      arrTemp.push(buf);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    i++;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arrTemp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这道题是阿里某一年前端的面试题. 其实在现实使用中一般不会做这么大的动作去改变Array对象的原型,因为动作太大,保不齐哪里会不会出什么问题. (一言以蔽之, 所有对全局的操作都需要慎重再慎重.) 这道题的主要考点我觉得有两个,一个是对js原型链的理解.另一个是对数组去重的基本算法的考察.解决这道题的方法有很多种算法, 在思考的过程中要兼顾性能最优.</p>
<h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><p>真是在那儿都遇到它.(这其实已经跟JS无关了). 之前的在一篇文章中提到过它的作用(当时比较的是二分查找和fib查找之间的性能比较.) 代码不贴了,可以在那篇文章中找到.两点需要注意:</p>
<ol>
<li>打死都不要用递归, 是典型的2^n类型. 会吃光你所有的性能. 无论你的机器性能有多强</li>
<li>用迭代代替递归. 用三个参数进行叠加就可以了.(甚至两个). 也不要用数组, 三个临时变量或者两个临时变量就够了.(^_^)</li>
</ol>
<p>再提一点, 为什么不建议用数组,而采用三个临时变量呢? 原因在于: 数组是存放在内存的栈中, 你看到栈会觉得已经够快了是吧?是挺快的. 但是呢, 临时变量存放在哪儿呢? 寄存器中. 现在知道这个区别了吗?  这个结论的来源是&lt;深入理解计算机系统&gt;, 有兴趣的同学可以去了解下.</p>
<h3 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter"></a>insertAfter</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newEl,targetNode</span>)</span>&#123;<span class="comment">//在目标节点的后面插入节点</span></div><div class="line">true<span class="keyword">var</span> parentNode=targetNode.parentNode;</div><div class="line">true<span class="keyword">if</span> (parentNode.lashChild==targetNode) &#123;</div><div class="line">truetrueparentNode.appendChild(newEl);</div><div class="line">true&#125;<span class="keyword">else</span>&#123;</div><div class="line">truetrueparentNode.insertBefore(newEl,targetNode.nextSubling);</div><div class="line">true&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本DOM操作</p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNmu</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">true<span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myarr=[];</div><div class="line">myarr.sort(sortNmu);</div></pre></td></tr></table></figure>
<p>会快排么?</p>
<p>(^_^)</p>
<p>###　sum</p>
<p>求sum(),参数的长度无限制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">// Should equal 15</div><div class="line">sum(1, 2, 3, 4, 5);</div><div class="line">// Should equal 0</div><div class="line">sum(5, null, -5);</div><div class="line">// Should equal 10</div><div class="line">sum('1.0', false, 1, true, 1, 'A', 1, 'B', 1, 'C', 1, 'D', 1,</div><div class="line">  'E', 1, 'F', 1, 'G', 1);</div><div class="line">// Should equal 0.3, not 0.30000000000000004</div><div class="line">sum(0.1, 0.2);</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> nResult = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</div><div class="line">        nResult += <span class="built_in">window</span>.parseFloat(<span class="built_in">arguments</span>[i]) || <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nResult.toFixed(<span class="number">3</span>) * <span class="number">1000</span> / <span class="number">1000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这好像也是阿里某年的一道笔试题. 这道题我觉得有意思的地方在于对于各种异常输入情况的处理,以及对结果的处理.另外对于js基础部分是对arguments 的了解.</p>
<p>###　正则匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">/^(\w+[_|\.|\_]?)*(\w)+@(\w+[_|\.|\_])*(\w)+\.[a-zA-z]&#123;<span class="number">2</span>,<span class="number">4</span>&#125;$/.test(<span class="string">"wanglinzhizhi@hotmail.com"</span>);</div></pre></td></tr></table></figure>
<h3 id="loading…"><a href="#loading…" class="headerlink" title="loading….."></a>loading…..</h3><p>晚安,地球</p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript-基础算法&quot;&gt;&lt;a href=&quot;#JavaScript-基础算法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础算法&quot;&gt;&lt;/a&gt;JavaScript 基础算法&lt;/h2&gt;&lt;hr&gt;

&lt;h3 id=&quot;queryst
    
    </summary>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/tags/JS/"/>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 快速入门</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Markdown%EF%BC%88%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Markdown（快速入门）/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;&lt; <a href="http://wowubuntu.com/" target="_blank" rel="external">访问 Wow!Ubuntu</a></p>
<blockquote>
<p> <strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="external">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/basics.md" target="_blank" rel="external">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md" target="_blank" rel="external">查看这里</a>」–By @<a href="http://twitter.com/riku" target="_blank" rel="external">riku</a></p>
<p> <strong>注：</strong> 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/" target="_blank" rel="external">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>
</blockquote>
<h1 id="Markdown-Basics-（快速入门）-点击查看完整语法说明"><a href="#Markdown-Basics-（快速入门）-点击查看完整语法说明" class="headerlink" title="Markdown: Basics （快速入门） / (点击查看完整语法说明)"></a>Markdown: Basics （快速入门） / (<a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="external">点击查看完整语法说明</a>)</h1><h2 id="Getting-the-Gist-of-Markdown’s-Formatting-Syntax"><a href="#Getting-the-Gist-of-Markdown’s-Formatting-Syntax" class="headerlink" title="Getting the Gist of Markdown’s Formatting Syntax"></a>Getting the Gist of Markdown’s Formatting Syntax</h2><p>此页提供了 Markdown 的简单概念， <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external">语法说明</a> 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。</p>
<p>其实直接试试看也是一个很不错的方法， <a href="http://daringfireball.net/projects/markdown/dingus" target="_blank" rel="external">Dingus</a> 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。</p>
<h2 id="段落、标题、区块代码"><a href="#段落、标题、区块代码" class="headerlink" title="段落、标题、区块代码"></a>段落、标题、区块代码</h2><p>一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。</p>
<p>Markdown 支持两种标题的语法，<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a> 形式。Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），Atx 形式在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶。</p>
<p>区块引用则使用 email 形式的 ‘<code>&gt;</code>‘ 角括号。</p>
<p>Markdown 语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">A First Level Header</div><div class="line">====================</div><div class="line">A Second Level Header</div><div class="line">---------------------</div><div class="line"></div><div class="line">Now is the time for all good men to come to</div><div class="line">the aid of their country. This is just a</div><div class="line">regular paragraph.</div><div class="line"></div><div class="line">The quick brown fox jumped over the lazy</div><div class="line">dog&apos;s back.</div><div class="line">### Header 3</div><div class="line"></div><div class="line">&gt; This is a blockquote.</div><div class="line">&gt;</div><div class="line">&gt; This is the second paragraph in the blockquote.</div><div class="line">&gt;</div><div class="line">&gt; ## This is an H2 in a blockquote</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;h1&gt;A First Level Header&lt;/h1&gt;</div><div class="line">&lt;h2&gt;A Second Level Header&lt;/h2&gt;</div><div class="line">&lt;p&gt;Now is the time for all good men to come to</div><div class="line">the aid of their country. This is just a</div><div class="line">regular paragraph.&lt;/p&gt;</div><div class="line">&lt;p&gt;The quick brown fox jumped over the lazy</div><div class="line">dog&apos;s back.&lt;/p&gt;</div><div class="line">&lt;h3&gt;Header 3&lt;/h3&gt;</div><div class="line">&lt;blockquote&gt;</div><div class="line">&lt;p&gt;This is a blockquote.&lt;/p&gt;</div><div class="line">&lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;</div><div class="line">&lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;</div><div class="line">&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<h3 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h3><p>Markdown 使用星号和底线来标记需要强调的区段。</p>
<p>Markdown 语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Some of these words *are emphasized*.</div><div class="line">Some of these words _are emphasized also_.</div><div class="line">Use two asterisks for **strong emphasis**.</div><div class="line">Or, if you prefer, __use two underscores instead__.</div></pre></td></tr></table></figure>
<p>输出 HTML 为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.</div><div class="line">Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;</div><div class="line">&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.</div><div class="line">Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* Candy.</div><div class="line">* Gum.</div><div class="line">* Booze.</div></pre></td></tr></table></figure>
<p>加号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+ Candy.</div><div class="line">+ Gum.</div><div class="line">+ Booze.</div></pre></td></tr></table></figure>
<p>和减号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- Candy.</div><div class="line">- Gum.</div><div class="line">- Booze.</div></pre></td></tr></table></figure>
<p>都会输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;Candy.&lt;/li&gt;</div><div class="line">&lt;li&gt;Gum.&lt;/li&gt;</div><div class="line">&lt;li&gt;Booze.&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1. Red</div><div class="line">2. Green</div><div class="line">3. Blue</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line">&lt;li&gt;Red&lt;/li&gt;</div><div class="line">&lt;li&gt;Green&lt;/li&gt;</div><div class="line">&lt;li&gt;Blue&lt;/li&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure>
<p>如果你在项目之间插入空行，那项目的内容会用 `` 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">* A list item.</div><div class="line"></div><div class="line">    With multiple paragraphs.</div><div class="line"></div><div class="line">* Another item in the list.</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;</div><div class="line">&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支援两种形式的链接语法： <em>行内</em> 和 <em>参考</em> 两种形式，两种都是使用角括号来把文字转成连结。</p>
<p>行内形式是直接在后面用括号直接接上链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">This is an [example link](http://example.com/).</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot;&gt;</div><div class="line">example link&lt;/a&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>你也可以选择性的加上 title 属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">This is an [example link](http://example.com/ &quot;With a Title&quot;).</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;</div><div class="line">example link&lt;/a&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">I get 10 times more traffic from [Google][1] than from</div><div class="line">[Yahoo][2] or [MSN][3].</div><div class="line"></div><div class="line">[1]: http://google.com/ &quot;Google&quot;</div><div class="line">[2]: http://search.yahoo.com/ &quot;Yahoo Search&quot;</div><div class="line">[3]: http://search.msn.com/ &quot;MSN Search&quot;</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;</div><div class="line">title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot;</div><div class="line">title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot;</div><div class="line">title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">I start my morning with a cup of coffee and</div><div class="line">[The New York Times][NY Times].</div><div class="line"></div><div class="line">[ny times]: http://www.nytimes.com/</div></pre></td></tr></table></figure>
<p>输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;I start my morning with a cup of coffee and</div><div class="line">&lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片的语法和链接很像。</p>
<p>行内形式（title 是选择性的）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">![alt text](/path/to/img.jpg &quot;Title&quot;)</div></pre></td></tr></table></figure>
<p>参考形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">![alt text][id]</div><div class="line"></div><div class="line">[id]: /path/to/img.jpg &quot;Title&quot;</div></pre></td></tr></table></figure>
<p>上面两种方法都会输出 HTML 为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>在一般的段落文字中，你可以使用反引号 <figure class="highlight plain"><figcaption><span>`&`、`<` 和 `>` 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</` 和 `></span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p>
<p>I wish SmartyPants used named entities like <code>&amp;mdash;</code><br>instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">输出 HTML 为：</div></pre></td></tr></table></figure>
<p>I strongly recommend against using any<br><code>&lt;blink&gt;</code> tags.</p><br><p>I wish SmartyPants used named entities like<br><code>&amp;mdash;</code> instead of decimal-encoded<br>entites like <code>&amp;#8212;</code>.</p>

<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 `&amp;`、`&lt;` 和 `&gt;` 也一样会自动转成 HTML 实体。</div><div class="line"></div><div class="line">Markdown 语法:</div></pre></td></tr></table></figure>
<p>If you want your page to validate under XHTML 1.0 Strict,<br>you’ve got to put paragraph tags in your blockquotes:</p>
<blockquote><br><p>For example.</p><br></blockquote>

<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">输出 HTML 为：</div></pre></td></tr></table></figure>
<p></p><p>If you want your page to validate under XHTML 1.0 Strict,<br>you’ve got to put paragraph tags in your blockquotes:</p><p></p>
<p><pre><code>&lt;blockquote&gt;<br>&lt;p&gt;For example.&lt;/p&gt;<br>&lt;/blockquote&gt;<br></code></pre><br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;&amp;lt; &lt;a href=&quot;http://wowubuntu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;声明：&lt;/strong&gt; 这份文档派
    
    </summary>
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/categories/Web/"/>
    
    
      <category term="Web" scheme="http://www.wanglinzhizhi.me/tags/Web/"/>
    
      <category term="Markdown" scheme="http://www.wanglinzhizhi.me/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Object.keys()</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Object.keys()/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Object.keys()/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><p>假设有个对象obj,并且我们不知道这个obj有哪些属性, 如何获取这些属性名,并输出相对应的属性值.</p>
<p>A:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Object.keys(obj);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;Object.keys()&lt;/h2&gt;&lt;p&gt;假设有个对象obj,并且我们不知道这个obj有哪些属性, 如
    
    </summary>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JS" scheme="http://www.wanglinzhizhi.me/tags/JS/"/>
    
      <category term="算法" scheme="http://www.wanglinzhizhi.me/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>QQ浏览器 坑</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%20%E5%9D%91/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/QQ浏览器 坑/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QQ浏览器-坑"><a href="#QQ浏览器-坑" class="headerlink" title="QQ浏览器 坑"></a>QQ浏览器 坑</h2><p>小米 米4 ＱＱ浏览器 6.9.2.2655</p>
<p>误操作…发现..typora ….可以用F12 调试….</p>
<p>503 2016/9/6 10:45:13</p>
<p>我靠…. (感叹一下)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QQ浏览器-坑&quot;&gt;&lt;a href=&quot;#QQ浏览器-坑&quot; class=&quot;headerlink&quot; title=&quot;QQ浏览器 坑&quot;&gt;&lt;/a&gt;QQ浏览器 坑&lt;/h2&gt;&lt;p&gt;小米 米4 ＱＱ浏览器 6.9.2.2655&lt;/p&gt;
&lt;p&gt;误操作…发现..typora ….可以用
    
    </summary>
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="QQ浏览器" scheme="http://www.wanglinzhizhi.me/tags/QQ%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="坑系列" scheme="http://www.wanglinzhizhi.me/tags/%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>QQ浏览器X5内核问题汇总</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/QQ%E6%B5%8F%E8%A7%88%E5%99%A8X5%E5%86%85%E6%A0%B8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/QQ浏览器X5内核问题汇总/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QQ浏览器X5内核问题汇总"><a href="#QQ浏览器X5内核问题汇总" class="headerlink" title="QQ浏览器X5内核问题汇总"></a>QQ浏览器X5内核问题汇总</h2><p>23 September 2015</p>
<p>重要更新，X5内核即将更新为Blink内核，到时候下面的这些问题将全部被修复。</p>
<p>X5内核开发团队也给开发者们提供了不少指引，推荐关注： <a href="http://x5.tencent.com/guide?id=2001" target="_blank" rel="external">http://x5.tencent.com/guide?id=2001</a></p>
<p>@2016-04-05</p>
<p><br><br><br><br><br></p>
<p>## </p>
<p>常常被人问及微信中使用的X5内核的问题，其实我也不是很清楚，只知道它是基于android 4.2的webkit，版本号是webkit 534。今天正好从X5团队拿到了一份问题汇总，梳理下发出来，给各位开发者以参考——不排除明天会删除这篇文章的可能。</p>
<p><br></p>
<p>1.Android WebView常见问题及解决方案汇总：</p>
<p><a href="http://blog.csdn.net/t12x3456/article/details/13769731" target="_blank" rel="external">http://blog.csdn.net/t12x3456/article/details/13769731</a></p>
<p><br></p>
<p>2.请问各位碰到过X5浏览器内，局部滑动使用iscroll卡顿的问题么？</p>
<p>回答：是使用 iscroll.js 这个JS去滚动么？如果只是为了产生滚动，建议使用 overflow 属性来，目前有一种滚动优化在线上版本效率不是太好，通过JS去改变CSS的属性产生滚动</p>
<p><br></p>
<p>3.调用：<code>-webkit-filter: blur(10px);filter: blur(10px);</code>在Android下 背景图没有blur掉，只是被单纯的放大而已</p>
<p>回答：<code>-webkit-filter</code>目前还不支持，可以先用图片替换的方式 后续版本会支持这个属性</p>
<p><br></p>
<p>4.shadowBlur是阴影效果吧，我们是想实现图片毛玻璃</p>
<p>回答： <a href="http://blog.csdn.net/jia20003/article/details/9195915" target="_blank" rel="external">http://blog.csdn.net/jia20003/article/details/9195915</a> 这个有用么</p>
<p><br></p>
<p>5.LBS相关，定位频繁失败</p>
<p>第一步，首先确认定位失败是个别站点原因还是所有站点定位都失败。如果是所有站点定位都不成功，很有可能是内核问题，转内核相关同学跟进调查定位逻辑是否有缺陷；如果是某个站点才会出现的问题，继续第二步排查，从站点源码着手。</p>
<p>第二步，找到站点请求定位的js代码段，检查获取定位信息函数的options字段，很有可能是 options 中 timeout 字段设置的超时太短导致，建议前端开发将该字段时间设置长一些（建议10s以上）或者不设置该字段。如果js没有设置 timeout 字段的情况下仍然定位不成功，则转内核同学调查内核流程。</p>
<p>ps：H5获取LBS信息的js接口</p>
<p>回答：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">navigator.geolocation.getCurrentPosition(showPosition,showError,&#123;  </div><div class="line">    enableHighAccuracy:false，</div><div class="line">    timeout:10*1000,</div><div class="line">    maximumAge:0</div><div class="line">&#125;);</div><div class="line"></div><div class="line">navigator.geolocation.watchPosition(watchPosition,showError,options);</div></pre></td></tr></table></figure>
<p>showPosition：定位成功时回调；<br>showError：定位出错时回调；<br>options：可选的地理定位请求特征<br>enableHightAccuracy：可选，是否开启高精度模式，参数默认值为 false<br>timeout：可选，单位为ms，浏览器需要在该时间段内完成定位，否则定位失败，默认值为 - - infinity，无穷大。如果该值设置较小，会有很高的定位失败率。<br>maximumAge：可选，单位ms，重新计算位置的时间间隔。默认为0，即每次时时计算位置信息。</p>
<p><br></p>
<p>6.打开视频播放，后退视频仍然在播放</p>
<p>回答：部分机型，浏览页面时打开视频播放，点击返回，页面上的视频仍然在播放。解决办法是捕获后退事件，主动调用 onHideCustomView() 方法，并且在该方法里将 onShowCustomView 里关联的view解除关联</p>
<p><br></p>
<p>7.请问一下微信浏览器的cookie清理机制是怎么样的？</p>
<p>回答：X5内核是不会清除的。</p>
<p><br></p>
<p>8.打开WWW页面，缩放显示的问题</p>
<p>回答： 使用webview打开www页面，如果页面被放大显示，确定websettings有没有设置，<code>webSettings.setUseWideViewPort（true</code>），默认为false，www页面不会被缩放显示的。手机QQ浏览器默认为true，显示www页面更美观</p>
<p><br></p>
<p>9.关于滚动时候动画的问题</p>
<p>回答：</p>
<p>页面滑动过程中动画不会被触发 页面滑动过程中动画会被停止 这个是X5内核为了做滚动优化而做的限制</p>
<p><br></p>
<p>10.关于connection type定义的问题</p>
<p>回答：X5执行的标准比较老，NetworkInfo_API</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">enum ConnectionType &#123;  </div><div class="line">UNKNOWN = 0,  </div><div class="line">ETHERNET = 1,  </div><div class="line">WIFI = 2,  </div><div class="line">CELL_2G = 3,  </div><div class="line">CELL_3G = 4,  </div><div class="line">CELL_4G = 5,  </div><div class="line">NONE = 6,  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><br></p>
<p>11.出现网络正常，但是页面打不开的情况</p>
<p>回答：关于设置里面的云加速试下是否可以打开。</p>
<p><br></p>
<p>12.js阻塞和css阻塞的不同</p>
<p>回答：css是阻塞渲染过程，js阻塞解析过程！对于用户来说，没什么区别，都是空白的 js的执行时，如果js中有读写css的属性的代码，并且下载队列中有待加载的css，js执行会被阻塞掉。</p>
<p><br></p>
<p>13.cookie的4k限制</p>
<p>回答：浏览器端cookie的数量可能会超过4k，有http请求时，内核只取前4k的cookie数据！</p>
<p><br></p>
<p>14.Js Defer与把js放到html底部的区别</p>
<p>回答：js defer：先加载，ondownload 后执行。和js放到html底部类似。不同的就是html预扫描到会先加载</p>
<p><br></p>
<p>15.首屏显示后，为什么又会重排版</p>
<p>回答：浏览器的排版宽度受上层ui设置的webview宽度影响。如果webview没设置或者是设置成0，浏览器内核会用默认的排版宽度320px进行排版。此时若webview的宽度值被正常设置，计算出来的排版宽度不是320px（一般是360px），这样浏览器就要用360px宽度，对页面进行重排。</p>
<p><br></p>
<p>16.canvas的数量是不是有限制</p>
<p>回答：</p>
<ul>
<li>小于1G的内存， canvas的内存不能超过100M</li>
<li>1G到2G的内存， canvas的内存不能超过300M</li>
<li>大于2G的内存 canvas的内存不能超过500M</li>
<li>为了防止内存占用过多，硬件加速的CANVAS最多支持5个</li>
</ul>
<p>小于等于1G内存手机，由于内存没办法精确统计，当达到75M以上，CANVAS数量最多支持20个</p>
<p>上面说的canvas内存，仅仅是说canvas 长宽计算出来的内存，不包括canavs使用的图片等资源内存</p>
<p><br></p>
<p>17.x5浏览器CSS3有些不支持,同样的样式，在chrome里能起到效果，在X5就没用。并且js性能也差的多,微信还内置X5，用起来太不爽</p>
<p>回答：是否方便具体说下是什么样的性能问题和css样式缺陷影响到您？我们这边可以跟进查看下原因。</p>
<p>X5内核也在不断改进，您的反馈可以帮助我们进一步优化。</p>
<p>chrome在标准的支持和性能优化方面确实目前走在业界前面，不过android系统的碎片化，android系统webview更是碎片化严重。</p>
<p>android系统上的web开发可能也需要考虑到不同rom的兼容情况。X5内核致力于为开发者提供统一的web体验，并通过不断的优化，来向业界标准对齐。</p>
<p>目前我们也在做基于chromium内核的研究工作，后续在标准的支持和性能上会有进一步提高。</p>
<p><br></p>
<p>18.请问下x5中js调用android怎么实现？</p>
<p>回答：跟系统内核下一样，都借助 addjavainterface 实现</p>
<p><br></p>
<p>19.请问一下，android手机微信上用的x5支持webgl吗？</p>
<p>回答：android手机中微信上的X5都是支持webgl的，不过部分机型上还有兼容性问题，由于兼容性问题，webgl之前我们是采用软绘的方式支持,目前切换到了硬绘，但整体来说还是会有兼容性和性能问题,后续这块还会持续更新</p>
<p><br></p>
<p>20.如果在某个设备第一次打开应用的时候 没有网络，x5内核可以启动吗？单网络恢复后还要再次认证，还是 不用在认证？</p>
<p>回答：第一次打开应用是不会拉起X5的 在第二次打开之后 不管有无网络都可以拉起</p>
<p><br></p>
<p>21.如果我不安装浏览器，安装微信，x5能调用起来吗?</p>
<p>回答：不能，只能安装QQ浏览器才能调用</p>
<p><br></p>
<p>22.web audio api是否已经支持？</p>
<p>回答：暂时还不支持</p>
<p><br></p>
<p>23.什么时候支持html5的onunload和onbeforeunload事件</p>
<p>回答：现在是支持html5的 onunload 和 onbeforeunload 事件的</p>
<p><br></p>
<p>24.要用X5的内核，必须要用QQ浏览器么？</p>
<p>回答：目前 SDK 版本是这样的，我们正在预研的版本，手机如果安装了微信或手Q ，其它 app 可以不依赖 QQ浏览器 而共享 x5 内核。</p>
<p><br></p>
<p>25.关于svg问题。</p>
<p>回答：关于SVG的问题：</p>
<p>关于svg模糊的问题，有2种情况：</p>
<p>直接访问一个.svg url的页面或者object，embed加入的svg， 出现模糊的问题</p>
<p>此问题已解决， qq浏览器5.8上已经修复， tbs下个版本也会修复 svg用作background-image, 模糊这个问题是我们目前渲染机制导致不能兼容非标准写法： 在用svg作为background-image的时候， 需要指定background-size， 不然会模糊</p>
<p>关于svg支持情况： 在5.3之前的qq浏览器不支持svg， 我们会在后台把svg转成一张jpeg图片， 供浏览器显示，5.4及以上版本支持svg，如果遇到被转成图片的问题，需要升级浏览器版本。</p>
<p><br></p>
<p>26.请问flexbox近期会支持吗？</p>
<p>回答：flexbox我们正在做开发支持</p>
<p><br></p>
<p>27.x5内核 目前是独立运行的 还是需要安装ＱＱ浏览器？</p>
<p>回答：sdk是需要QQ浏览器的，微信手Q里的是不需要的</p>
<p><br></p>
<p>28.现在X5内核怎么调试？在微信或者手q或者qq浏览器中调试页面</p>
<p>回答：现在的微信手Q里面的X5还无法通过inspector调试 后期我们会把带有inspector调试的版本挂在开发者后台下载区 敬请期待</p>
<p><br></p>
<p>29.请问x5支持webgl的所有接口吗？能在所有版本的android机（4.0+)和ios机(5.0+)上运行webgl吗？</p>
<p>回答：webgl目前是支持的，不过部分机型上还有兼容性问题</p>
<p><br></p>
<p>30.X5上支持哪些扩展？支持多少个纹理单元？</p>
<p>回答：X5上只能支持：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">WEBGL_lose_context  </div><div class="line">EXT_texture_filter_anisotropic  </div><div class="line">OES_texture_float  </div><div class="line">OES_standard_derivatives  </div><div class="line">OES_vertex_array_object  </div><div class="line">WEBGL_debug_renderer_info  </div><div class="line">WEBGL_debug_shaders  </div><div class="line">WEBKIT_WEBGL_compressed_texture_s3tc</div></pre></td></tr></table></figure>
<p>而且这些是必须手机GPU有对应的扩展指令才行的。</p>
<p>关于纹理单元。我们这边没有限制</p>
<p>上面的扩展，也都是基本每一个对应opengl的一个扩展</p>
<p>支持多少纹理单元，也是从opengl查询得到的。</p>
<p>主要应该是看手机GPU支持到啥程度，我们是做个对接。</p>
<p><br></p>
<p>31.x5的文件分片功能解决了吗，<code>blob = file.webkitSlice(start, stop)</code>,这样分片出来的blob用不了啊。</p>
<p>回答：分片问题这边已经定位处理，浏览器会在5.8版本修复</p>
<p><br></p>
<p>32.手机qq浏览器是否有调试工具呢？</p>
<p>回答：有的，Inspector。</p>
<p><br></p>
<p>33.请问现在微信调用的手机QQ浏览器支持websocket 吗？</p>
<p>回答：支持websocket ，暂不支持wss，不支持webrtc</p>
<p><br></p>
<p>34.有计划支持webRTC吗？</p>
<p>回答：这个我们后续会评估的。</p>
<p><br></p>
<p>35.我是HTML5游戏开发者，制作中的H5游戏需要有音乐音效。但是我在android机器上使用QQ浏览器出现了如下问题：</p>
<p>循环播放BGM时，如果同时播放音效，BGM会被强行暂停 多个音效同时播放时，会出现明显的无法忍受的延迟和播放失败 这个问题在同一台机器的微信上同样存在，但是同一台机器的chrome没有这个问题。</p>
<p>我能想到的最合理的解释是：X5内核同一时间只能播放一个音频通道。</p>
<p>希望官方能解答我的疑惑和遇到的问题，谢谢。</p>
<p>PS：</p>
<ul>
<li>使用的H5音频库 : SoundJS</li>
<li>使用的音频格式 : mp3</li>
<li>使用的Android机型：三星 Note3</li>
</ul>
<p>回答：播放音效需要获取声音输出焦点，目前只支持同时播放一个音效 您提的需求我们会讨论评估后期是否能有方案现</p>
<p><br></p>
<p>36.播放音效时，为啥会把我后台的BGM播放给暂停掉？</p>
<p>回答：播放声音时当前音频需要获取 audiofocus ，系统在audiofocus丢失时会通知其它音频播放软件，这个暂停应该是播放软件自身的行为，我们本身并没有暂停后台音频，只是向系统申请了 audiofocus</p>
<p><br></p>
<p>37.300ms延迟是指什么？click 和 touch ?</p>
<p>回答：touch 点击之后，到 click 事件被触发，click 事件有延迟，touch 不存在，用 touchstart 事件替代 click 事件就OK</p>
<p><br></p>
<p>38.现在微信内置的浏览器能支持flexbox么，现在有没有什么好办法能够替代呢？做好的网页一放到微信上，大量的flex的页面</p>
<p>回答：你好flexbox正在开发支持，flexbox在android4.1到4.3系统内核上，也有类似问题，页面是需要兼容的</p>
<p><br></p>
<p>39.有没有什么x5内核的论坛或者wiki之类的？可以参考下。</p>
<p>回答：<a href="http://bbs.browser.qq.com/" target="_blank" rel="external">http://bbs.browser.qq.com/</a> <a href="http://x5.tencent.com/" target="_blank" rel="external">http://x5.tencent.com/</a> 这两个论坛可以关注下</p>
<p>另外有我们的公众账号 有问题可以随时交流</p>
<p><br></p>
<p>40.X5公众号叫什么？</p>
<p>回答：腾讯X5浏览服务</p>
<p><br></p>
<p>41.手q上面的内核应该也是x5的吧？这样直接在手q上面的效果和在微信里面应该是一样的？</p>
<p>回答：是的手Q微信内的webview都是X5。</p>
<p><br></p>
<p>42.x5不支持font-face吗？</p>
<p>回答：支持</p>
<p><br></p>
<p>43.x5 支持flex吗？有兼容性文档吗？</p>
<p>回答：不支持.<a href="http://1.h5support.sinaapp.com/incoming/cow.html" target="_blank" rel="external">http://1.h5support.sinaapp.com/incoming/cow.html</a></p>
<p>这个页面是参考caniuse的测试用例得到的测试结果，5.7是对应qq浏览器5.7版本，可以对比下和系统浏览器4.1~.4.4的支持度。有需要的同学可以先参考下，相关的文档建设我们也在逐步完……</p>
<p><br></p>
<p>44.iscroll+lazyload在x5浏览器里面卡顿很严重，有人碰到过类似问题么，小米手机 列表内元素200个左右。</p>
<p>回答：iscroll本身对内核要求比较高，较新的blink版本支持才比较好。可以对比测试下android 4.x 的系统浏览器看看。建议还是在前端做些优化，避免较长的元素，并减少动画效果。<a href="http://www.cnblogs.com/vbluebirdv/archive/2012/11/18/2776300.html" target="_blank" rel="external">http://www.cnblogs.com/vbluebirdv/archive/2012/11/18/2776300.html</a> 可以参考网上一些iscroll调优的文章</p>
<p><br></p>
<p>45.微信里面缓存问题，在安卓下和 ios下，刷新机制是不是不一样？</p>
<p>回答：ios因为有刷新功能，点击之后请求到的都是最新的文件，安卓下，不管怎样请求都不会更新文件</p>
<p><br></p>
<p>46.现在微信里面没有假如这个啊？为什么IOS QQ浏览器不识别这个？</p>
<p>回答：ios内核不是X5， ios 浏览器后续版本也会支持 <a href="http://open.mb.qq.com/doc?id=1201" target="_blank" rel="external">http://open.mb.qq.com/doc?id=1201</a> 目前ios 浏览器仅支持 x5-page-mode</p>
<p><br></p>
<p>47.现在白鹭游戏引擎是不是内置在x5里面了？</p>
<p>回答：内置了白鹭引擎runtime</p>
<p><br></p>
<p>48.x5内核不支持 canvas 的 background 属性吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!doctype html&gt;  </div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;  </div><div class="line">&lt;head&gt;  </div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;  </div><div class="line">&lt;title&gt;canvas test&lt;/title&gt;  </div><div class="line">    &lt;!--&lt;meta HTTP-EQUIV=&quot;pragma&quot; CONTENT=&quot;no-cache&quot;&gt;--&gt;</div><div class="line">    &lt;!--&lt;meta HTTP-EQUIV=&quot;Cache-Control&quot; CONTENT=&quot;no-store, must-revalidate&quot;&gt;--&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;  </div><div class="line">&lt;div&gt;  </div><div class="line">    &lt;canvas id=&quot;testCanvas&quot; width=&quot;500&quot; height=&quot;300&quot; style=&quot;background: #00FF00;&quot;&gt;&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;!--&lt;canvas id=&quot;testCanvas&quot; width=&quot;1136&quot; height=&quot;640&quot; style=&quot;background:#000&quot;&gt;&lt;/canvas&gt; --&gt;  </div><div class="line">&lt;/div&gt;  </div><div class="line">&lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>背景颜色显示不出来</p>
<p>回答：这个是做了优化，当canvas下盖了背景，就没有去绘制背景图片，当初是因为一些手机的GPu在绘制这块，如果存在这种情况绘制非常慢</p>
<p><br></p>
<p>49.qq浏览器有没有准备支持asm.js的计划？</p>
<p>回答：我们也正在筹备相关工作，会对市面上各种游戏引擎进行全面评测并设计合理的架构方案整合。预计下半年可以推出，敬请期待</p>
<p><br></p>
<p>50.X5不支持<code>canvas.toDataUrl()</code>的image/jpeg参数，还是转成了默认的png格式请问有什么替换方法吗？</p>
<p>回答：当前确实还不支持…我们在修复</p>
<p><br></p>
<p>51.问一下 ios版的微信里面是用的系统自带的UIWebView还是用的qq浏览器的内核？</p>
<p>回答：ios版微信里面用的是系统自带的</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><a href="https://www.qianduan.net/author/shenfei/" target="_blank" rel="external">神飞</a>爱好前端设计与开发，崇尚一目了然的设计。现居深圳/广州，就职于腾讯微信设计团队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;QQ浏览器X5内核问题汇总&quot;&gt;&lt;a href=&quot;#QQ浏览器X5内核问题汇总&quot; class=&quot;headerlink&quot; title=&quot;QQ浏览器X5内核问题汇总&quot;&gt;&lt;/a&gt;QQ浏览器X5内核问题汇总&lt;/h2&gt;&lt;p&gt;23 September 2015&lt;/p&gt;
&lt;p&gt;重
    
    </summary>
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://www.wanglinzhizhi.me/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="QQ浏览器" scheme="http://www.wanglinzhizhi.me/tags/QQ%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="X5内核" scheme="http://www.wanglinzhizhi.me/tags/X5%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>REST API</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/REST%20API/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/REST API/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><h2 id="REST-的核心概念"><a href="#REST-的核心概念" class="headerlink" title="REST 的核心概念"></a>REST 的核心概念</h2><ol>
<li>互联网上所有可以访问的内容，都是资源。</li>
<li>服务器保存资源，客户端请求资源。</li>
<li>同一个资源，有多种表现形式。</li>
<li>协议本身不带有状态，通信时客户端必须通过参数，表示请求不同状态的资源。</li>
<li>状态转换通过HTTP动词表示。</li>
</ol>
<h2 id="URL-设计"><a href="#URL-设计" class="headerlink" title="URL 设计"></a>URL 设计</h2><p>URL 是资源的唯一识别符。</p>
<ul>
<li>/store/1</li>
<li>/store/2</li>
<li>/store/1/employee/2 </li>
</ul>
<h2 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h2><p>查询字符串表示对所请求资源的约束条件。</p>
<ul>
<li>GET /zoos/1/animals?limit=10</li>
<li>GET /zoos/1/animals?limit=10&amp;offset=10</li>
<li>GET /animals?zoo_id=1</li>
</ul>
<h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><table>
<thead>
<tr>
<th>操作</th>
<th>SQL方法</th>
<th>HTTP动词</th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE</td>
<td>INSERT</td>
<td>POST</td>
</tr>
<tr>
<td>READ</td>
<td>SELECT</td>
<td>GET</td>
</tr>
<tr>
<td>UPDATE</td>
<td>UPDATE</td>
<td>PUT/PATCH</td>
</tr>
<tr>
<td>DELETE</td>
<td>DELETE</td>
<td>DELETE</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /v1/stores/1234</div><div class="line">PUT /v1/stores/1234</div><div class="line">POST /v1/stores</div><div class="line">DELETE /v1/stores/1234</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;REST-API&quot;&gt;&lt;a href=&quot;#REST-API&quot; class=&quot;headerlink&quot; title=&quot;REST API&quot;&gt;&lt;/a&gt;REST API&lt;/h2&gt;&lt;h2 id=&quot;REST-的核心概念&quot;&gt;&lt;a href=&quot;#REST-的核心概念&quot; class=&quot;
    
    </summary>
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/categories/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="前端架构" scheme="http://www.wanglinzhizhi.me/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构" scheme="http://www.wanglinzhizhi.me/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="Web API" scheme="http://www.wanglinzhizhi.me/tags/Web-API/"/>
    
      <category term="API设计" scheme="http://www.wanglinzhizhi.me/tags/API%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="REST" scheme="http://www.wanglinzhizhi.me/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>React 入门</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/React%20%20%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/React  入门/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-入门"><a href="#React-入门" class="headerlink" title="React  入门"></a>React  入门</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 &#123; 开头），就用 JavaScript 规则解析。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员.</div></pre></td></tr></table></figure>
<h2 id="组件类"><a href="#组件类" class="headerlink" title="组件类."></a>组件类.</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</div><div class="line"></div><div class="line">React.createClass 方法就用于生成一个组件类.</div></pre></td></tr></table></figure>
<p>注意，组件类的第一个字母必须大写，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>。另外，组件类只能包含一个顶层标签，否则也会报错。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&gt; <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</div><div class="line">&gt;   render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&gt;     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></div><div class="line">&gt;       Hello &#123;this.props.name&#125;</div><div class="line">&gt;     <span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line">&gt;       some text</div><div class="line">&gt;     <span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</div><div class="line">&gt;   &#125;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>上面代码会报错，因为<code>HelloMessage</code>组件包含了两个顶层标签：<code>h1</code>和<code>p</code>。</p>
<p>添加组件属性，有一个地方需要注意，就是 <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code> ，这是因为 <code>class</code> 和 <code>for</code> 是 JavaScript 的保留字。</p>
<h2 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h2><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点</p>
<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：</p>
<ul>
<li><p>如果当前组件没有子节点，它就是 <code>undefined</code> ;</p>
</li>
<li><p>如果有一个子节点，数据类型是 <code>object</code> ；</p>
</li>
<li><p>如果有多个子节点，数据类型就是 <code>array</code> 。</p>
</li>
</ul>
<p>所以，处理 <code>this.props.children</code> 的时候要小心。</p>
<h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</p>
<h2 id="获取真实的DOM节点"><a href="#获取真实的DOM节点" class="headerlink" title="获取真实的DOM节点"></a>获取真实的DOM节点</h2><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 <a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="external">DOM diff</a> ，它可以极大提高网页的性能表现。</p>
<p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type="text" ref="myTextInput" /&gt;</div><div class="line">        &lt;input type="button" value="Focus the text input" onClick=&#123;this.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyComponent /&gt;,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>组件 <code>MyComponent</code> 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，<strong>虚拟 DOM 是拿不到用户输入的</strong>。</p>
<p>为了做到这一点，<strong>文本输入框必须有一个 <code>ref</code> 属性，然后 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点</strong></p>
<p>需要注意的是，由于 <code>this.refs.[refName]</code> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，<strong>通过为组件指定 <code>Click</code> 事件的回调函数</strong>，确保了只有等到真实 DOM 发生 <code>Click</code> 事件之后，才会读取 <code>this.refs.[refName]</code> 属性。</p>
<p>React 组件支持很多事件，除了 <code>Click</code> 事件以外，还有 <code>KeyDown</code> 、<code>Copy</code>、<code>Scroll</code> 等，完整的事件清单请查看<a href="http://facebook.github.io/react/docs/events.html#supported-events" target="_blank" rel="external">官方文档</a>。</p>
<h2 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h2><p>组件免不了要与用户互动，React 的一大创新，就是<strong>将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>上面代码是一个 <code>LikeButton</code> 组件，它的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>
<p>由于 <code>this.props</code> 和 <code>this.state</code> 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，</p>
<ul>
<li><code>this.props</code> 表示那些一旦定义，就不再改变的特性，</li>
<li><code>this.state</code> 是会随着用户互动而产生变化的特性。</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 <code>this.props</code> 读取（查看 <a href="https://github.com/ruanyf/react-demos/blob/master/demo09/index.html" target="_blank" rel="external"><code>demo9</code></a> ）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">var</span> Input = React.createClass(&#123;</div><div class="line">   <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line">   &#125;,</div><div class="line"></div><div class="line"><span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">     <span class="keyword">return</span> (</div><div class="line">       <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">     );</div><div class="line">   &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> ReactDOM.render(<span class="tag">&lt;<span class="name">Input</span>/&gt;</span>, document.body);</div></pre></td></tr></table></figure>
<p>上面代码中，文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况，更多介绍请参考<a href="http://facebook.github.io/react/docs/forms.html" target="_blank" rel="external">官方文档</a>。</p>
<h2 id="十、组件的生命周期"><a href="#十、组件的生命周期" class="headerlink" title="十、组件的生命周期"></a>十、组件的生命周期</h2><p>组件的<a href="https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle" target="_blank" rel="external">生命周期</a>分成三个状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Mounting：已插入真实 DOM</div><div class="line">Updating：正在被重新渲染</div><div class="line">Unmounting：已移出真实 DOM</div></pre></td></tr></table></figure>
<p>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">componentWillMount();</div><div class="line">componentDidMount();</div><div class="line">componentWillUpdate(object nextProps, object nextState);</div><div class="line">componentDidUpdate(object prevProps, object prevState);</div><div class="line">componentWillUnmount();</div></pre></td></tr></table></figure>
<p>此外，React 还提供两种特殊状态的处理函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</div><div class="line"></div><div class="line">shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</div></pre></td></tr></table></figure>
<h3 id="关于组件的样式"><a href="#关于组件的样式" class="headerlink" title="关于组件的样式"></a>关于组件的样式</h3><p>组件的<code>style</code>属性的设置方式也值得注意，不能写成</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">style=&quot;opacity:&#123;this.state.opacity&#125;;&quot;</div></pre></td></tr></table></figure>
<p>而要写成</p>
<p>要写成</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">style=&#123;&#123;opacity: this.state.opacity&#125;&#125;</div></pre></td></tr></table></figure>
<p>这是因为 <a href="https://facebook.github.io/react/tips/inline-styles.html" target="_blank" rel="external">React 组件样式</a>是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">组件的style属性的设置方式也值得注意</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-入门&quot;&gt;&lt;a href=&quot;#React-入门&quot; class=&quot;headerlink&quot; title=&quot;React  入门&quot;&gt;&lt;/a&gt;React  入门&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="React" scheme="http://www.wanglinzhizhi.me/categories/React/"/>
    
    
      <category term="React" scheme="http://www.wanglinzhizhi.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title> UC 浏览器的部分私有Meta 属性</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/UC%20%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%83%A8%E5%88%86%E7%A7%81%E6%9C%89Meta%20%E5%B1%9E%E6%80%A7/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/UC 浏览器的部分私有Meta 属性/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UC-浏览器的部分私有Meta-属性"><a href="#UC-浏览器的部分私有Meta-属性" class="headerlink" title="UC 浏览器的部分私有Meta 属性"></a>UC 浏览器的部分私有Meta 属性</h2><p>1 设置屏幕方向为横屏还是竖屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait|landscape&quot;&gt;</div></pre></td></tr></table></figure>
<p>2 设置是否全屏，yes表示强制浏览器全屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</div></pre></td></tr></table></figure>
<p>3 缩放不出滚动条<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;uc-fitscreen=no|yes&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>设置no后用户缩放与标准浏览器缩放一直，设置为yes后，用户缩放金放到图片和文字，不出现横向滚动条。</p>
<p>4  排版</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;meta name=&quot;layoutmode&quot; content=&quot;fitscreen|standard&quot; /&gt;</div></pre></td></tr></table></figure>
<p>fitscreen模式简化页面处理，适合页面阅读节省流量，standard模式和标准浏览器一致；一旦设置layoutmode meta后，用户使用浏览器提供的的排版模式选项将会无效。</p>
<p>5强制图片显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;meta name=&quot;imagemode&quot; content=&quot;force&quot;/&gt;</div></pre></td></tr></table></figure>
<p>UC浏览器为了节省流量，为用户提供了无图模式，但是如果页面的图片是必不可少的，如验证码的，需要强制浏览器显示图片，可以设置imagemode， 不影响子页面。通过META设置图片加载方式会作用于整个页面，如果希望对单个图片进行设置，那么可以使用这个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;img src=&quot;...&quot; show=&quot;force&quot;&gt;</div></pre></td></tr></table></figure>
<p>6 应用模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;/&gt;</div></pre></td></tr></table></figure>
<p>使用了application这种应用模式后，页面讲默认全屏，禁止长按菜单，禁止收拾，标准排版，以及强制图片显示。</p>
<p>by  雪松</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UC-浏览器的部分私有Meta-属性&quot;&gt;&lt;a href=&quot;#UC-浏览器的部分私有Meta-属性&quot; class=&quot;headerlink&quot; title=&quot;UC 浏览器的部分私有Meta 属性&quot;&gt;&lt;/a&gt;UC 浏览器的部分私有Meta 属性&lt;/h2&gt;&lt;p&gt;1 设置屏幕
    
    </summary>
    
      <category term="移动web" scheme="http://www.wanglinzhizhi.me/categories/%E7%A7%BB%E5%8A%A8web/"/>
    
    
      <category term="移动web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8web/"/>
    
      <category term="UC 浏览器" scheme="http://www.wanglinzhizhi.me/tags/UC-%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web 3D技术 的案例分析与探索 (1)</title>
    <link href="http://www.wanglinzhizhi.me/2017/01/21/Web%203D%E6%8A%80%E6%9C%AF%20%E7%9A%84%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%8E%A2%E7%B4%A2%20(1)/"/>
    <id>http://www.wanglinzhizhi.me/2017/01/21/Web 3D技术 的案例分析与探索 (1)/</id>
    <published>2017-01-21T10:51:18.000Z</published>
    <updated>2017-01-21T10:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-3D技术-的案例分析与探索-1"><a href="#Web-3D技术-的案例分析与探索-1" class="headerlink" title="Web 3D技术 的案例分析与探索 (1)"></a>Web 3D技术 的案例分析与探索 (1)</h2><p>案例:  <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/finial/" target="_blank" rel="external">探秘腾讯</a></p>
<p>我们对其进行了解析, 初步分为5个部分 .</p>
<p>分别为 </p>
<ul>
<li><p>预加载模块 -&gt; <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part1-imgolad/part1.html" target="_blank" rel="external">part1</a></p>
</li>
<li><p>星空背景模块 -&gt; <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part2/part2.html" target="_blank" rel="external">part2</a></p>
</li>
<li><p>手势解除锁定模块- &gt;<a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part3/part3.html" target="_blank" rel="external">part3</a> </p>
</li>
<li><p>惯性运动的3D 模型 -&gt; <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part5/fake/index.html" target="_blank" rel="external">part4</a></p>
</li>
<li><p>重力感应(陀螺仪) 的3D模型  </p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>重力感应版</p>
<p><img src="https://www.yichewx.com/gogs/wanglinzhizhi/wic-tencent/raw/master/readme/QR.png" alt=""></p>
</li>
</ul>
<p><code>预加载</code> 和<code>移动星空</code>  ,以及<code>手势解锁</code> 都是很不错的交互, 也很值得学习吸收, 这里主要研究 <code>Web 3D</code>  相关技术,故略去.</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>现在的web 端 3D 技术 我们简单的粗浅的划分可以分为2类.</p>
<ul>
<li>伪3D技术 ,通过2维的平面的图,(例如 全景图), 视觉误差等方法实现的 可以乱真的效果的图.</li>
<li>真3D模型. 通过3D 模型, 提供各个视角的真实的3D物体.</li>
</ul>
<p>腾讯  <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/finial/" target="_blank" rel="external">探秘腾讯</a>  案例中使用的是全景图的方式 ,包括淘宝的<a href="">造物节</a>,以及天猫双11的 <a href="http://invite.jeejoy.com/index.html" target="_blank" rel="external">宇宙邀请函</a> 也都属于第一种(所不同的是全景图的制作方式). </p>
<h3 id="3D-Web-技术有以下可选技术栈："><a href="#3D-Web-技术有以下可选技术栈：" class="headerlink" title="3D Web 技术有以下可选技术栈："></a>3D Web 技术有以下可选技术栈：</h3><ul>
<li><p>CSS3（本文所提及的方式）</p>
</li>
<li><p>Three.js </p>
</li>
<li><p>krpano（为全景而生，低级浏览器则回退到 Flash）</p>
</li>
<li><p>A-frame</p>
<p>​</p>
<p>当然，也许还有其他的:)</p>
<p>​</p>
<p>恩,以上几个方向也是我们现在正在进军研究方向.</p>
<p>​</p>
<p>:)</p>
</li>
</ul>
<h2 id="关于实现"><a href="#关于实现" class="headerlink" title="关于实现"></a>关于实现</h2><p>看图说话, </p>
<p><img src="https://www.yichewx.com/gogs/wanglinzhizhi/wic-tencent/raw/master/readme/cube.png" alt=""></p>
<p>我们构造出这么个模型,3D 的六面体. 我们加上<code>惯性运动</code> 之后, 这个六面体就可以随着 <code>手指(/或鼠标)的滑动</code>  / <code>鼠标滑动</code> , 像这样 <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part5/fake/index.html" target="_blank" rel="external">CUBE</a>  . </p>
<p>恩,这貌似和我们需要的3D 效果,和 那种辽阔感没多大关系.  恩,加几个参数</p>
<ul>
<li><p>我们需要把我们的魔方放大10-100倍,</p>
</li>
<li><p>然后想想一下我们在魔方内部, 六个面不是色彩颜色,而是完整的图片背景(比如宇宙背景).</p>
<p>​</p>
</li>
</ul>
<p>所以我么看到的就是 这样: <a href="http://admin.bitauto.com/EditorTest/wanglin/wic-tencent/part4/" target="_blank" rel="external">星空</a></p>
<p>done :)</p>
<p>实现的另一部分 : UI </p>
<h3 id="关于UI层的实现"><a href="#关于UI层的实现" class="headerlink" title="关于UI层的实现"></a>关于UI层的实现</h3><p> 我们会思考,这样的场景搭建 会需要极高的ＵＩ设计成本，需要专业的设备来构造这样的３Ｄ立体空间的环境吗？ </p>
<p>答案是: 不会.</p>
<p>针对 腾讯案例 来说明, 通过解析, 可以发现,可以拆解重新组装一下之后是这样</p>
<p>如图:</p>
<p><img src="https://www.yichewx.com/gogs/wanglinzhizhi/wic-tencent/raw/master/readme/xingkong.jpg" alt=""></p>
<p>恩,就是一张可以展开成6面的<strong>平面图</strong> ,  没有特殊角度拉伸,没有特殊形变的单纯的平面图 .  只不过 大小 为….6721x1136. 仅此而已. 在设计成本上,并没有任何附加. 这是魔方实现方法的 优点之一.</p>
<p>那么,我们需要做的是, 想象力:)</p>
<p>从设计角度来看,我们的画布从以前的640x11366, 到3D空间环境中的 8000x8000 甚至更大.</p>
<p> 如何运用和调度空间以及如何闭合空间是重点. </p>
<p>腾讯给出的答案是<code>广度上 的扩充</code> , 阿里的 造物节是<code>广度 的扩充</code> , 宇宙邀请函是 <code>深度上 纵向</code> 的深入. 都很很有想象力的思路. </p>
<p>提一个正确的问题 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line">当画布空间扩展到8000<span class="selector-tag">x8000</span> 的时候 , 怎么挥霍空间?</div><div class="line"></div><div class="line"><span class="selector-pseudo">:)</span></div></pre></td></tr></table></figure>
<p>以上是基于立方体模型的实现(我们可以成为魔方),  至于基于 <code>Three.Js</code> ,<code>WebGL</code>  甚至 <code>Web VR</code> 等其他技术栈的实现方法, 敬请期待我们 组 小伙伴们的 研究成果.  :)</p>
<p>Git: <a href="https://www.yichewx.com/gogs/wanglinzhizhi/wic-tencent" target="_blank" rel="external">https://www.yichewx.com/gogs/wanglinzhizhi/wic-tencent</a></p>
<p>by wanglinzhizhi</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>作为系列的第一篇, 一个拉风的结语是必须的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello, new world</div><div class="line"></div><div class="line">:)</div></pre></td></tr></table></figure>
<p>前端开发部 </p>
<p>by wanglinzhizhi</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web-3D技术-的案例分析与探索-1&quot;&gt;&lt;a href=&quot;#Web-3D技术-的案例分析与探索-1&quot; class=&quot;headerlink&quot; title=&quot;Web 3D技术 的案例分析与探索 (1)&quot;&gt;&lt;/a&gt;Web 3D技术 的案例分析与探索 (1)&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="web" scheme="http://www.wanglinzhizhi.me/categories/web/"/>
    
    
      <category term="Web 3D" scheme="http://www.wanglinzhizhi.me/tags/Web-3D/"/>
    
      <category term="移动Web" scheme="http://www.wanglinzhizhi.me/tags/%E7%A7%BB%E5%8A%A8Web/"/>
    
      <category term="wanglinzhizhi" scheme="http://www.wanglinzhizhi.me/tags/wanglinzhizhi/"/>
    
      <category term="CSS3引擎" scheme="http://www.wanglinzhizhi.me/tags/CSS3%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
</feed>
